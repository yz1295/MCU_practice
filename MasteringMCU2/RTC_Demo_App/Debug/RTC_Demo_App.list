
RTC_Demo_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cbc  08004cbc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cbc  08004cbc  00005cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cc4  08004cc4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc4  08004cc4  00005cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc8  08004cc8  00005cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ccc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  08004d28  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004d28  00006294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea8b  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0e  00000000  00000000  00014b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00016a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a58  00000000  00000000  00017758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bbd  00000000  00000000  000181b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc9a  00000000  00000000  0003ad6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d62b8  00000000  00000000  0004aa07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120cbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  00120d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c3  00000000  00000000  00124a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047c4 	.word	0x080047c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080047c4 	.word	0x080047c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler (void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005f0:	f000 ff34 	bl	800145c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005f4:	f001 f880 	bl	80016f8 <HAL_SYSTICK_IRQHandler>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <TIM6_DAC_IRQHandler>:
/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */

void TIM6_DAC_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <TIM6_DAC_IRQHandler+0x10>)
 8000602:	f002 fe77 	bl	80032f4 <HAL_TIM_IRQHandler>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000dc 	.word	0x200000dc

08000610 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000614:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000618:	f001 fa10 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <printmsg>:
  * @param  format: Format string as in printf.
  * @param  ...: Additional arguments providing the data to print.
  * @retval None
  */
void printmsg(char *format,...)
{
 8000620:	b40f      	push	{r0, r1, r2, r3}
 8000622:	b580      	push	{r7, lr}
 8000624:	b096      	sub	sp, #88	@ 0x58
 8000626:	af00      	add	r7, sp, #0
  char str[80];

  /*Extract the the argument list using VA apis */
  va_list args;
  va_start(args, format);
 8000628:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800062c:	607b      	str	r3, [r7, #4]
  vsprintf(str, format,args);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fc3c 	bl	8003eb4 <vsiprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fde5 	bl	8000210 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29a      	uxth	r2, r3
 800064a:	f107 0108 	add.w	r1, r7, #8
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <printmsg+0x48>)
 8000654:	f002 ffdf 	bl	8003616 <HAL_UART_Transmit>
  va_end(args);
}
 8000658:	bf00      	nop
 800065a:	3758      	adds	r7, #88	@ 0x58
 800065c:	46bd      	mov	sp, r7
 800065e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000662:	b004      	add	sp, #16
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000098 	.word	0x20000098

0800066c <main>:

int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000670:	f000 fea2 	bl	80013b8 <HAL_Init>
  SystemClock_Config_HSE(SYS_CLOCK_FREQ_84_MHZ);
 8000674:	2054      	movs	r0, #84	@ 0x54
 8000676:	f000 f80d 	bl	8000694 <SystemClock_Config_HSE>
  GPIO_Init();
 800067a:	f000 f8a5 	bl	80007c8 <GPIO_Init>
  UART2_Init();
 800067e:	f000 f911 	bl	80008a4 <UART2_Init>
  //TIMER6_Init();

  while( ! PrintUserMenu())
 8000682:	bf00      	nop
 8000684:	f000 f9ac 	bl	80009e0 <PrintUserMenu>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0fa      	beq.n	8000684 <main+0x18>
  {

  }

  while(1);
 800068e:	bf00      	nop
 8000690:	e7fd      	b.n	800068e <main+0x22>
	...

08000694 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	@ 0x58
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ac:	623b      	str	r3, [r7, #32]
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b78      	cmp	r3, #120	@ 0x78
 80006bc:	d038      	beq.n	8000730 <SystemClock_Config_HSE+0x9c>
 80006be:	2b78      	cmp	r3, #120	@ 0x78
 80006c0:	dc7c      	bgt.n	80007bc <SystemClock_Config_HSE+0x128>
 80006c2:	2b32      	cmp	r3, #50	@ 0x32
 80006c4:	d002      	beq.n	80006cc <SystemClock_Config_HSE+0x38>
 80006c6:	2b54      	cmp	r3, #84	@ 0x54
 80006c8:	d019      	beq.n	80006fe <SystemClock_Config_HSE+0x6a>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 80006ca:	e077      	b.n	80007bc <SystemClock_Config_HSE+0x128>
    Osc_Init.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 80006d0:	2332      	movs	r3, #50	@ 0x32
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80006e0:	230f      	movs	r3, #15
 80006e2:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80006fc:	e032      	b.n	8000764 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 80006fe:	2304      	movs	r3, #4
 8000700:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 8000702:	2354      	movs	r3, #84	@ 0x54
 8000704:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000712:	230f      	movs	r3, #15
 8000714:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000722:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800072e:	e019      	b.n	8000764 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 8000734:	2378      	movs	r3, #120	@ 0x78
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000744:	230f      	movs	r3, #15
 8000746:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000750:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000754:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075a:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 800075c:	2303      	movs	r3, #3
 800075e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000762:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fff3 	bl	8002754 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config_HSE+0xe4>
  {
    Error_handler();
 8000774:	f000 fd12 	bl	800119c <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000778:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f972 	bl	8001a6c <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config_HSE+0xfe>
  {
    Error_handler();
 800078e:	f000 fd05 	bl	800119c <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000792:	f001 fa51 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8000796:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 8000798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <SystemClock_Config_HSE+0x130>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	099b      	lsrs	r3, r3, #6
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 ff7f 	bl	80016a6 <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007a8:	2004      	movs	r0, #4
 80007aa:	f000 ff89 	bl	80016c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	f000 ff4c 	bl	8001652 <HAL_NVIC_SetPriority>
 80007ba:	e000      	b.n	80007be <SystemClock_Config_HSE+0x12a>
    return ;
 80007bc:	bf00      	nop
}
 80007be:	3758      	adds	r7, #88	@ 0x58
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	10624dd3 	.word	0x10624dd3

080007c8 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <GPIO_Init+0x80>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <GPIO_Init+0x80>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <GPIO_Init+0x80>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <GPIO_Init+0x80>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <GPIO_Init+0x80>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <GPIO_Init+0x80>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef ledgpio;
  ledgpio.Pin = GPIO_PIN_5;
 8000806:	2320      	movs	r3, #32
 8000808:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&ledgpio);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <GPIO_Init+0x84>)
 800081a:	f000 ff7b 	bl	8001714 <HAL_GPIO_Init>

  ledgpio.Pin = GPIO_PIN_13;
 800081e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000822:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_IT_FALLING;
 8000824:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000828:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC,&ledgpio);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4806      	ldr	r0, [pc, #24]	@ (8000850 <GPIO_Init+0x88>)
 8000836:	f000 ff6d 	bl	8001714 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083a:	2028      	movs	r0, #40	@ 0x28
 800083c:	f000 ff25 	bl	800168a <HAL_NVIC_EnableIRQ>
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000
 8000850:	40020800 	.word	0x40020800

08000854 <RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void RTC_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  hrtc.Instance = RTC;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <RTC_Init+0x48>)
 800085a:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <RTC_Init+0x4c>)
 800085c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat     = RTC_HOURFORMAT_24;
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <RTC_Init+0x48>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv   = RTC_ASYNCH_PREDIV;
 8000864:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <RTC_Init+0x48>)
 8000866:	227f      	movs	r2, #127	@ 0x7f
 8000868:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv    = RTC_SYNCH_PREDIV;
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <RTC_Init+0x48>)
 800086c:	22ff      	movs	r2, #255	@ 0xff
 800086e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <RTC_Init+0x48>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <RTC_Init+0x48>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <RTC_Init+0x48>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  __HAL_RTC_RESET_HANDLE_STATE(&hrtc);
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <RTC_Init+0x48>)
 8000884:	2200      	movs	r2, #0
 8000886:	775a      	strb	r2, [r3, #29]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <RTC_Init+0x48>)
 800088a:	f002 fa01 	bl	8002c90 <HAL_RTC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <RTC_Init+0x44>
  {
    /* Initialization Error */
    Error_handler();
 8000894:	f000 fc82 	bl	800119c <Error_handler>
  }
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000124 	.word	0x20000124
 80008a0:	40002800 	.word	0x40002800

080008a4 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <UART2_Init+0x44>)
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <UART2_Init+0x48>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <UART2_Init+0x44>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <UART2_Init+0x44>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <UART2_Init+0x44>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <UART2_Init+0x44>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <UART2_Init+0x44>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <UART2_Init+0x44>)
 80008d0:	220c      	movs	r2, #12
 80008d2:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <UART2_Init+0x44>)
 80008d6:	f002 fe51 	bl	800357c <HAL_UART_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 80008e0:	f000 fc5c 	bl	800119c <Error_handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000098 	.word	0x20000098
 80008ec:	40004400 	.word	0x40004400

080008f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b098      	sub	sp, #96	@ 0x60
 8000908:	af02      	add	r7, sp, #8
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
  char showtime[50];
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  memset(&sdatestructureget,0,sizeof(sdatestructureget));
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2204      	movs	r2, #4
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fad6 	bl	8003ec8 <memset>
  memset(&stimestructureget,0,sizeof(stimestructureget));
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2214      	movs	r2, #20
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f003 facf 	bl	8003ec8 <memset>
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2200      	movs	r2, #0
 8000930:	4619      	mov	r1, r3
 8000932:	4827      	ldr	r0, [pc, #156]	@ (80009d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000934:	f002 fafa 	bl	8002f2c <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	4823      	ldr	r0, [pc, #140]	@ (80009d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000942:	f002 fbf8 	bl	8003136 <HAL_RTC_GetDate>
  /* Display time Format : hh:mm:ss */
  sprintf((char*)showtime,"%02d:%02d:%02d  ",stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8000946:	7b3b      	ldrb	r3, [r7, #12]
 8000948:	461a      	mov	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	4619      	mov	r1, r3
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	460b      	mov	r3, r1
 8000958:	491e      	ldr	r1, [pc, #120]	@ (80009d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800095a:	f003 fa73 	bl	8003e44 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)showtime,strlen(showtime),HAL_MAX_DELAY);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fc54 	bl	8000210 <strlen>
 8000968:	4603      	mov	r3, r0
 800096a:	b29a      	uxth	r2, r3
 800096c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000976:	f002 fe4e 	bl	8003616 <HAL_UART_Transmit>
  memset(showtime,0,sizeof(showtime));
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	2232      	movs	r2, #50	@ 0x32
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f003 faa0 	bl	8003ec8 <memset>
  sprintf((char*)showtime,"%02d-%2d-%2d\r\n",sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 8000988:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800098c:	461a      	mov	r2, r3
 800098e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000992:	4619      	mov	r1, r3
 8000994:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000998:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800099c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	460b      	mov	r3, r1
 80009a4:	490d      	ldr	r1, [pc, #52]	@ (80009dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80009a6:	f003 fa4d 	bl	8003e44 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)showtime,strlen(showtime),HAL_MAX_DELAY);
 80009aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fc2e 	bl	8000210 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 80009c2:	f002 fe28 	bl	8003616 <HAL_UART_Transmit>
}
 80009c6:	bf00      	nop
 80009c8:	3758      	adds	r7, #88	@ 0x58
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000124 	.word	0x20000124
 80009d4:	080047dc 	.word	0x080047dc
 80009d8:	20000098 	.word	0x20000098
 80009dc:	080047f0 	.word	0x080047f0

080009e0 <PrintUserMenu>:

uint8_t PrintUserMenu(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  uint32_t cnt=0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  printmsg("RTC Demo Application\r\n");
 80009ea:	4855      	ldr	r0, [pc, #340]	@ (8000b40 <PrintUserMenu+0x160>)
 80009ec:	f7ff fe18 	bl	8000620 <printmsg>
  printmsg("Calendar Demo--> 1\r\n");
 80009f0:	4854      	ldr	r0, [pc, #336]	@ (8000b44 <PrintUserMenu+0x164>)
 80009f2:	f7ff fe15 	bl	8000620 <printmsg>
  printmsg("Alarm Demo--> 2\r\n");
 80009f6:	4854      	ldr	r0, [pc, #336]	@ (8000b48 <PrintUserMenu+0x168>)
 80009f8:	f7ff fe12 	bl	8000620 <printmsg>
  printmsg("Time-Stamp Demo-->3\r\n");
 80009fc:	4853      	ldr	r0, [pc, #332]	@ (8000b4c <PrintUserMenu+0x16c>)
 80009fe:	f7ff fe0f 	bl	8000620 <printmsg>
  printmsg("Low-Power Modes Demo-->4\r\n");
 8000a02:	4853      	ldr	r0, [pc, #332]	@ (8000b50 <PrintUserMenu+0x170>)
 8000a04:	f7ff fe0c 	bl	8000620 <printmsg>
  printmsg("Exit this app-->0\r\n");
 8000a08:	4852      	ldr	r0, [pc, #328]	@ (8000b54 <PrintUserMenu+0x174>)
 8000a0a:	f7ff fe09 	bl	8000620 <printmsg>
  printmsg("Type your option here :");
 8000a0e:	4852      	ldr	r0, [pc, #328]	@ (8000b58 <PrintUserMenu+0x178>)
 8000a10:	f7ff fe06 	bl	8000620 <printmsg>

  while(data_user != '\r')
 8000a14:	e010      	b.n	8000a38 <PrintUserMenu+0x58>
  {
    HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	494f      	ldr	r1, [pc, #316]	@ (8000b5c <PrintUserMenu+0x17c>)
 8000a1e:	4850      	ldr	r0, [pc, #320]	@ (8000b60 <PrintUserMenu+0x180>)
 8000a20:	f002 fe8b 	bl	800373a <HAL_UART_Receive>
    user_input[cnt]=data_user;
 8000a24:	4b4d      	ldr	r3, [pc, #308]	@ (8000b5c <PrintUserMenu+0x17c>)
 8000a26:	7819      	ldrb	r1, [r3, #0]
 8000a28:	4a4e      	ldr	r2, [pc, #312]	@ (8000b64 <PrintUserMenu+0x184>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	460a      	mov	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
    cnt++;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
  while(data_user != '\r')
 8000a38:	4b48      	ldr	r3, [pc, #288]	@ (8000b5c <PrintUserMenu+0x17c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b0d      	cmp	r3, #13
 8000a3e:	d1ea      	bne.n	8000a16 <PrintUserMenu+0x36>
  }
  printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000a40:	4b48      	ldr	r3, [pc, #288]	@ (8000b64 <PrintUserMenu+0x184>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <PrintUserMenu+0x184>)
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4846      	ldr	r0, [pc, #280]	@ (8000b68 <PrintUserMenu+0x188>)
 8000a4e:	f7ff fde7 	bl	8000620 <printmsg>


  switch(user_input[0]) {
 8000a52:	4b44      	ldr	r3, [pc, #272]	@ (8000b64 <PrintUserMenu+0x184>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3b30      	subs	r3, #48	@ 0x30
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d868      	bhi.n	8000b2e <PrintUserMenu+0x14e>
 8000a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a64 <PrintUserMenu+0x84>)
 8000a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a62:	bf00      	nop
 8000a64:	08000b25 	.word	0x08000b25
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000aab 	.word	0x08000aab
 8000a70:	08000ad5 	.word	0x08000ad5
 8000a74:	08000afb 	.word	0x08000afb
  uint8_t arg,ret;
  case '1':
    arg = CalendarDemoMenuPrint();
 8000a78:	f000 f9da 	bl	8000e30 <CalendarDemoMenuPrint>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	70bb      	strb	r3, [r7, #2]
    ret = Calendar_Demo(arg);
 8000a80:	78bb      	ldrb	r3, [r7, #2]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f884 	bl	8000b90 <Calendar_Demo>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	70fb      	strb	r3, [r7, #3]
    while(ret)
 8000a8c:	e009      	b.n	8000aa2 <PrintUserMenu+0xc2>
    {
      arg = CalendarDemoMenuPrint();
 8000a8e:	f000 f9cf 	bl	8000e30 <CalendarDemoMenuPrint>
 8000a92:	4603      	mov	r3, r0
 8000a94:	70bb      	strb	r3, [r7, #2]
      ret = Calendar_Demo(arg);
 8000a96:	78bb      	ldrb	r3, [r7, #2]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f879 	bl	8000b90 <Calendar_Demo>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	70fb      	strb	r3, [r7, #3]
    while(ret)
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1f2      	bne.n	8000a8e <PrintUserMenu+0xae>
    }
    break;
 8000aa8:	e044      	b.n	8000b34 <PrintUserMenu+0x154>
  case '2':
    arg = Alarm_DemoPrint();
 8000aaa:	f000 fa3b 	bl	8000f24 <Alarm_DemoPrint>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	70bb      	strb	r3, [r7, #2]
    ret = Alarm_Demo(arg);
 8000ab2:	78bb      	ldrb	r3, [r7, #2]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f997 	bl	8000de8 <Alarm_Demo>
 8000aba:	4603      	mov	r3, r0
 8000abc:	70fb      	strb	r3, [r7, #3]
    while(ret)
 8000abe:	e005      	b.n	8000acc <PrintUserMenu+0xec>
    {
      ret = Alarm_Demo(arg);
 8000ac0:	78bb      	ldrb	r3, [r7, #2]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f990 	bl	8000de8 <Alarm_Demo>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	70fb      	strb	r3, [r7, #3]
    while(ret)
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f6      	bne.n	8000ac0 <PrintUserMenu+0xe0>
    }
    break;
 8000ad2:	e02f      	b.n	8000b34 <PrintUserMenu+0x154>
  case '3':
    printmsg("This is time stamp Demo\r\n");
 8000ad4:	4825      	ldr	r0, [pc, #148]	@ (8000b6c <PrintUserMenu+0x18c>)
 8000ad6:	f7ff fda3 	bl	8000620 <printmsg>

    if(is_valid_time_set())
 8000ada:	f000 f851 	bl	8000b80 <is_valid_time_set>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d006      	beq.n	8000af2 <PrintUserMenu+0x112>
    {
      printmsg("press the user button to know the time stamp\r\n");
 8000ae4:	4822      	ldr	r0, [pc, #136]	@ (8000b70 <PrintUserMenu+0x190>)
 8000ae6:	f7ff fd9b 	bl	8000620 <printmsg>
      TimeStamp_Demo(0);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f994 	bl	8000e18 <TimeStamp_Demo>
    }
    else
    {
      printmsg("Valid time is not set: first set time and try this demo\r\n");
    }
    break;
 8000af0:	e020      	b.n	8000b34 <PrintUserMenu+0x154>
      printmsg("Valid time is not set: first set time and try this demo\r\n");
 8000af2:	4820      	ldr	r0, [pc, #128]	@ (8000b74 <PrintUserMenu+0x194>)
 8000af4:	f7ff fd94 	bl	8000620 <printmsg>
    break;
 8000af8:	e01c      	b.n	8000b34 <PrintUserMenu+0x154>
  case '4':
    arg = LowPowerDemoMenuPrint();
 8000afa:	f000 f9e5 	bl	8000ec8 <LowPowerDemoMenuPrint>
 8000afe:	4603      	mov	r3, r0
 8000b00:	70bb      	strb	r3, [r7, #2]
    ret = LowPowerDemo(arg);
 8000b02:	78bb      	ldrb	r3, [r7, #2]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f97b 	bl	8000e00 <LowPowerDemo>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	70fb      	strb	r3, [r7, #3]
    while(ret)
 8000b0e:	e005      	b.n	8000b1c <PrintUserMenu+0x13c>
    {
      ret = LowPowerDemo(arg);
 8000b10:	78bb      	ldrb	r3, [r7, #2]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f974 	bl	8000e00 <LowPowerDemo>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	70fb      	strb	r3, [r7, #3]
    while(ret)
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1f6      	bne.n	8000b10 <PrintUserMenu+0x130>
    }
    break;
 8000b22:	e007      	b.n	8000b34 <PrintUserMenu+0x154>
  case '0' :
    printmsg("Exiting this app\r\n");
 8000b24:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <PrintUserMenu+0x198>)
 8000b26:	f7ff fd7b 	bl	8000620 <printmsg>
    return 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e003      	b.n	8000b36 <PrintUserMenu+0x156>
    break;
  default:
    printmsg("\r\nInvalid option.. try again\r\r");
 8000b2e:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <PrintUserMenu+0x19c>)
 8000b30:	f7ff fd76 	bl	8000620 <printmsg>
  }

  return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08004800 	.word	0x08004800
 8000b44:	08004818 	.word	0x08004818
 8000b48:	08004830 	.word	0x08004830
 8000b4c:	08004844 	.word	0x08004844
 8000b50:	0800485c 	.word	0x0800485c
 8000b54:	08004878 	.word	0x08004878
 8000b58:	0800488c 	.word	0x0800488c
 8000b5c:	20000096 	.word	0x20000096
 8000b60:	20000098 	.word	0x20000098
 8000b64:	20000078 	.word	0x20000078
 8000b68:	080048a4 	.word	0x080048a4
 8000b6c:	080048c0 	.word	0x080048c0
 8000b70:	080048dc 	.word	0x080048dc
 8000b74:	0800490c 	.word	0x0800490c
 8000b78:	08004948 	.word	0x08004948
 8000b7c:	0800495c 	.word	0x0800495c

08000b80 <is_valid_time_set>:


uint8_t is_valid_time_set(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <Calendar_Demo>:

uint8_t Calendar_Demo(uint8_t arg)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b08d      	sub	sp, #52	@ 0x34
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  uint8_t time_format, seconds, minutes, hour, date, month, year, ampm;
  uint8_t user_input[6];
  uint32_t cnt=0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  switch(arg) {
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	3b30      	subs	r3, #48	@ 0x30
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	f200 80f3 	bhi.w	8000d8e <Calendar_Demo+0x1fe>
 8000ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb0 <Calendar_Demo+0x20>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000d8b 	.word	0x08000d8b
 8000bb4:	08000bc1 	.word	0x08000bc1
 8000bb8:	08000ced 	.word	0x08000ced
 8000bbc:	08000d81 	.word	0x08000d81
  case '1':
    printmsg("Which time format do you want ?\r\n");
 8000bc0:	4877      	ldr	r0, [pc, #476]	@ (8000da0 <Calendar_Demo+0x210>)
 8000bc2:	f7ff fd2d 	bl	8000620 <printmsg>
    printmsg("24h-->0\r\n");
 8000bc6:	4877      	ldr	r0, [pc, #476]	@ (8000da4 <Calendar_Demo+0x214>)
 8000bc8:	f7ff fd2a 	bl	8000620 <printmsg>
    printmsg("12h-->1\r\n");
 8000bcc:	4876      	ldr	r0, [pc, #472]	@ (8000da8 <Calendar_Demo+0x218>)
 8000bce:	f7ff fd27 	bl	8000620 <printmsg>
    printmsg("Type your option here :");
 8000bd2:	4876      	ldr	r0, [pc, #472]	@ (8000dac <Calendar_Demo+0x21c>)
 8000bd4:	f7ff fd24 	bl	8000620 <printmsg>

    while(data_user != '\r')
 8000bd8:	e011      	b.n	8000bfe <Calendar_Demo+0x6e>
    {
      HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	2201      	movs	r2, #1
 8000be0:	4973      	ldr	r1, [pc, #460]	@ (8000db0 <Calendar_Demo+0x220>)
 8000be2:	4874      	ldr	r0, [pc, #464]	@ (8000db4 <Calendar_Demo+0x224>)
 8000be4:	f002 fda9 	bl	800373a <HAL_UART_Receive>
      user_input[cnt]=data_user;
 8000be8:	4b71      	ldr	r3, [pc, #452]	@ (8000db0 <Calendar_Demo+0x220>)
 8000bea:	7819      	ldrb	r1, [r3, #0]
 8000bec:	f107 0214 	add.w	r2, r7, #20
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf2:	4413      	add	r3, r2
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	701a      	strb	r2, [r3, #0]
      cnt++;
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    while(data_user != '\r')
 8000bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8000db0 <Calendar_Demo+0x220>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b0d      	cmp	r3, #13
 8000c04:	d1e9      	bne.n	8000bda <Calendar_Demo+0x4a>
    }

    printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000c06:	7d3b      	ldrb	r3, [r7, #20]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	7d7b      	ldrb	r3, [r7, #21]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	486a      	ldr	r0, [pc, #424]	@ (8000db8 <Calendar_Demo+0x228>)
 8000c10:	f7ff fd06 	bl	8000620 <printmsg>
    time_format = (user_input[0]-48);
 8000c14:	7d3b      	ldrb	r3, [r7, #20]
 8000c16:	3b30      	subs	r3, #48	@ 0x30
 8000c18:	77fb      	strb	r3, [r7, #31]
    printmsg("Enter Hour value here(1-12) or (1-24) :");
 8000c1a:	4868      	ldr	r0, [pc, #416]	@ (8000dbc <Calendar_Demo+0x22c>)
 8000c1c:	f7ff fd00 	bl	8000620 <printmsg>

    while(data_user != '\r')
 8000c20:	e011      	b.n	8000c46 <Calendar_Demo+0xb6>
    {
      HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	2201      	movs	r2, #1
 8000c28:	4961      	ldr	r1, [pc, #388]	@ (8000db0 <Calendar_Demo+0x220>)
 8000c2a:	4862      	ldr	r0, [pc, #392]	@ (8000db4 <Calendar_Demo+0x224>)
 8000c2c:	f002 fd85 	bl	800373a <HAL_UART_Receive>
      user_input[cnt]=data_user;
 8000c30:	4b5f      	ldr	r3, [pc, #380]	@ (8000db0 <Calendar_Demo+0x220>)
 8000c32:	7819      	ldrb	r1, [r3, #0]
 8000c34:	f107 0214 	add.w	r2, r7, #20
 8000c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3a:	4413      	add	r3, r2
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	701a      	strb	r2, [r3, #0]
      cnt++;
 8000c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c42:	3301      	adds	r3, #1
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    while(data_user != '\r')
 8000c46:	4b5a      	ldr	r3, [pc, #360]	@ (8000db0 <Calendar_Demo+0x220>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b0d      	cmp	r3, #13
 8000c4c:	d1e9      	bne.n	8000c22 <Calendar_Demo+0x92>
    }

    printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000c4e:	7d3b      	ldrb	r3, [r7, #20]
 8000c50:	4619      	mov	r1, r3
 8000c52:	7d7b      	ldrb	r3, [r7, #21]
 8000c54:	461a      	mov	r2, r3
 8000c56:	485a      	ldr	r0, [pc, #360]	@ (8000dc0 <Calendar_Demo+0x230>)
 8000c58:	f7ff fce2 	bl	8000620 <printmsg>
    hour = user_input[0];
 8000c5c:	7d3b      	ldrb	r3, [r7, #20]
 8000c5e:	77bb      	strb	r3, [r7, #30]
    printmsg("Enter minutes value here( 0 to 59 :");
 8000c60:	4858      	ldr	r0, [pc, #352]	@ (8000dc4 <Calendar_Demo+0x234>)
 8000c62:	f7ff fcdd 	bl	8000620 <printmsg>
    HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000c66:	f107 0114 	add.w	r1, r7, #20
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4850      	ldr	r0, [pc, #320]	@ (8000db4 <Calendar_Demo+0x224>)
 8000c72:	f002 fd62 	bl	800373a <HAL_UART_Receive>
    printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000c76:	7d3b      	ldrb	r3, [r7, #20]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	7d7b      	ldrb	r3, [r7, #21]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4850      	ldr	r0, [pc, #320]	@ (8000dc0 <Calendar_Demo+0x230>)
 8000c80:	f7ff fcce 	bl	8000620 <printmsg>
    minutes = user_input[0];
 8000c84:	7d3b      	ldrb	r3, [r7, #20]
 8000c86:	777b      	strb	r3, [r7, #29]
    printmsg("Enter seconds value here( 0 to 59 :");
 8000c88:	484f      	ldr	r0, [pc, #316]	@ (8000dc8 <Calendar_Demo+0x238>)
 8000c8a:	f7ff fcc9 	bl	8000620 <printmsg>
    HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000c8e:	f107 0114 	add.w	r1, r7, #20
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	2202      	movs	r2, #2
 8000c98:	4846      	ldr	r0, [pc, #280]	@ (8000db4 <Calendar_Demo+0x224>)
 8000c9a:	f002 fd4e 	bl	800373a <HAL_UART_Receive>
    printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000c9e:	7d3b      	ldrb	r3, [r7, #20]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	7d7b      	ldrb	r3, [r7, #21]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4846      	ldr	r0, [pc, #280]	@ (8000dc0 <Calendar_Demo+0x230>)
 8000ca8:	f7ff fcba 	bl	8000620 <printmsg>
    seconds = user_input[0];
 8000cac:	7d3b      	ldrb	r3, [r7, #20]
 8000cae:	773b      	strb	r3, [r7, #28]
    printmsg("is it AM(1)/PM(0)?:");
 8000cb0:	4846      	ldr	r0, [pc, #280]	@ (8000dcc <Calendar_Demo+0x23c>)
 8000cb2:	f7ff fcb5 	bl	8000620 <printmsg>
    HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000cb6:	f107 0114 	add.w	r1, r7, #20
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	483c      	ldr	r0, [pc, #240]	@ (8000db4 <Calendar_Demo+0x224>)
 8000cc2:	f002 fd3a 	bl	800373a <HAL_UART_Receive>
    ampm = user_input[0];
 8000cc6:	7d3b      	ldrb	r3, [r7, #20]
 8000cc8:	76fb      	strb	r3, [r7, #27]
    RTC_Init();
 8000cca:	f7ff fdc3 	bl	8000854 <RTC_Init>
    RTC_configureUserGivenTime(seconds,minutes,hour,ampm,time_format);
 8000cce:	7efc      	ldrb	r4, [r7, #27]
 8000cd0:	7fba      	ldrb	r2, [r7, #30]
 8000cd2:	7f79      	ldrb	r1, [r7, #29]
 8000cd4:	7f38      	ldrb	r0, [r7, #28]
 8000cd6:	7ffb      	ldrb	r3, [r7, #31]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	4623      	mov	r3, r4
 8000cdc:	f000 f956 	bl	8000f8c <RTC_configureUserGivenTime>
    printmsg("\r\nTime set Successful !\r\n");
 8000ce0:	483b      	ldr	r0, [pc, #236]	@ (8000dd0 <Calendar_Demo+0x240>)
 8000ce2:	f7ff fc9d 	bl	8000620 <printmsg>
    RTC_DisplayCurrentTime();
 8000ce6:	f000 f9b7 	bl	8001058 <RTC_DisplayCurrentTime>
    break;
 8000cea:	e053      	b.n	8000d94 <Calendar_Demo+0x204>
  case '2':
    printmsg("Enter Date(1 to 31) value here :");
 8000cec:	4839      	ldr	r0, [pc, #228]	@ (8000dd4 <Calendar_Demo+0x244>)
 8000cee:	f7ff fc97 	bl	8000620 <printmsg>
    HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000cf2:	f107 0114 	add.w	r1, r7, #20
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	482d      	ldr	r0, [pc, #180]	@ (8000db4 <Calendar_Demo+0x224>)
 8000cfe:	f002 fd1c 	bl	800373a <HAL_UART_Receive>
    printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000d02:	7d3b      	ldrb	r3, [r7, #20]
 8000d04:	4619      	mov	r1, r3
 8000d06:	7d7b      	ldrb	r3, [r7, #21]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	482b      	ldr	r0, [pc, #172]	@ (8000db8 <Calendar_Demo+0x228>)
 8000d0c:	f7ff fc88 	bl	8000620 <printmsg>
    date = user_input[0];
 8000d10:	7d3b      	ldrb	r3, [r7, #20]
 8000d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    printmsg("Enter month value here( 1-12) :");
 8000d16:	4830      	ldr	r0, [pc, #192]	@ (8000dd8 <Calendar_Demo+0x248>)
 8000d18:	f7ff fc82 	bl	8000620 <printmsg>
    HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000d1c:	f107 0114 	add.w	r1, r7, #20
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	2202      	movs	r2, #2
 8000d26:	4823      	ldr	r0, [pc, #140]	@ (8000db4 <Calendar_Demo+0x224>)
 8000d28:	f002 fd07 	bl	800373a <HAL_UART_Receive>
    printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000d2c:	7d3b      	ldrb	r3, [r7, #20]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	7d7b      	ldrb	r3, [r7, #21]
 8000d32:	461a      	mov	r2, r3
 8000d34:	4820      	ldr	r0, [pc, #128]	@ (8000db8 <Calendar_Demo+0x228>)
 8000d36:	f7ff fc73 	bl	8000620 <printmsg>
    month = user_input[0];
 8000d3a:	7d3b      	ldrb	r3, [r7, #20]
 8000d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    printmsg("Enter year value here :");
 8000d40:	4826      	ldr	r0, [pc, #152]	@ (8000ddc <Calendar_Demo+0x24c>)
 8000d42:	f7ff fc6d 	bl	8000620 <printmsg>
    uint8_t year[5];
    HAL_UART_Receive(&huart2,year,5,HAL_MAX_DELAY);
 8000d46:	f107 010c 	add.w	r1, r7, #12
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	2205      	movs	r2, #5
 8000d50:	4818      	ldr	r0, [pc, #96]	@ (8000db4 <Calendar_Demo+0x224>)
 8000d52:	f002 fcf2 	bl	800373a <HAL_UART_Receive>
    uint16_t year_16t = getYear(year);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f9e8 	bl	8001130 <getYear>
 8000d60:	4603      	mov	r3, r0
 8000d62:	843b      	strh	r3, [r7, #32]
    RTC_configureUserGivenDate(year_16t,month,date);
 8000d64:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d68:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8000d6c:	8c3b      	ldrh	r3, [r7, #32]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f944 	bl	8000ffc <RTC_configureUserGivenDate>
    printmsg("Date is set !\r\n");
 8000d74:	481a      	ldr	r0, [pc, #104]	@ (8000de0 <Calendar_Demo+0x250>)
 8000d76:	f7ff fc53 	bl	8000620 <printmsg>
    RTC_DisplayCurrentDate();
 8000d7a:	f000 f9a1 	bl	80010c0 <RTC_DisplayCurrentDate>
    break;
 8000d7e:	e009      	b.n	8000d94 <Calendar_Demo+0x204>
  case '3':
    RTC_DisplayCurrentTime();
 8000d80:	f000 f96a 	bl	8001058 <RTC_DisplayCurrentTime>
    RTC_DisplayCurrentDate();
 8000d84:	f000 f99c 	bl	80010c0 <RTC_DisplayCurrentDate>
    break;
 8000d88:	e004      	b.n	8000d94 <Calendar_Demo+0x204>
  case '0':
    return 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e003      	b.n	8000d96 <Calendar_Demo+0x206>

  default :
    printmsg("Enter valid option\r\n");
 8000d8e:	4815      	ldr	r0, [pc, #84]	@ (8000de4 <Calendar_Demo+0x254>)
 8000d90:	f7ff fc46 	bl	8000620 <printmsg>

  }
  return 1;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	372c      	adds	r7, #44	@ 0x2c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	0800497c 	.word	0x0800497c
 8000da4:	080049a0 	.word	0x080049a0
 8000da8:	080049ac 	.word	0x080049ac
 8000dac:	0800488c 	.word	0x0800488c
 8000db0:	20000096 	.word	0x20000096
 8000db4:	20000098 	.word	0x20000098
 8000db8:	080048a4 	.word	0x080048a4
 8000dbc:	080049b8 	.word	0x080049b8
 8000dc0:	080049e0 	.word	0x080049e0
 8000dc4:	080049fc 	.word	0x080049fc
 8000dc8:	08004a20 	.word	0x08004a20
 8000dcc:	08004a44 	.word	0x08004a44
 8000dd0:	08004a58 	.word	0x08004a58
 8000dd4:	08004a74 	.word	0x08004a74
 8000dd8:	08004a98 	.word	0x08004a98
 8000ddc:	08004ab8 	.word	0x08004ab8
 8000de0:	08004ad0 	.word	0x08004ad0
 8000de4:	08004ae0 	.word	0x08004ae0

08000de8 <Alarm_Demo>:

uint8_t Alarm_Demo(uint8_t arg)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]

  return 0;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LowPowerDemo>:

uint8_t LowPowerDemo(uint8_t arg)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]

  return 0;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <TimeStamp_Demo>:

uint8_t  TimeStamp_Demo(uint8_t arg)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]

  return 0;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <CalendarDemoMenuPrint>:

uint8_t CalendarDemoMenuPrint(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  uint32_t cnt=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  printmsg("This is calendar Demo\r\n");
 8000e3a:	481a      	ldr	r0, [pc, #104]	@ (8000ea4 <CalendarDemoMenuPrint+0x74>)
 8000e3c:	f7ff fbf0 	bl	8000620 <printmsg>
  printmsg("Set time-->1\r\n");
 8000e40:	4819      	ldr	r0, [pc, #100]	@ (8000ea8 <CalendarDemoMenuPrint+0x78>)
 8000e42:	f7ff fbed 	bl	8000620 <printmsg>
  printmsg("Set date-->2\r\n");
 8000e46:	4819      	ldr	r0, [pc, #100]	@ (8000eac <CalendarDemoMenuPrint+0x7c>)
 8000e48:	f7ff fbea 	bl	8000620 <printmsg>
  printmsg("Display current time and date-->3\r\n");
 8000e4c:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <CalendarDemoMenuPrint+0x80>)
 8000e4e:	f7ff fbe7 	bl	8000620 <printmsg>
  printmsg("Go back to main menu -->0\r\n");
 8000e52:	4818      	ldr	r0, [pc, #96]	@ (8000eb4 <CalendarDemoMenuPrint+0x84>)
 8000e54:	f7ff fbe4 	bl	8000620 <printmsg>
  printmsg("Type your option here :");
 8000e58:	4817      	ldr	r0, [pc, #92]	@ (8000eb8 <CalendarDemoMenuPrint+0x88>)
 8000e5a:	f7ff fbe1 	bl	8000620 <printmsg>
  uint8_t user_input[2];
  while(data_user != '\r')
 8000e5e:	e010      	b.n	8000e82 <CalendarDemoMenuPrint+0x52>
  {
    HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	2201      	movs	r2, #1
 8000e66:	4915      	ldr	r1, [pc, #84]	@ (8000ebc <CalendarDemoMenuPrint+0x8c>)
 8000e68:	4815      	ldr	r0, [pc, #84]	@ (8000ec0 <CalendarDemoMenuPrint+0x90>)
 8000e6a:	f002 fc66 	bl	800373a <HAL_UART_Receive>
    user_input[cnt]=data_user;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <CalendarDemoMenuPrint+0x8c>)
 8000e70:	7819      	ldrb	r1, [r3, #0]
 8000e72:	463a      	mov	r2, r7
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	460a      	mov	r2, r1
 8000e7a:	701a      	strb	r2, [r3, #0]
    cnt++;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
  while(data_user != '\r')
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <CalendarDemoMenuPrint+0x8c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b0d      	cmp	r3, #13
 8000e88:	d1ea      	bne.n	8000e60 <CalendarDemoMenuPrint+0x30>
  }

  printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000e8a:	783b      	ldrb	r3, [r7, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	787b      	ldrb	r3, [r7, #1]
 8000e90:	461a      	mov	r2, r3
 8000e92:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <CalendarDemoMenuPrint+0x94>)
 8000e94:	f7ff fbc4 	bl	8000620 <printmsg>

  return user_input[0];
 8000e98:	783b      	ldrb	r3, [r7, #0]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08004af8 	.word	0x08004af8
 8000ea8:	08004b10 	.word	0x08004b10
 8000eac:	08004b20 	.word	0x08004b20
 8000eb0:	08004b30 	.word	0x08004b30
 8000eb4:	08004b54 	.word	0x08004b54
 8000eb8:	0800488c 	.word	0x0800488c
 8000ebc:	20000096 	.word	0x20000096
 8000ec0:	20000098 	.word	0x20000098
 8000ec4:	080048a4 	.word	0x080048a4

08000ec8 <LowPowerDemoMenuPrint>:

uint8_t LowPowerDemoMenuPrint(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  printmsg("This is LOW power demo\r\n");
 8000ece:	480f      	ldr	r0, [pc, #60]	@ (8000f0c <LowPowerDemoMenuPrint+0x44>)
 8000ed0:	f7ff fba6 	bl	8000620 <printmsg>
  printmsg("STOP mode demo+ RTC alarm\r\n");
 8000ed4:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <LowPowerDemoMenuPrint+0x48>)
 8000ed6:	f7ff fba3 	bl	8000620 <printmsg>
  printmsg("STANDBY mode demo + RTC wakeup timer\r\n");
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <LowPowerDemoMenuPrint+0x4c>)
 8000edc:	f7ff fba0 	bl	8000620 <printmsg>
  printmsg("Type your option here :");
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <LowPowerDemoMenuPrint+0x50>)
 8000ee2:	f7ff fb9d 	bl	8000620 <printmsg>
  uint8_t user_input[2];
  HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000ee6:	1d39      	adds	r1, r7, #4
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	2202      	movs	r2, #2
 8000eee:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <LowPowerDemoMenuPrint+0x54>)
 8000ef0:	f002 fc23 	bl	800373a <HAL_UART_Receive>
  printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000ef4:	793b      	ldrb	r3, [r7, #4]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	797b      	ldrb	r3, [r7, #5]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <LowPowerDemoMenuPrint+0x58>)
 8000efe:	f7ff fb8f 	bl	8000620 <printmsg>

  return user_input[0];
 8000f02:	793b      	ldrb	r3, [r7, #4]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	08004b70 	.word	0x08004b70
 8000f10:	08004b8c 	.word	0x08004b8c
 8000f14:	08004ba8 	.word	0x08004ba8
 8000f18:	0800488c 	.word	0x0800488c
 8000f1c:	20000098 	.word	0x20000098
 8000f20:	080049e0 	.word	0x080049e0

08000f24 <Alarm_DemoPrint>:

uint8_t Alarm_DemoPrint(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  printmsg("This is alarm Demo\r\n");
 8000f2a:	4811      	ldr	r0, [pc, #68]	@ (8000f70 <Alarm_DemoPrint+0x4c>)
 8000f2c:	f7ff fb78 	bl	8000620 <printmsg>
  printmsg("Display already set alarm\r\n");
 8000f30:	4810      	ldr	r0, [pc, #64]	@ (8000f74 <Alarm_DemoPrint+0x50>)
 8000f32:	f7ff fb75 	bl	8000620 <printmsg>
  printmsg("Delete an alarm\r\n");
 8000f36:	4810      	ldr	r0, [pc, #64]	@ (8000f78 <Alarm_DemoPrint+0x54>)
 8000f38:	f7ff fb72 	bl	8000620 <printmsg>
  printmsg("Set new Alarm\r\r");
 8000f3c:	480f      	ldr	r0, [pc, #60]	@ (8000f7c <Alarm_DemoPrint+0x58>)
 8000f3e:	f7ff fb6f 	bl	8000620 <printmsg>
  printmsg("Type your option here :");
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <Alarm_DemoPrint+0x5c>)
 8000f44:	f7ff fb6c 	bl	8000620 <printmsg>
  uint8_t user_input[2];
  HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000f48:	1d39      	adds	r1, r7, #4
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	2202      	movs	r2, #2
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <Alarm_DemoPrint+0x60>)
 8000f52:	f002 fbf2 	bl	800373a <HAL_UART_Receive>
  printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000f56:	793b      	ldrb	r3, [r7, #4]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <Alarm_DemoPrint+0x64>)
 8000f60:	f7ff fb5e 	bl	8000620 <printmsg>

  return user_input[0];
 8000f64:	793b      	ldrb	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08004bd0 	.word	0x08004bd0
 8000f74:	08004be8 	.word	0x08004be8
 8000f78:	08004c04 	.word	0x08004c04
 8000f7c:	08004c18 	.word	0x08004c18
 8000f80:	0800488c 	.word	0x0800488c
 8000f84:	20000098 	.word	0x20000098
 8000f88:	080049e0 	.word	0x080049e0

08000f8c <RTC_configureUserGivenTime>:

void RTC_configureUserGivenTime(uint8_t seconds,uint8_t minutes,uint8_t hour,uint8_t AMPM, uint8_t format)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b089      	sub	sp, #36	@ 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4604      	mov	r4, r0
 8000f94:	4608      	mov	r0, r1
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	717b      	strb	r3, [r7, #5]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef  sdatestructure;
  RTC_TimeTypeDef  stimestructure;

  /*##-2- Configure the Time #################################################*/
  /* Set Time: 02:20:00 */
  stimestructure.Hours = hour;
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	723b      	strb	r3, [r7, #8]
  stimestructure.Minutes = minutes;
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	727b      	strb	r3, [r7, #9]
  stimestructure.Seconds = seconds;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	72bb      	strb	r3, [r7, #10]
  if(format)
 8000fb6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <RTC_configureUserGivenTime+0x42>
  {
    if(AMPM)
 8000fbe:	793b      	ldrb	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <RTC_configureUserGivenTime+0x3e>
    {
      stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	72fb      	strb	r3, [r7, #11]
 8000fc8:	e001      	b.n	8000fce <RTC_configureUserGivenTime+0x42>
    }
    else
    {
      stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 8000fca:	2340      	movs	r3, #64	@ 0x40
 8000fcc:	72fb      	strb	r3, [r7, #11]
    }
  }
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]

  if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BCD) != HAL_OK)
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <RTC_configureUserGivenTime+0x6c>)
 8000fe0:	f001 fee7 	bl	8002db2 <HAL_RTC_SetTime>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <RTC_configureUserGivenTime+0x62>
  {
    /* Initialization Error */
    Error_handler();
 8000fea:	f000 f8d7 	bl	800119c <Error_handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd90      	pop	{r4, r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000124 	.word	0x20000124

08000ffc <RTC_configureUserGivenDate>:

void RTC_configureUserGivenDate(uint16_t year,uint8_t month,uint8_t date)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	460b      	mov	r3, r1
 8001008:	717b      	strb	r3, [r7, #5]
 800100a:	4613      	mov	r3, r2
 800100c:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  year = year % 100;
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <RTC_configureUserGivenDate+0x54>)
 8001012:	fba2 1203 	umull	r1, r2, r2, r3
 8001016:	0952      	lsrs	r2, r2, #5
 8001018:	2164      	movs	r1, #100	@ 0x64
 800101a:	fb01 f202 	mul.w	r2, r1, r2
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	80fb      	strh	r3, [r7, #6]

  /*##-1- Configure the Date #################################################*/
  /* Set Date: Tuesday February 18th 2014 */
  sdatestructure.Year = year;
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month = month;
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date = date;
 800102c:	793b      	ldrb	r3, [r7, #4]
 800102e:	73bb      	strb	r3, [r7, #14]
  //sdatestructure.WeekDay = RTC_WEEKDAY_THURSDAY;

  if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BCD) != HAL_OK)
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <RTC_configureUserGivenDate+0x58>)
 800103a:	f001 ffd5 	bl	8002fe8 <HAL_RTC_SetDate>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <RTC_configureUserGivenDate+0x4c>
  {
    /* Initialization Error */
    Error_handler();
 8001044:	f000 f8aa 	bl	800119c <Error_handler>
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	51eb851f 	.word	0x51eb851f
 8001054:	20000124 	.word	0x20000124

08001058 <RTC_DisplayCurrentTime>:

void RTC_DisplayCurrentTime(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	@ 0x50
 800105c:	af02      	add	r7, sp, #8
  char showtime[50];

  RTC_TimeTypeDef stimestructureget;

  memset(&stimestructureget,0,sizeof(stimestructureget));
 800105e:	463b      	mov	r3, r7
 8001060:	2214      	movs	r2, #20
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f002 ff2f 	bl	8003ec8 <memset>

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	4810      	ldr	r0, [pc, #64]	@ (80010b4 <RTC_DisplayCurrentTime+0x5c>)
 8001072:	f001 ff5b 	bl	8002f2c <HAL_RTC_GetTime>

  /* Display time Format : hh:mm:ss */
  sprintf((char*)showtime,"Current Time is : %02d:%02d:%02d\r\n",stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8001076:	783b      	ldrb	r3, [r7, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	787b      	ldrb	r3, [r7, #1]
 800107c:	4619      	mov	r1, r3
 800107e:	78bb      	ldrb	r3, [r7, #2]
 8001080:	f107 0014 	add.w	r0, r7, #20
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	460b      	mov	r3, r1
 8001088:	490b      	ldr	r1, [pc, #44]	@ (80010b8 <RTC_DisplayCurrentTime+0x60>)
 800108a:	f002 fedb 	bl	8003e44 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)showtime,strlen(showtime),HAL_MAX_DELAY);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f8bc 	bl	8000210 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	f107 0114 	add.w	r1, r7, #20
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <RTC_DisplayCurrentTime+0x64>)
 80010a6:	f002 fab6 	bl	8003616 <HAL_UART_Transmit>
}
 80010aa:	bf00      	nop
 80010ac:	3748      	adds	r7, #72	@ 0x48
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000124 	.word	0x20000124
 80010b8:	08004c28 	.word	0x08004c28
 80010bc:	20000098 	.word	0x20000098

080010c0 <RTC_DisplayCurrentDate>:

void RTC_DisplayCurrentDate(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b090      	sub	sp, #64	@ 0x40
 80010c4:	af02      	add	r7, sp, #8
  char showtime[50];

  RTC_DateTypeDef sdatestructureget;

  memset(&sdatestructureget,0,sizeof(sdatestructureget));
 80010c6:	463b      	mov	r3, r7
 80010c8:	2204      	movs	r2, #4
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fefb 	bl	8003ec8 <memset>

  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4812      	ldr	r0, [pc, #72]	@ (8001124 <RTC_DisplayCurrentDate+0x64>)
 80010da:	f002 f82c 	bl	8003136 <HAL_RTC_GetDate>

  memset(showtime,0,sizeof(showtime));
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2232      	movs	r2, #50	@ 0x32
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 feef 	bl	8003ec8 <memset>
  sprintf((char*)showtime,"Current Date is : %02d-%2d-%2d\r\n",sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 80010ea:	787b      	ldrb	r3, [r7, #1]
 80010ec:	461a      	mov	r2, r3
 80010ee:	78bb      	ldrb	r3, [r7, #2]
 80010f0:	4619      	mov	r1, r3
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80010f8:	1d38      	adds	r0, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	460b      	mov	r3, r1
 80010fe:	490a      	ldr	r1, [pc, #40]	@ (8001128 <RTC_DisplayCurrentDate+0x68>)
 8001100:	f002 fea0 	bl	8003e44 <siprintf>

  HAL_UART_Transmit(&huart2,(uint8_t*)showtime,strlen(showtime),HAL_MAX_DELAY);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f882 	bl	8000210 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <RTC_DisplayCurrentDate+0x6c>)
 8001118:	f002 fa7d 	bl	8003616 <HAL_UART_Transmit>
}
 800111c:	bf00      	nop
 800111e:	3738      	adds	r7, #56	@ 0x38
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000124 	.word	0x20000124
 8001128:	08004c4c 	.word	0x08004c4c
 800112c:	20000098 	.word	0x20000098

08001130 <getYear>:


uint16_t getYear(uint8_t *year)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t i =0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  uint8_t value=0;
 800113c:	2300      	movs	r3, #0
 800113e:	727b      	strb	r3, [r7, #9]
  uint16_t sum=0;
 8001140:	2300      	movs	r3, #0
 8001142:	817b      	strh	r3, [r7, #10]
  for( i = 0 ; i < 4 ; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	e01e      	b.n	8001188 <getYear+0x58>
  {
    value =  year[i] - 48;
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	3b30      	subs	r3, #48	@ 0x30
 8001154:	727b      	strb	r3, [r7, #9]
    if(value  >= 0 && value <=9 )
 8001156:	7a7b      	ldrb	r3, [r7, #9]
 8001158:	2b09      	cmp	r3, #9
 800115a:	d810      	bhi.n	800117e <getYear+0x4e>
    {
         sum  = sum + value * (1000 /(10 ^i));
 800115c:	7a7b      	ldrb	r3, [r7, #9]
 800115e:	b29a      	uxth	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f083 030a 	eor.w	r3, r3, #10
 8001166:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800116a:	fbb1 f3f3 	udiv	r3, r1, r3
 800116e:	b29b      	uxth	r3, r3
 8001170:	fb12 f303 	smulbb	r3, r2, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	897b      	ldrh	r3, [r7, #10]
 8001178:	4413      	add	r3, r2
 800117a:	817b      	strh	r3, [r7, #10]
 800117c:	e001      	b.n	8001182 <getYear+0x52>
    }
    else
    {
     return 0;
 800117e:	2300      	movs	r3, #0
 8001180:	e006      	b.n	8001190 <getYear+0x60>
  for( i = 0 ; i < 4 ; i++)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d9dd      	bls.n	800114a <getYear+0x1a>
    }
  }

  return sum;
 800118e:	897b      	ldrh	r3, [r7, #10]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  while(1);
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <Error_handler+0x4>

080011a4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 fa47 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_MspInit+0x40>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b2:	4a0c      	ldr	r2, [pc, #48]	@ (80011e4 <HAL_MspInit+0x40>)
 80011b4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80011b8:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	f06f 000b 	mvn.w	r0, #11
 80011c2:	f000 fa46 	bl	8001652 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	f06f 000a 	mvn.w	r0, #10
 80011ce:	f000 fa40 	bl	8001652 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	f06f 0009 	mvn.w	r0, #9
 80011da:	f000 fa3a 	bl	8001652 <HAL_NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <HAL_UART_MspInit+0x88>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_UART_MspInit+0x88>)
 80011fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <HAL_UART_MspInit+0x88>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <HAL_UART_MspInit+0x88>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001214:	4a16      	ldr	r2, [pc, #88]	@ (8001270 <HAL_UART_MspInit+0x88>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6313      	str	r3, [r2, #48]	@ 0x30
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_UART_MspInit+0x88>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 8001228:	2304      	movs	r3, #4
 800122a:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 8001230:	2301      	movs	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8001238:	2307      	movs	r3, #7
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	480c      	ldr	r0, [pc, #48]	@ (8001274 <HAL_UART_MspInit+0x8c>)
 8001244:	f000 fa66 	bl	8001714 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8001248:	2308      	movs	r3, #8
 800124a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4808      	ldr	r0, [pc, #32]	@ (8001274 <HAL_UART_MspInit+0x8c>)
 8001254:	f000 fa5e 	bl	8001714 <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001258:	2026      	movs	r0, #38	@ 0x26
 800125a:	f000 fa16 	bl	800168a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800125e:	2200      	movs	r2, #0
 8001260:	210f      	movs	r1, #15
 8001262:	2026      	movs	r0, #38	@ 0x26
 8001264:	f000 f9f5 	bl	8001652 <HAL_NVIC_SetPriority>
}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0a6      	sub	sp, #152	@ 0x98
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  #elif defined (RTC_CLOCK_SOURCE_LSI)
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8001280:	230c      	movs	r3, #12
 8001282:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001284:	2300      	movs	r3, #0
 8001286:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001288:	2301      	movs	r3, #1
 800128a:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800128c:	2300      	movs	r3, #0
 800128e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fa5d 	bl	8002754 <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_RTC_MspInit+0x2c>
  {
    Error_handler();
 80012a0:	f7ff ff7c 	bl	800119c <Error_handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012a4:	2320      	movs	r3, #32
 80012a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fcf4 	bl	8001ca0 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_RTC_MspInit+0x4a>
  {
    Error_handler();
 80012be:	f7ff ff6d 	bl	800119c <Error_handler>
  #error Please select the RTC Clock source inside the main.h file
  #endif /*RTC_CLOCK_SOURCE_LSE*/

  /*##-2- Enable RTC peripheral Clocks #######################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 80012c2:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_RTC_MspInit+0x58>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	3798      	adds	r7, #152	@ 0x98
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	42470e3c 	.word	0x42470e3c

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f002 fde8 	bl	8003ed8 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20020000 	.word	0x20020000
 8001334:	00000400 	.word	0x00000400
 8001338:	20000144 	.word	0x20000144
 800133c:	20000298 	.word	0x20000298

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800139c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	@ (80013a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	@ (80013b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800138e:	f7ff ffd7 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f002 fda7 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff f969 	bl	800066c <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013a8:	08004ccc 	.word	0x08004ccc
  ldr r2, =_sbss
 80013ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013b0:	20000294 	.word	0x20000294

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f92b 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff feda 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f943 	bl	80016a6 <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f90b 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	20000148 	.word	0x20000148

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000148 	.word	0x20000148

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	@ (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	@ (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff29 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff3e 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff8e 	bl	8001590 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5d 	bl	800153c <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff31 	bl	8001500 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa2 	bl	80015f8 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d106      	bne.n	80016dc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80016da:	e005      	b.n	80016e8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80016fc:	f000 f802 	bl	8001704 <HAL_SYSTICK_Callback>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e165      	b.n	80019fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 8154 	bne.w	80019f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d005      	beq.n	8001766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	2b02      	cmp	r3, #2
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80ae 	beq.w	80019f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a14 <HAL_GPIO_Init+0x300>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a14 <HAL_GPIO_Init+0x300>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001a14 <HAL_GPIO_Init+0x300>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b6:	4a58      	ldr	r2, [pc, #352]	@ (8001a18 <HAL_GPIO_Init+0x304>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4f      	ldr	r2, [pc, #316]	@ (8001a1c <HAL_GPIO_Init+0x308>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d025      	beq.n	800192e <HAL_GPIO_Init+0x21a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a20 <HAL_GPIO_Init+0x30c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <HAL_GPIO_Init+0x216>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001a24 <HAL_GPIO_Init+0x310>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x212>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001a28 <HAL_GPIO_Init+0x314>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x20e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4b      	ldr	r2, [pc, #300]	@ (8001a2c <HAL_GPIO_Init+0x318>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x20a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4a      	ldr	r2, [pc, #296]	@ (8001a30 <HAL_GPIO_Init+0x31c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x206>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a49      	ldr	r2, [pc, #292]	@ (8001a34 <HAL_GPIO_Init+0x320>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x202>
 8001912:	2306      	movs	r3, #6
 8001914:	e00c      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001916:	2307      	movs	r3, #7
 8001918:	e00a      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800191a:	2305      	movs	r3, #5
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800191e:	2304      	movs	r3, #4
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	@ (8001a18 <HAL_GPIO_Init+0x304>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001972:	4a31      	ldr	r2, [pc, #196]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001978:	4b2f      	ldr	r3, [pc, #188]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199c:	4a26      	ldr	r2, [pc, #152]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f ae96 	bls.w	8001730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40021400 	.word	0x40021400
 8001a34:	40021800 	.word	0x40021800
 8001a38:	40013c00 	.word	0x40013c00

08001a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe ff52 	bl	8000904 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40013c00 	.word	0x40013c00

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0cc      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b68      	ldr	r3, [pc, #416]	@ (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d90c      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b65      	ldr	r3, [pc, #404]	@ (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	@ (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a52      	ldr	r2, [pc, #328]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d044      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d119      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e067      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b37      	ldr	r3, [pc, #220]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4934      	ldr	r1, [pc, #208]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff fc92 	bl	8001484 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff fc8e 	bl	8001484 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e04f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d20c      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 fb7f 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	@ (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fbf2 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	08004c70 	.word	0x08004c70
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000000 	.word	0x20000000

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c54:	f7ff fff0 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4903      	ldr	r1, [pc, #12]	@ (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	08004c80 	.word	0x08004c80

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	f7ff ffdc 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0b5b      	lsrs	r3, r3, #13
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	@ (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08004c80 	.word	0x08004c80

08001ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	@ 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d010      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cde:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce6:	496c      	ldr	r1, [pc, #432]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d06:	4b64      	ldr	r3, [pc, #400]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d0c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d14:	4960      	ldr	r1, [pc, #384]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001d24:	2301      	movs	r3, #1
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d017      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d34:	4b58      	ldr	r3, [pc, #352]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4955      	ldr	r1, [pc, #340]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d52:	d101      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d017      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d70:	4b49      	ldr	r3, [pc, #292]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7e:	4946      	ldr	r1, [pc, #280]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001d90:	2301      	movs	r3, #1
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 808a 	beq.w	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a38      	ldr	r2, [pc, #224]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001dca:	4b34      	ldr	r3, [pc, #208]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a33      	ldr	r2, [pc, #204]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dd6:	f7ff fb55 	bl	8001484 <HAL_GetTick>
 8001dda:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7ff fb51 	bl	8001484 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e278      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001df0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dfc:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e04:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d02f      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e14:	6a3a      	ldr	r2, [r7, #32]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d028      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e22:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e30:	4a19      	ldr	r2, [pc, #100]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d114      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fb1f 	bl	8001484 <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7ff fb1b 	bl	8001484 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e240      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ee      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e78:	d114      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e8e:	4902      	ldr	r1, [pc, #8]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
 8001e94:	e00c      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42470e40 	.word	0x42470e40
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a49      	ldr	r2, [pc, #292]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eaa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001eae:	6093      	str	r3, [r2, #8]
 8001eb0:	4b47      	ldr	r3, [pc, #284]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	4944      	ldr	r1, [pc, #272]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001ed6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef2:	4937      	ldr	r1, [pc, #220]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f06:	4b32      	ldr	r3, [pc, #200]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f14:	492e      	ldr	r1, [pc, #184]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d011      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f28:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f2e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f36:	4926      	ldr	r1, [pc, #152]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f46:	d101      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	491a      	ldr	r1, [pc, #104]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d011      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f80:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f88:	4911      	ldr	r1, [pc, #68]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f98:	d101      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fac:	f040 80ff 	bne.w	80021ae <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fb6:	f7ff fa65 	bl	8001484 <HAL_GetTick>
 8001fba:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fbc:	e00e      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fbe:	f7ff fa61 	bl	8001484 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d907      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e188      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	424711e0 	.word	0x424711e0
 8001fd8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ea      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002004:	2b00      	cmp	r3, #0
 8002006:	d028      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d124      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002010:	4b71      	ldr	r3, [pc, #452]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	3301      	adds	r3, #1
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002022:	4b6d      	ldr	r3, [pc, #436]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002028:	0e1b      	lsrs	r3, r3, #24
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	019b      	lsls	r3, r3, #6
 800203a:	431a      	orrs	r2, r3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	3b01      	subs	r3, #1
 8002042:	041b      	lsls	r3, r3, #16
 8002044:	431a      	orrs	r2, r3
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	071b      	lsls	r3, r3, #28
 8002052:	4961      	ldr	r1, [pc, #388]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002078:	2b00      	cmp	r3, #0
 800207a:	d035      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002084:	d130      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002086:	4b54      	ldr	r3, [pc, #336]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	3301      	adds	r3, #1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002098:	4b4f      	ldr	r3, [pc, #316]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800209a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800209e:	0f1b      	lsrs	r3, r3, #28
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	019b      	lsls	r3, r3, #6
 80020b0:	431a      	orrs	r2, r3
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	085b      	lsrs	r3, r3, #1
 80020b6:	3b01      	subs	r3, #1
 80020b8:	041b      	lsls	r3, r3, #16
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	431a      	orrs	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	071b      	lsls	r3, r3, #28
 80020c8:	4943      	ldr	r1, [pc, #268]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020d0:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d6:	f023 021f 	bic.w	r2, r3, #31
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	493d      	ldr	r1, [pc, #244]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d029      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020fc:	d124      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020fe:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	3301      	adds	r3, #1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002110:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002116:	0f1b      	lsrs	r3, r3, #28
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	019b      	lsls	r3, r3, #6
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	3b01      	subs	r3, #1
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	431a      	orrs	r2, r3
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	431a      	orrs	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	4925      	ldr	r1, [pc, #148]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002150:	2b00      	cmp	r3, #0
 8002152:	d016      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	019b      	lsls	r3, r3, #6
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	3b01      	subs	r3, #1
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	071b      	lsls	r3, r3, #28
 800217a:	4917      	ldr	r1, [pc, #92]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002182:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002188:	f7ff f97c 	bl	8001484 <HAL_GetTick>
 800218c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002190:	f7ff f978 	bl	8001484 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e09f      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80021ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	f040 8095 	bne.w	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021bc:	f7ff f962 	bl	8001484 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80021c4:	f7ff f95e 	bl	8001484 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d908      	bls.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e085      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	42470068 	.word	0x42470068
 80021e0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021e4:	4b41      	ldr	r3, [pc, #260]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021f0:	d0e8      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d02b      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002216:	2b00      	cmp	r3, #0
 8002218:	d127      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800221a:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	3301      	adds	r3, #1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	431a      	orrs	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	3b01      	subs	r3, #1
 800223e:	041b      	lsls	r3, r3, #16
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	061b      	lsls	r3, r3, #24
 8002248:	4928      	ldr	r1, [pc, #160]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002250:	4b26      	ldr	r3, [pc, #152]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002256:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	3b01      	subs	r3, #1
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	4922      	ldr	r1, [pc, #136]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01d      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800227e:	d118      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002280:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002286:	0e1b      	lsrs	r3, r3, #24
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	019b      	lsls	r3, r3, #6
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	4910      	ldr	r1, [pc, #64]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022b2:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022b8:	f7ff f8e4 	bl	8001484 <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80022c0:	f7ff f8e0 	bl	8001484 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e007      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022de:	d1ef      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3730      	adds	r7, #48	@ 0x30
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470070 	.word	0x42470070

080022f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f8:	b0ae      	sub	sp, #184	@ 0xb8
 80022fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231a:	4bcb      	ldr	r3, [pc, #812]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b0c      	cmp	r3, #12
 8002324:	f200 8206 	bhi.w	8002734 <HAL_RCC_GetSysClockFreq+0x440>
 8002328:	a201      	add	r2, pc, #4	@ (adr r2, 8002330 <HAL_RCC_GetSysClockFreq+0x3c>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002365 	.word	0x08002365
 8002334:	08002735 	.word	0x08002735
 8002338:	08002735 	.word	0x08002735
 800233c:	08002735 	.word	0x08002735
 8002340:	0800236d 	.word	0x0800236d
 8002344:	08002735 	.word	0x08002735
 8002348:	08002735 	.word	0x08002735
 800234c:	08002735 	.word	0x08002735
 8002350:	08002375 	.word	0x08002375
 8002354:	08002735 	.word	0x08002735
 8002358:	08002735 	.word	0x08002735
 800235c:	08002735 	.word	0x08002735
 8002360:	08002565 	.word	0x08002565
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4bb9      	ldr	r3, [pc, #740]	@ (800264c <HAL_RCC_GetSysClockFreq+0x358>)
 8002366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800236a:	e1e7      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800236c:	4bb8      	ldr	r3, [pc, #736]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x35c>)
 800236e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002372:	e1e3      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002374:	4bb4      	ldr	r3, [pc, #720]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800237c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002380:	4bb1      	ldr	r3, [pc, #708]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d071      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238c:	4bae      	ldr	r3, [pc, #696]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002398:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800239c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023b2:	4622      	mov	r2, r4
 80023b4:	462b      	mov	r3, r5
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	0159      	lsls	r1, r3, #5
 80023c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c4:	0150      	lsls	r0, r2, #5
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4621      	mov	r1, r4
 80023cc:	1a51      	subs	r1, r2, r1
 80023ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80023d0:	4629      	mov	r1, r5
 80023d2:	eb63 0301 	sbc.w	r3, r3, r1
 80023d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80023e4:	4649      	mov	r1, r9
 80023e6:	018b      	lsls	r3, r1, #6
 80023e8:	4641      	mov	r1, r8
 80023ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ee:	4641      	mov	r1, r8
 80023f0:	018a      	lsls	r2, r1, #6
 80023f2:	4641      	mov	r1, r8
 80023f4:	1a51      	subs	r1, r2, r1
 80023f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023f8:	4649      	mov	r1, r9
 80023fa:	eb63 0301 	sbc.w	r3, r3, r1
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800240c:	4649      	mov	r1, r9
 800240e:	00cb      	lsls	r3, r1, #3
 8002410:	4641      	mov	r1, r8
 8002412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002416:	4641      	mov	r1, r8
 8002418:	00ca      	lsls	r2, r1, #3
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	4603      	mov	r3, r0
 8002420:	4622      	mov	r2, r4
 8002422:	189b      	adds	r3, r3, r2
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30
 8002426:	462b      	mov	r3, r5
 8002428:	460a      	mov	r2, r1
 800242a:	eb42 0303 	adc.w	r3, r2, r3
 800242e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800243c:	4629      	mov	r1, r5
 800243e:	024b      	lsls	r3, r1, #9
 8002440:	4621      	mov	r1, r4
 8002442:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002446:	4621      	mov	r1, r4
 8002448:	024a      	lsls	r2, r1, #9
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002458:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800245c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002460:	f7fd ff2e 	bl	80002c0 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4613      	mov	r3, r2
 800246a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800246e:	e067      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002470:	4b75      	ldr	r3, [pc, #468]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	2200      	movs	r2, #0
 8002478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800247c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002480:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002488:	67bb      	str	r3, [r7, #120]	@ 0x78
 800248a:	2300      	movs	r3, #0
 800248c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800248e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002492:	4622      	mov	r2, r4
 8002494:	462b      	mov	r3, r5
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	0159      	lsls	r1, r3, #5
 80024a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a4:	0150      	lsls	r0, r2, #5
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4621      	mov	r1, r4
 80024ac:	1a51      	subs	r1, r2, r1
 80024ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80024b0:	4629      	mov	r1, r5
 80024b2:	eb63 0301 	sbc.w	r3, r3, r1
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80024c4:	4649      	mov	r1, r9
 80024c6:	018b      	lsls	r3, r1, #6
 80024c8:	4641      	mov	r1, r8
 80024ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ce:	4641      	mov	r1, r8
 80024d0:	018a      	lsls	r2, r1, #6
 80024d2:	4641      	mov	r1, r8
 80024d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80024d8:	4649      	mov	r1, r9
 80024da:	eb63 0b01 	sbc.w	fp, r3, r1
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024f2:	4692      	mov	sl, r2
 80024f4:	469b      	mov	fp, r3
 80024f6:	4623      	mov	r3, r4
 80024f8:	eb1a 0303 	adds.w	r3, sl, r3
 80024fc:	623b      	str	r3, [r7, #32]
 80024fe:	462b      	mov	r3, r5
 8002500:	eb4b 0303 	adc.w	r3, fp, r3
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002512:	4629      	mov	r1, r5
 8002514:	028b      	lsls	r3, r1, #10
 8002516:	4621      	mov	r1, r4
 8002518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800251c:	4621      	mov	r1, r4
 800251e:	028a      	lsls	r2, r1, #10
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002528:	2200      	movs	r2, #0
 800252a:	673b      	str	r3, [r7, #112]	@ 0x70
 800252c:	677a      	str	r2, [r7, #116]	@ 0x74
 800252e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002532:	f7fd fec5 	bl	80002c0 <__aeabi_uldivmod>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4613      	mov	r3, r2
 800253c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002540:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	3301      	adds	r3, #1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002562:	e0eb      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002564:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800256c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002570:	4b35      	ldr	r3, [pc, #212]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d06b      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257c:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x354>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	2200      	movs	r2, #0
 8002584:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800258a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002590:	2300      	movs	r3, #0
 8002592:	667b      	str	r3, [r7, #100]	@ 0x64
 8002594:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002598:	4622      	mov	r2, r4
 800259a:	462b      	mov	r3, r5
 800259c:	f04f 0000 	mov.w	r0, #0
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	0159      	lsls	r1, r3, #5
 80025a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025aa:	0150      	lsls	r0, r2, #5
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4621      	mov	r1, r4
 80025b2:	1a51      	subs	r1, r2, r1
 80025b4:	61b9      	str	r1, [r7, #24]
 80025b6:	4629      	mov	r1, r5
 80025b8:	eb63 0301 	sbc.w	r3, r3, r1
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80025ca:	4659      	mov	r1, fp
 80025cc:	018b      	lsls	r3, r1, #6
 80025ce:	4651      	mov	r1, sl
 80025d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025d4:	4651      	mov	r1, sl
 80025d6:	018a      	lsls	r2, r1, #6
 80025d8:	4651      	mov	r1, sl
 80025da:	ebb2 0801 	subs.w	r8, r2, r1
 80025de:	4659      	mov	r1, fp
 80025e0:	eb63 0901 	sbc.w	r9, r3, r1
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025f8:	4690      	mov	r8, r2
 80025fa:	4699      	mov	r9, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	eb18 0303 	adds.w	r3, r8, r3
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	462b      	mov	r3, r5
 8002606:	eb49 0303 	adc.w	r3, r9, r3
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002618:	4629      	mov	r1, r5
 800261a:	024b      	lsls	r3, r1, #9
 800261c:	4621      	mov	r1, r4
 800261e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002622:	4621      	mov	r1, r4
 8002624:	024a      	lsls	r2, r1, #9
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800262e:	2200      	movs	r2, #0
 8002630:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002632:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002634:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002638:	f7fd fe42 	bl	80002c0 <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4613      	mov	r3, r2
 8002642:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002646:	e065      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x420>
 8002648:	40023800 	.word	0x40023800
 800264c:	00f42400 	.word	0x00f42400
 8002650:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002654:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_RCC_GetSysClockFreq+0x458>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	2200      	movs	r2, #0
 800265c:	4618      	mov	r0, r3
 800265e:	4611      	mov	r1, r2
 8002660:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002664:	653b      	str	r3, [r7, #80]	@ 0x50
 8002666:	2300      	movs	r3, #0
 8002668:	657b      	str	r3, [r7, #84]	@ 0x54
 800266a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800266e:	4642      	mov	r2, r8
 8002670:	464b      	mov	r3, r9
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	0159      	lsls	r1, r3, #5
 800267c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002680:	0150      	lsls	r0, r2, #5
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4641      	mov	r1, r8
 8002688:	1a51      	subs	r1, r2, r1
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	4649      	mov	r1, r9
 800268e:	eb63 0301 	sbc.w	r3, r3, r1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80026a0:	4659      	mov	r1, fp
 80026a2:	018b      	lsls	r3, r1, #6
 80026a4:	4651      	mov	r1, sl
 80026a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026aa:	4651      	mov	r1, sl
 80026ac:	018a      	lsls	r2, r1, #6
 80026ae:	4651      	mov	r1, sl
 80026b0:	1a54      	subs	r4, r2, r1
 80026b2:	4659      	mov	r1, fp
 80026b4:	eb63 0501 	sbc.w	r5, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	00eb      	lsls	r3, r5, #3
 80026c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c6:	00e2      	lsls	r2, r4, #3
 80026c8:	4614      	mov	r4, r2
 80026ca:	461d      	mov	r5, r3
 80026cc:	4643      	mov	r3, r8
 80026ce:	18e3      	adds	r3, r4, r3
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	464b      	mov	r3, r9
 80026d4:	eb45 0303 	adc.w	r3, r5, r3
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e6:	4629      	mov	r1, r5
 80026e8:	028b      	lsls	r3, r1, #10
 80026ea:	4621      	mov	r1, r4
 80026ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f0:	4621      	mov	r1, r4
 80026f2:	028a      	lsls	r2, r1, #10
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026fc:	2200      	movs	r2, #0
 80026fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002700:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002702:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002706:	f7fd fddb 	bl	80002c0 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4613      	mov	r3, r2
 8002710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_RCC_GetSysClockFreq+0x458>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0f1b      	lsrs	r3, r3, #28
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002726:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002732:	e003      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800273a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002740:	4618      	mov	r0, r3
 8002742:	37b8      	adds	r7, #184	@ 0xb8
 8002744:	46bd      	mov	sp, r7
 8002746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	00f42400 	.word	0x00f42400

08002754 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e28d      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8083 	beq.w	800287a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002774:	4b94      	ldr	r3, [pc, #592]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b04      	cmp	r3, #4
 800277e:	d019      	beq.n	80027b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002780:	4b91      	ldr	r3, [pc, #580]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002788:	2b08      	cmp	r3, #8
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800278c:	4b8e      	ldr	r3, [pc, #568]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002798:	d00c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b8b      	ldr	r3, [pc, #556]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d112      	bne.n	80027cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b88      	ldr	r3, [pc, #544]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4b84      	ldr	r3, [pc, #528]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05b      	beq.n	8002878 <HAL_RCC_OscConfig+0x124>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d157      	bne.n	8002878 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e25a      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x90>
 80027d6:	4b7c      	ldr	r3, [pc, #496]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a7b      	ldr	r2, [pc, #492]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xcc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0xb4>
 80027ee:	4b76      	ldr	r3, [pc, #472]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a75      	ldr	r2, [pc, #468]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b73      	ldr	r3, [pc, #460]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a72      	ldr	r2, [pc, #456]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xcc>
 8002808:	4b6f      	ldr	r3, [pc, #444]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6e      	ldr	r2, [pc, #440]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b6c      	ldr	r3, [pc, #432]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a6b      	ldr	r2, [pc, #428]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fe2c 	bl	8001484 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe fe28 	bl	8001484 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e21f      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b61      	ldr	r3, [pc, #388]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xdc>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fe18 	bl	8001484 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe fe14 	bl	8001484 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e20b      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b57      	ldr	r3, [pc, #348]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x104>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d06f      	beq.n	8002966 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002886:	4b50      	ldr	r3, [pc, #320]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002892:	4b4d      	ldr	r3, [pc, #308]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800289a:	2b08      	cmp	r3, #8
 800289c:	d105      	bne.n	80028aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800289e:	4b4a      	ldr	r3, [pc, #296]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028aa:	4b47      	ldr	r3, [pc, #284]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d11c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b44      	ldr	r3, [pc, #272]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d116      	bne.n	80028f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x186>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e1d3      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b3b      	ldr	r3, [pc, #236]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4937      	ldr	r1, [pc, #220]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	e03a      	b.n	8002966 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f8:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCC_OscConfig+0x278>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fdc1 	bl	8001484 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002906:	f7fe fdbd 	bl	8001484 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1b4      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4925      	ldr	r1, [pc, #148]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <HAL_RCC_OscConfig+0x278>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fda0 	bl	8001484 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002948:	f7fe fd9c 	bl	8001484 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e193      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d036      	beq.n	80029e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fd80 	bl	8001484 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fd7c 	bl	8001484 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e173      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 800299c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x234>
 80029a6:	e01b      	b.n	80029e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe fd69 	bl	8001484 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	e00e      	b.n	80029d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b6:	f7fe fd65 	bl	8001484 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d907      	bls.n	80029d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e15c      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	42470000 	.word	0x42470000
 80029d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 80029d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ea      	bne.n	80029b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8097 	beq.w	8002b1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f2:	4b83      	ldr	r3, [pc, #524]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b7f      	ldr	r3, [pc, #508]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	4a7e      	ldr	r2, [pc, #504]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	4b79      	ldr	r3, [pc, #484]	@ (8002c04 <HAL_RCC_OscConfig+0x4b0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d118      	bne.n	8002a5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2a:	4b76      	ldr	r3, [pc, #472]	@ (8002c04 <HAL_RCC_OscConfig+0x4b0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a75      	ldr	r2, [pc, #468]	@ (8002c04 <HAL_RCC_OscConfig+0x4b0>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fd25 	bl	8001484 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3e:	f7fe fd21 	bl	8001484 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e118      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	4b6c      	ldr	r3, [pc, #432]	@ (8002c04 <HAL_RCC_OscConfig+0x4b0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x31e>
 8002a64:	4b66      	ldr	r3, [pc, #408]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a68:	4a65      	ldr	r2, [pc, #404]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a70:	e01c      	b.n	8002aac <HAL_RCC_OscConfig+0x358>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x340>
 8002a7a:	4b61      	ldr	r3, [pc, #388]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	4a60      	ldr	r2, [pc, #384]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a86:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8a:	4a5d      	ldr	r2, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0x358>
 8002a94:	4b5a      	ldr	r3, [pc, #360]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a98:	4a59      	ldr	r2, [pc, #356]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa0:	4b57      	ldr	r3, [pc, #348]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	4a56      	ldr	r2, [pc, #344]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002aa6:	f023 0304 	bic.w	r3, r3, #4
 8002aaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d015      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fce6 	bl	8001484 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fce2 	bl	8001484 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0d7      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0ee      	beq.n	8002abc <HAL_RCC_OscConfig+0x368>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fcd0 	bl	8001484 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fccc 	bl	8001484 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0c1      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afe:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1ee      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b10:	4b3b      	ldr	r3, [pc, #236]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	4a3a      	ldr	r2, [pc, #232]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80ad 	beq.w	8002c80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b26:	4b36      	ldr	r3, [pc, #216]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d060      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d145      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b33      	ldr	r3, [pc, #204]	@ (8002c08 <HAL_RCC_OscConfig+0x4b4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fca0 	bl	8001484 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fc9c 	bl	8001484 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e093      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	4b29      	ldr	r3, [pc, #164]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	071b      	lsls	r3, r3, #28
 8002b92:	491b      	ldr	r1, [pc, #108]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <HAL_RCC_OscConfig+0x4b4>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fc71 	bl	8001484 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe fc6d 	bl	8001484 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e064      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x452>
 8002bc4:	e05c      	b.n	8002c80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <HAL_RCC_OscConfig+0x4b4>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fc5a 	bl	8001484 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fc56 	bl	8001484 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e04d      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x480>
 8002bf2:	e045      	b.n	8002c80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e040      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40007000 	.word	0x40007000
 8002c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <HAL_RCC_OscConfig+0x538>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d030      	beq.n	8002c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d129      	bne.n	8002c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d122      	bne.n	8002c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d119      	bne.n	8002c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	3b01      	subs	r3, #1
 8002c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d10f      	bne.n	8002c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800

08002c90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e083      	b.n	8002daa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7f5b      	ldrb	r3, [r3, #29]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe fae0 	bl	8001278 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	22ca      	movs	r2, #202	@ 0xca
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2253      	movs	r2, #83	@ 0x53
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 faa8 	bl	8003224 <RTC_EnterInitMode>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	22ff      	movs	r2, #255	@ 0xff
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e05e      	b.n	8002daa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6899      	ldr	r1, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68d2      	ldr	r2, [r2, #12]
 8002d26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6919      	ldr	r1, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	041a      	lsls	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d4a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10e      	bne.n	8002d78 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa3a 	bl	80031d4 <HAL_RTC_WaitForSynchro>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	22ff      	movs	r2, #255	@ 0xff
 8002d6c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e018      	b.n	8002daa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	22ff      	movs	r2, #255	@ 0xff
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002db2:	b590      	push	{r4, r7, lr}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	7f1b      	ldrb	r3, [r3, #28]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_RTC_SetTime+0x1c>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0aa      	b.n	8002f24 <HAL_RTC_SetTime+0x172>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d126      	bne.n	8002e2e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2200      	movs	r2, #0
 8002df2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fa3f 	bl	800327c <RTC_ByteToBcd2>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fa38 	bl	800327c <RTC_ByteToBcd2>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e10:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	789b      	ldrb	r3, [r3, #2]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fa30 	bl	800327c <RTC_ByteToBcd2>
 8002e1c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e1e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	78db      	ldrb	r3, [r3, #3]
 8002e26:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e018      	b.n	8002e60 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e4e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e54:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	78db      	ldrb	r3, [r3, #3]
 8002e5a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	22ca      	movs	r2, #202	@ 0xca
 8002e66:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2253      	movs	r2, #83	@ 0x53
 8002e6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f9d7 	bl	8003224 <RTC_EnterInitMode>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	22ff      	movs	r2, #255	@ 0xff
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2204      	movs	r2, #4
 8002e88:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e047      	b.n	8002f24 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002e9e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ea2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002eb2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d111      	bne.n	8002f0e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f972 	bl	80031d4 <HAL_RTC_WaitForSynchro>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	22ff      	movs	r2, #255	@ 0xff
 8002efc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2204      	movs	r2, #4
 8002f02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00a      	b.n	8002f24 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	22ff      	movs	r2, #255	@ 0xff
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002f22:	2300      	movs	r3, #0
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd90      	pop	{r4, r7, pc}

08002f2c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002f5e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002f62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11a      	bne.n	8002fde <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f983 	bl	80032b8 <RTC_Bcd2ToByte>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f97a 	bl	80032b8 <RTC_Bcd2ToByte>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	789b      	ldrb	r3, [r3, #2]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f971 	bl	80032b8 <RTC_Bcd2ToByte>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	7f1b      	ldrb	r3, [r3, #28]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_RTC_SetDate+0x1c>
 8003000:	2302      	movs	r3, #2
 8003002:	e094      	b.n	800312e <HAL_RTC_SetDate+0x146>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2202      	movs	r2, #2
 800300e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10e      	bne.n	8003034 <HAL_RTC_SetDate+0x4c>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	f023 0310 	bic.w	r3, r3, #16
 800302a:	b2db      	uxtb	r3, r3
 800302c:	330a      	adds	r3, #10
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11c      	bne.n	8003074 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	78db      	ldrb	r3, [r3, #3]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f91c 	bl	800327c <RTC_ByteToBcd2>
 8003044:	4603      	mov	r3, r0
 8003046:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	785b      	ldrb	r3, [r3, #1]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f915 	bl	800327c <RTC_ByteToBcd2>
 8003052:	4603      	mov	r3, r0
 8003054:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003056:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	789b      	ldrb	r3, [r3, #2]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f90d 	bl	800327c <RTC_ByteToBcd2>
 8003062:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003064:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e00e      	b.n	8003092 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	78db      	ldrb	r3, [r3, #3]
 8003078:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003080:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003086:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	22ca      	movs	r2, #202	@ 0xca
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2253      	movs	r2, #83	@ 0x53
 80030a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8be 	bl	8003224 <RTC_EnterInitMode>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	22ff      	movs	r2, #255	@ 0xff
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2204      	movs	r2, #4
 80030ba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e033      	b.n	800312e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80030d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f86d 	bl	80031d4 <HAL_RTC_WaitForSynchro>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	22ff      	movs	r2, #255	@ 0xff
 8003106:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2204      	movs	r2, #4
 800310c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e00a      	b.n	800312e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	22ff      	movs	r2, #255	@ 0xff
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd90      	pop	{r4, r7, pc}

08003136 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003150:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003154:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	0b5b      	lsrs	r3, r3, #13
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11a      	bne.n	80031ca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	78db      	ldrb	r3, [r3, #3]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f88d 	bl	80032b8 <RTC_Bcd2ToByte>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	785b      	ldrb	r3, [r3, #1]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f884 	bl	80032b8 <RTC_Bcd2ToByte>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	789b      	ldrb	r3, [r3, #2]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f87b 	bl	80032b8 <RTC_Bcd2ToByte>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031f0:	f7fe f948 	bl	8001484 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031f6:	e009      	b.n	800320c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031f8:	f7fe f944 	bl	8001484 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003206:	d901      	bls.n	800320c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e007      	b.n	800321c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0ee      	beq.n	80031f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f04f 32ff 	mov.w	r2, #4294967295
 8003246:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003248:	f7fe f91c 	bl	8001484 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800324e:	e009      	b.n	8003264 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003250:	f7fe f918 	bl	8001484 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800325e:	d901      	bls.n	8003264 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e007      	b.n	8003274 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ee      	beq.n	8003250 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800328a:	e005      	b.n	8003298 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	3b0a      	subs	r3, #10
 8003296:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2b09      	cmp	r3, #9
 800329c:	d8f6      	bhi.n	800328c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b2db      	uxtb	r3, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	b2db      	uxtb	r3, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0202 	mvn.w	r2, #2
 8003320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8ee 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8e0 	bl	8003504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f8f1 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0204 	mvn.w	r2, #4
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8c4 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8b6 	bl	8003504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8c7 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0208 	mvn.w	r2, #8
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2204      	movs	r2, #4
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f89a 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f88c 	bl	8003504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f89d 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b10      	cmp	r3, #16
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b10      	cmp	r3, #16
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2208      	movs	r2, #8
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f870 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f862 	bl	8003504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f873 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10e      	bne.n	8003478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0201 	mvn.w	r2, #1
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fd fa3c 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003490:	2b80      	cmp	r3, #128	@ 0x80
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f862 	bl	8003568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ae:	2b40      	cmp	r3, #64	@ 0x40
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034bc:	2b40      	cmp	r3, #64	@ 0x40
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f838 	bl	8003540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0220 	mvn.w	r2, #32
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f82c 	bl	8003554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e03f      	b.n	800360e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fe20 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	@ 0x24
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f9cb 	bl	800395c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b08a      	sub	sp, #40	@ 0x28
 800361a:	af02      	add	r7, sp, #8
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d17c      	bne.n	8003730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_UART_Transmit+0x2c>
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e075      	b.n	8003732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_UART_Transmit+0x3e>
 8003650:	2302      	movs	r3, #2
 8003652:	e06e      	b.n	8003732 <HAL_UART_Transmit+0x11c>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2221      	movs	r2, #33	@ 0x21
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366a:	f7fd ff0b 	bl	8001484 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003684:	d108      	bne.n	8003698 <HAL_UART_Transmit+0x82>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e003      	b.n	80036a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80036a8:	e02a      	b.n	8003700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2180      	movs	r1, #128	@ 0x80
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f8e2 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e036      	b.n	8003732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3302      	adds	r3, #2
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	e007      	b.n	80036f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	3301      	adds	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1cf      	bne.n	80036aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	2140      	movs	r1, #64	@ 0x40
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f8b2 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e006      	b.n	8003732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b08a      	sub	sp, #40	@ 0x28
 800373e:	af02      	add	r7, sp, #8
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b20      	cmp	r3, #32
 8003758:	f040 808c 	bne.w	8003874 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_UART_Receive+0x2e>
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e084      	b.n	8003876 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_UART_Receive+0x40>
 8003776:	2302      	movs	r3, #2
 8003778:	e07d      	b.n	8003876 <HAL_UART_Receive+0x13c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2222      	movs	r2, #34	@ 0x22
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003796:	f7fd fe75 	bl	8001484 <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b0:	d108      	bne.n	80037c4 <HAL_UART_Receive+0x8a>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e003      	b.n	80037cc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037d4:	e043      	b.n	800385e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	2120      	movs	r1, #32
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f84c 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e042      	b.n	8003876 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003802:	b29a      	uxth	r2, r3
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	3302      	adds	r3, #2
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e01f      	b.n	8003850 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003818:	d007      	beq.n	800382a <HAL_UART_Receive+0xf0>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <HAL_UART_Receive+0xfe>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e008      	b.n	800384a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003844:	b2da      	uxtb	r2, r3
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3301      	adds	r3, #1
 800384e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1b6      	bne.n	80037d6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	e000      	b.n	8003876 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003874:	2302      	movs	r3, #2
  }
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b090      	sub	sp, #64	@ 0x40
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388e:	e050      	b.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d04c      	beq.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <UART_WaitOnFlagUntilTimeout+0x30>
 800389e:	f7fd fdf1 	bl	8001484 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d241      	bcs.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80038c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038ce:	637a      	str	r2, [r7, #52]	@ 0x34
 80038d0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80038dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e5      	bne.n	80038ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3314      	adds	r3, #20
 80038e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	613b      	str	r3, [r7, #16]
   return(result);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003902:	623a      	str	r2, [r7, #32]
 8003904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	69f9      	ldr	r1, [r7, #28]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e00f      	b.n	8003952 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4013      	ands	r3, r2
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	bf0c      	ite	eq
 8003942:	2301      	moveq	r3, #1
 8003944:	2300      	movne	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	429a      	cmp	r2, r3
 800394e:	d09f      	beq.n	8003890 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3740      	adds	r7, #64	@ 0x40
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b0c0      	sub	sp, #256	@ 0x100
 8003962:	af00      	add	r7, sp, #0
 8003964:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	ea40 0301 	orr.w	r3, r0, r1
 8003984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	431a      	orrs	r2, r3
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039b4:	f021 010c 	bic.w	r1, r1, #12
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039c2:	430b      	orrs	r3, r1
 80039c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	6999      	ldr	r1, [r3, #24]
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	ea40 0301 	orr.w	r3, r0, r1
 80039e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b8f      	ldr	r3, [pc, #572]	@ (8003c28 <UART_SetConfig+0x2cc>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d005      	beq.n	80039fc <UART_SetConfig+0xa0>
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b8d      	ldr	r3, [pc, #564]	@ (8003c2c <UART_SetConfig+0x2d0>)
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d104      	bne.n	8003a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe f93c 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8003a00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a04:	e003      	b.n	8003a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a06:	f7fe f923 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8003a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a18:	f040 810c 	bne.w	8003c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a2e:	4622      	mov	r2, r4
 8003a30:	462b      	mov	r3, r5
 8003a32:	1891      	adds	r1, r2, r2
 8003a34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a36:	415b      	adcs	r3, r3
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a3e:	4621      	mov	r1, r4
 8003a40:	eb12 0801 	adds.w	r8, r2, r1
 8003a44:	4629      	mov	r1, r5
 8003a46:	eb43 0901 	adc.w	r9, r3, r1
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a5e:	4690      	mov	r8, r2
 8003a60:	4699      	mov	r9, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	eb18 0303 	adds.w	r3, r8, r3
 8003a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	eb49 0303 	adc.w	r3, r9, r3
 8003a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	18db      	adds	r3, r3, r3
 8003a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a90:	4613      	mov	r3, r2
 8003a92:	eb42 0303 	adc.w	r3, r2, r3
 8003a96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003aa0:	f7fc fc0e 	bl	80002c0 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4b61      	ldr	r3, [pc, #388]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	011c      	lsls	r4, r3, #4
 8003ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003abc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003acc:	415b      	adcs	r3, r3
 8003ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8003ada:	4649      	mov	r1, r9
 8003adc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af4:	4692      	mov	sl, r2
 8003af6:	469b      	mov	fp, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	eb1a 0303 	adds.w	r3, sl, r3
 8003afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b02:	464b      	mov	r3, r9
 8003b04:	eb4b 0303 	adc.w	r3, fp, r3
 8003b08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b20:	460b      	mov	r3, r1
 8003b22:	18db      	adds	r3, r3, r3
 8003b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b26:	4613      	mov	r3, r2
 8003b28:	eb42 0303 	adc.w	r3, r2, r3
 8003b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b36:	f7fc fbc3 	bl	80002c0 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4b3b      	ldr	r3, [pc, #236]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003b42:	fba3 2301 	umull	r2, r3, r3, r1
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2264      	movs	r2, #100	@ 0x64
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	1acb      	subs	r3, r1, r3
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b56:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003b58:	fba3 2302 	umull	r2, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b64:	441c      	add	r4, r3
 8003b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	1891      	adds	r1, r2, r2
 8003b7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b80:	415b      	adcs	r3, r3
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b88:	4641      	mov	r1, r8
 8003b8a:	1851      	adds	r1, r2, r1
 8003b8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b8e:	4649      	mov	r1, r9
 8003b90:	414b      	adcs	r3, r1
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	00cb      	lsls	r3, r1, #3
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003baa:	4651      	mov	r1, sl
 8003bac:	00ca      	lsls	r2, r1, #3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bdc:	460b      	mov	r3, r1
 8003bde:	18db      	adds	r3, r3, r3
 8003be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003be2:	4613      	mov	r3, r2
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bf2:	f7fc fb65 	bl	80002c0 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	2164      	movs	r1, #100	@ 0x64
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	3332      	adds	r3, #50	@ 0x32
 8003c0e:	4a08      	ldr	r2, [pc, #32]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	f003 0207 	and.w	r2, r3, #7
 8003c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4422      	add	r2, r4
 8003c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c24:	e106      	b.n	8003e34 <UART_SetConfig+0x4d8>
 8003c26:	bf00      	nop
 8003c28:	40011000 	.word	0x40011000
 8003c2c:	40011400 	.word	0x40011400
 8003c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c46:	4642      	mov	r2, r8
 8003c48:	464b      	mov	r3, r9
 8003c4a:	1891      	adds	r1, r2, r2
 8003c4c:	6239      	str	r1, [r7, #32]
 8003c4e:	415b      	adcs	r3, r3
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c56:	4641      	mov	r1, r8
 8003c58:	1854      	adds	r4, r2, r1
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	eb43 0501 	adc.w	r5, r3, r1
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6e:	00e2      	lsls	r2, r4, #3
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	18e3      	adds	r3, r4, r3
 8003c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	eb45 0303 	adc.w	r3, r5, r3
 8003c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	008b      	lsls	r3, r1, #2
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cac:	4621      	mov	r1, r4
 8003cae:	008a      	lsls	r2, r1, #2
 8003cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cb4:	f7fc fb04 	bl	80002c0 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4b60      	ldr	r3, [pc, #384]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	011c      	lsls	r4, r3, #4
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	61b9      	str	r1, [r7, #24]
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce8:	4641      	mov	r1, r8
 8003cea:	1851      	adds	r1, r2, r1
 8003cec:	6139      	str	r1, [r7, #16]
 8003cee:	4649      	mov	r1, r9
 8003cf0:	414b      	adcs	r3, r1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d00:	4659      	mov	r1, fp
 8003d02:	00cb      	lsls	r3, r1, #3
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	00ca      	lsls	r2, r1, #3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	4642      	mov	r2, r8
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	460a      	mov	r2, r1
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d40:	4649      	mov	r1, r9
 8003d42:	008b      	lsls	r3, r1, #2
 8003d44:	4641      	mov	r1, r8
 8003d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	008a      	lsls	r2, r1, #2
 8003d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d52:	f7fc fab5 	bl	80002c0 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4b38      	ldr	r3, [pc, #224]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2264      	movs	r2, #100	@ 0x64
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	1acb      	subs	r3, r1, r3
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	3332      	adds	r3, #50	@ 0x32
 8003d70:	4a33      	ldr	r2, [pc, #204]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7c:	441c      	add	r4, r3
 8003d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d82:	2200      	movs	r2, #0
 8003d84:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d86:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	1891      	adds	r1, r2, r2
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	415b      	adcs	r3, r3
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	1851      	adds	r1, r2, r1
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	4649      	mov	r1, r9
 8003da4:	414b      	adcs	r3, r1
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003db4:	4659      	mov	r1, fp
 8003db6:	00cb      	lsls	r3, r1, #3
 8003db8:	4651      	mov	r1, sl
 8003dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	00ca      	lsls	r2, r1, #3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4642      	mov	r2, r8
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dce:	464b      	mov	r3, r9
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	eb42 0303 	adc.w	r3, r2, r3
 8003dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003de2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003df0:	4649      	mov	r1, r9
 8003df2:	008b      	lsls	r3, r1, #2
 8003df4:	4641      	mov	r1, r8
 8003df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	008a      	lsls	r2, r1, #2
 8003dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e02:	f7fc fa5d 	bl	80002c0 <__aeabi_uldivmod>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	2164      	movs	r1, #100	@ 0x64
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	3332      	adds	r3, #50	@ 0x32
 8003e1e:	4a08      	ldr	r2, [pc, #32]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	f003 020f 	and.w	r2, r3, #15
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4422      	add	r2, r4
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e40:	51eb851f 	.word	0x51eb851f

08003e44 <siprintf>:
 8003e44:	b40e      	push	{r1, r2, r3}
 8003e46:	b510      	push	{r4, lr}
 8003e48:	b09d      	sub	sp, #116	@ 0x74
 8003e4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e4c:	9002      	str	r0, [sp, #8]
 8003e4e:	9006      	str	r0, [sp, #24]
 8003e50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e54:	480a      	ldr	r0, [pc, #40]	@ (8003e80 <siprintf+0x3c>)
 8003e56:	9107      	str	r1, [sp, #28]
 8003e58:	9104      	str	r1, [sp, #16]
 8003e5a:	490a      	ldr	r1, [pc, #40]	@ (8003e84 <siprintf+0x40>)
 8003e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e60:	9105      	str	r1, [sp, #20]
 8003e62:	2400      	movs	r4, #0
 8003e64:	a902      	add	r1, sp, #8
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e6c:	f000 f9b4 	bl	80041d8 <_svfiprintf_r>
 8003e70:	9b02      	ldr	r3, [sp, #8]
 8003e72:	701c      	strb	r4, [r3, #0]
 8003e74:	b01d      	add	sp, #116	@ 0x74
 8003e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e7a:	b003      	add	sp, #12
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	2000000c 	.word	0x2000000c
 8003e84:	ffff0208 	.word	0xffff0208

08003e88 <_vsiprintf_r>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	b09a      	sub	sp, #104	@ 0x68
 8003e8c:	2400      	movs	r4, #0
 8003e8e:	9100      	str	r1, [sp, #0]
 8003e90:	9104      	str	r1, [sp, #16]
 8003e92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e96:	9105      	str	r1, [sp, #20]
 8003e98:	9102      	str	r1, [sp, #8]
 8003e9a:	4905      	ldr	r1, [pc, #20]	@ (8003eb0 <_vsiprintf_r+0x28>)
 8003e9c:	9103      	str	r1, [sp, #12]
 8003e9e:	4669      	mov	r1, sp
 8003ea0:	9419      	str	r4, [sp, #100]	@ 0x64
 8003ea2:	f000 f999 	bl	80041d8 <_svfiprintf_r>
 8003ea6:	9b00      	ldr	r3, [sp, #0]
 8003ea8:	701c      	strb	r4, [r3, #0]
 8003eaa:	b01a      	add	sp, #104	@ 0x68
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	bf00      	nop
 8003eb0:	ffff0208 	.word	0xffff0208

08003eb4 <vsiprintf>:
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	460a      	mov	r2, r1
 8003eb8:	4601      	mov	r1, r0
 8003eba:	4802      	ldr	r0, [pc, #8]	@ (8003ec4 <vsiprintf+0x10>)
 8003ebc:	6800      	ldr	r0, [r0, #0]
 8003ebe:	f7ff bfe3 	b.w	8003e88 <_vsiprintf_r>
 8003ec2:	bf00      	nop
 8003ec4:	2000000c 	.word	0x2000000c

08003ec8 <memset>:
 8003ec8:	4402      	add	r2, r0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d100      	bne.n	8003ed2 <memset+0xa>
 8003ed0:	4770      	bx	lr
 8003ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed6:	e7f9      	b.n	8003ecc <memset+0x4>

08003ed8 <__errno>:
 8003ed8:	4b01      	ldr	r3, [pc, #4]	@ (8003ee0 <__errno+0x8>)
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	2000000c 	.word	0x2000000c

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8003f1c <__libc_init_array+0x38>)
 8003ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8003f20 <__libc_init_array+0x3c>)
 8003eea:	1b64      	subs	r4, r4, r5
 8003eec:	10a4      	asrs	r4, r4, #2
 8003eee:	2600      	movs	r6, #0
 8003ef0:	42a6      	cmp	r6, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8003f24 <__libc_init_array+0x40>)
 8003ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8003f28 <__libc_init_array+0x44>)
 8003ef8:	f000 fc64 	bl	80047c4 <_init>
 8003efc:	1b64      	subs	r4, r4, r5
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	2600      	movs	r6, #0
 8003f02:	42a6      	cmp	r6, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0c:	4798      	blx	r3
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f16:	4798      	blx	r3
 8003f18:	3601      	adds	r6, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	08004cc4 	.word	0x08004cc4
 8003f20:	08004cc4 	.word	0x08004cc4
 8003f24:	08004cc4 	.word	0x08004cc4
 8003f28:	08004cc8 	.word	0x08004cc8

08003f2c <__retarget_lock_acquire_recursive>:
 8003f2c:	4770      	bx	lr

08003f2e <__retarget_lock_release_recursive>:
 8003f2e:	4770      	bx	lr

08003f30 <_free_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4605      	mov	r5, r0
 8003f34:	2900      	cmp	r1, #0
 8003f36:	d041      	beq.n	8003fbc <_free_r+0x8c>
 8003f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f3c:	1f0c      	subs	r4, r1, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bfb8      	it	lt
 8003f42:	18e4      	addlt	r4, r4, r3
 8003f44:	f000 f8e0 	bl	8004108 <__malloc_lock>
 8003f48:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc0 <_free_r+0x90>)
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	b933      	cbnz	r3, 8003f5c <_free_r+0x2c>
 8003f4e:	6063      	str	r3, [r4, #4]
 8003f50:	6014      	str	r4, [r2, #0]
 8003f52:	4628      	mov	r0, r5
 8003f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f58:	f000 b8dc 	b.w	8004114 <__malloc_unlock>
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d908      	bls.n	8003f72 <_free_r+0x42>
 8003f60:	6820      	ldr	r0, [r4, #0]
 8003f62:	1821      	adds	r1, r4, r0
 8003f64:	428b      	cmp	r3, r1
 8003f66:	bf01      	itttt	eq
 8003f68:	6819      	ldreq	r1, [r3, #0]
 8003f6a:	685b      	ldreq	r3, [r3, #4]
 8003f6c:	1809      	addeq	r1, r1, r0
 8003f6e:	6021      	streq	r1, [r4, #0]
 8003f70:	e7ed      	b.n	8003f4e <_free_r+0x1e>
 8003f72:	461a      	mov	r2, r3
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b10b      	cbz	r3, 8003f7c <_free_r+0x4c>
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	d9fa      	bls.n	8003f72 <_free_r+0x42>
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	1850      	adds	r0, r2, r1
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d10b      	bne.n	8003f9c <_free_r+0x6c>
 8003f84:	6820      	ldr	r0, [r4, #0]
 8003f86:	4401      	add	r1, r0
 8003f88:	1850      	adds	r0, r2, r1
 8003f8a:	4283      	cmp	r3, r0
 8003f8c:	6011      	str	r1, [r2, #0]
 8003f8e:	d1e0      	bne.n	8003f52 <_free_r+0x22>
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	6053      	str	r3, [r2, #4]
 8003f96:	4408      	add	r0, r1
 8003f98:	6010      	str	r0, [r2, #0]
 8003f9a:	e7da      	b.n	8003f52 <_free_r+0x22>
 8003f9c:	d902      	bls.n	8003fa4 <_free_r+0x74>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	e7d6      	b.n	8003f52 <_free_r+0x22>
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	1821      	adds	r1, r4, r0
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	bf04      	itt	eq
 8003fac:	6819      	ldreq	r1, [r3, #0]
 8003fae:	685b      	ldreq	r3, [r3, #4]
 8003fb0:	6063      	str	r3, [r4, #4]
 8003fb2:	bf04      	itt	eq
 8003fb4:	1809      	addeq	r1, r1, r0
 8003fb6:	6021      	streq	r1, [r4, #0]
 8003fb8:	6054      	str	r4, [r2, #4]
 8003fba:	e7ca      	b.n	8003f52 <_free_r+0x22>
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000290 	.word	0x20000290

08003fc4 <sbrk_aligned>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8004004 <sbrk_aligned+0x40>)
 8003fc8:	460c      	mov	r4, r1
 8003fca:	6831      	ldr	r1, [r6, #0]
 8003fcc:	4605      	mov	r5, r0
 8003fce:	b911      	cbnz	r1, 8003fd6 <sbrk_aligned+0x12>
 8003fd0:	f000 fba4 	bl	800471c <_sbrk_r>
 8003fd4:	6030      	str	r0, [r6, #0]
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f000 fb9f 	bl	800471c <_sbrk_r>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	d103      	bne.n	8003fea <sbrk_aligned+0x26>
 8003fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	bd70      	pop	{r4, r5, r6, pc}
 8003fea:	1cc4      	adds	r4, r0, #3
 8003fec:	f024 0403 	bic.w	r4, r4, #3
 8003ff0:	42a0      	cmp	r0, r4
 8003ff2:	d0f8      	beq.n	8003fe6 <sbrk_aligned+0x22>
 8003ff4:	1a21      	subs	r1, r4, r0
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f000 fb90 	bl	800471c <_sbrk_r>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d1f2      	bne.n	8003fe6 <sbrk_aligned+0x22>
 8004000:	e7ef      	b.n	8003fe2 <sbrk_aligned+0x1e>
 8004002:	bf00      	nop
 8004004:	2000028c 	.word	0x2000028c

08004008 <_malloc_r>:
 8004008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800400c:	1ccd      	adds	r5, r1, #3
 800400e:	f025 0503 	bic.w	r5, r5, #3
 8004012:	3508      	adds	r5, #8
 8004014:	2d0c      	cmp	r5, #12
 8004016:	bf38      	it	cc
 8004018:	250c      	movcc	r5, #12
 800401a:	2d00      	cmp	r5, #0
 800401c:	4606      	mov	r6, r0
 800401e:	db01      	blt.n	8004024 <_malloc_r+0x1c>
 8004020:	42a9      	cmp	r1, r5
 8004022:	d904      	bls.n	800402e <_malloc_r+0x26>
 8004024:	230c      	movs	r3, #12
 8004026:	6033      	str	r3, [r6, #0]
 8004028:	2000      	movs	r0, #0
 800402a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800402e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004104 <_malloc_r+0xfc>
 8004032:	f000 f869 	bl	8004108 <__malloc_lock>
 8004036:	f8d8 3000 	ldr.w	r3, [r8]
 800403a:	461c      	mov	r4, r3
 800403c:	bb44      	cbnz	r4, 8004090 <_malloc_r+0x88>
 800403e:	4629      	mov	r1, r5
 8004040:	4630      	mov	r0, r6
 8004042:	f7ff ffbf 	bl	8003fc4 <sbrk_aligned>
 8004046:	1c43      	adds	r3, r0, #1
 8004048:	4604      	mov	r4, r0
 800404a:	d158      	bne.n	80040fe <_malloc_r+0xf6>
 800404c:	f8d8 4000 	ldr.w	r4, [r8]
 8004050:	4627      	mov	r7, r4
 8004052:	2f00      	cmp	r7, #0
 8004054:	d143      	bne.n	80040de <_malloc_r+0xd6>
 8004056:	2c00      	cmp	r4, #0
 8004058:	d04b      	beq.n	80040f2 <_malloc_r+0xea>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	4639      	mov	r1, r7
 800405e:	4630      	mov	r0, r6
 8004060:	eb04 0903 	add.w	r9, r4, r3
 8004064:	f000 fb5a 	bl	800471c <_sbrk_r>
 8004068:	4581      	cmp	r9, r0
 800406a:	d142      	bne.n	80040f2 <_malloc_r+0xea>
 800406c:	6821      	ldr	r1, [r4, #0]
 800406e:	1a6d      	subs	r5, r5, r1
 8004070:	4629      	mov	r1, r5
 8004072:	4630      	mov	r0, r6
 8004074:	f7ff ffa6 	bl	8003fc4 <sbrk_aligned>
 8004078:	3001      	adds	r0, #1
 800407a:	d03a      	beq.n	80040f2 <_malloc_r+0xea>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	442b      	add	r3, r5
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	f8d8 3000 	ldr.w	r3, [r8]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	bb62      	cbnz	r2, 80040e4 <_malloc_r+0xdc>
 800408a:	f8c8 7000 	str.w	r7, [r8]
 800408e:	e00f      	b.n	80040b0 <_malloc_r+0xa8>
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	1b52      	subs	r2, r2, r5
 8004094:	d420      	bmi.n	80040d8 <_malloc_r+0xd0>
 8004096:	2a0b      	cmp	r2, #11
 8004098:	d917      	bls.n	80040ca <_malloc_r+0xc2>
 800409a:	1961      	adds	r1, r4, r5
 800409c:	42a3      	cmp	r3, r4
 800409e:	6025      	str	r5, [r4, #0]
 80040a0:	bf18      	it	ne
 80040a2:	6059      	strne	r1, [r3, #4]
 80040a4:	6863      	ldr	r3, [r4, #4]
 80040a6:	bf08      	it	eq
 80040a8:	f8c8 1000 	streq.w	r1, [r8]
 80040ac:	5162      	str	r2, [r4, r5]
 80040ae:	604b      	str	r3, [r1, #4]
 80040b0:	4630      	mov	r0, r6
 80040b2:	f000 f82f 	bl	8004114 <__malloc_unlock>
 80040b6:	f104 000b 	add.w	r0, r4, #11
 80040ba:	1d23      	adds	r3, r4, #4
 80040bc:	f020 0007 	bic.w	r0, r0, #7
 80040c0:	1ac2      	subs	r2, r0, r3
 80040c2:	bf1c      	itt	ne
 80040c4:	1a1b      	subne	r3, r3, r0
 80040c6:	50a3      	strne	r3, [r4, r2]
 80040c8:	e7af      	b.n	800402a <_malloc_r+0x22>
 80040ca:	6862      	ldr	r2, [r4, #4]
 80040cc:	42a3      	cmp	r3, r4
 80040ce:	bf0c      	ite	eq
 80040d0:	f8c8 2000 	streq.w	r2, [r8]
 80040d4:	605a      	strne	r2, [r3, #4]
 80040d6:	e7eb      	b.n	80040b0 <_malloc_r+0xa8>
 80040d8:	4623      	mov	r3, r4
 80040da:	6864      	ldr	r4, [r4, #4]
 80040dc:	e7ae      	b.n	800403c <_malloc_r+0x34>
 80040de:	463c      	mov	r4, r7
 80040e0:	687f      	ldr	r7, [r7, #4]
 80040e2:	e7b6      	b.n	8004052 <_malloc_r+0x4a>
 80040e4:	461a      	mov	r2, r3
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	d1fb      	bne.n	80040e4 <_malloc_r+0xdc>
 80040ec:	2300      	movs	r3, #0
 80040ee:	6053      	str	r3, [r2, #4]
 80040f0:	e7de      	b.n	80040b0 <_malloc_r+0xa8>
 80040f2:	230c      	movs	r3, #12
 80040f4:	6033      	str	r3, [r6, #0]
 80040f6:	4630      	mov	r0, r6
 80040f8:	f000 f80c 	bl	8004114 <__malloc_unlock>
 80040fc:	e794      	b.n	8004028 <_malloc_r+0x20>
 80040fe:	6005      	str	r5, [r0, #0]
 8004100:	e7d6      	b.n	80040b0 <_malloc_r+0xa8>
 8004102:	bf00      	nop
 8004104:	20000290 	.word	0x20000290

08004108 <__malloc_lock>:
 8004108:	4801      	ldr	r0, [pc, #4]	@ (8004110 <__malloc_lock+0x8>)
 800410a:	f7ff bf0f 	b.w	8003f2c <__retarget_lock_acquire_recursive>
 800410e:	bf00      	nop
 8004110:	20000288 	.word	0x20000288

08004114 <__malloc_unlock>:
 8004114:	4801      	ldr	r0, [pc, #4]	@ (800411c <__malloc_unlock+0x8>)
 8004116:	f7ff bf0a 	b.w	8003f2e <__retarget_lock_release_recursive>
 800411a:	bf00      	nop
 800411c:	20000288 	.word	0x20000288

08004120 <__ssputs_r>:
 8004120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	688e      	ldr	r6, [r1, #8]
 8004126:	461f      	mov	r7, r3
 8004128:	42be      	cmp	r6, r7
 800412a:	680b      	ldr	r3, [r1, #0]
 800412c:	4682      	mov	sl, r0
 800412e:	460c      	mov	r4, r1
 8004130:	4690      	mov	r8, r2
 8004132:	d82d      	bhi.n	8004190 <__ssputs_r+0x70>
 8004134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004138:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800413c:	d026      	beq.n	800418c <__ssputs_r+0x6c>
 800413e:	6965      	ldr	r5, [r4, #20]
 8004140:	6909      	ldr	r1, [r1, #16]
 8004142:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004146:	eba3 0901 	sub.w	r9, r3, r1
 800414a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800414e:	1c7b      	adds	r3, r7, #1
 8004150:	444b      	add	r3, r9
 8004152:	106d      	asrs	r5, r5, #1
 8004154:	429d      	cmp	r5, r3
 8004156:	bf38      	it	cc
 8004158:	461d      	movcc	r5, r3
 800415a:	0553      	lsls	r3, r2, #21
 800415c:	d527      	bpl.n	80041ae <__ssputs_r+0x8e>
 800415e:	4629      	mov	r1, r5
 8004160:	f7ff ff52 	bl	8004008 <_malloc_r>
 8004164:	4606      	mov	r6, r0
 8004166:	b360      	cbz	r0, 80041c2 <__ssputs_r+0xa2>
 8004168:	6921      	ldr	r1, [r4, #16]
 800416a:	464a      	mov	r2, r9
 800416c:	f000 fae6 	bl	800473c <memcpy>
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800417a:	81a3      	strh	r3, [r4, #12]
 800417c:	6126      	str	r6, [r4, #16]
 800417e:	6165      	str	r5, [r4, #20]
 8004180:	444e      	add	r6, r9
 8004182:	eba5 0509 	sub.w	r5, r5, r9
 8004186:	6026      	str	r6, [r4, #0]
 8004188:	60a5      	str	r5, [r4, #8]
 800418a:	463e      	mov	r6, r7
 800418c:	42be      	cmp	r6, r7
 800418e:	d900      	bls.n	8004192 <__ssputs_r+0x72>
 8004190:	463e      	mov	r6, r7
 8004192:	6820      	ldr	r0, [r4, #0]
 8004194:	4632      	mov	r2, r6
 8004196:	4641      	mov	r1, r8
 8004198:	f000 faa6 	bl	80046e8 <memmove>
 800419c:	68a3      	ldr	r3, [r4, #8]
 800419e:	1b9b      	subs	r3, r3, r6
 80041a0:	60a3      	str	r3, [r4, #8]
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	4433      	add	r3, r6
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	2000      	movs	r0, #0
 80041aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ae:	462a      	mov	r2, r5
 80041b0:	f000 fad2 	bl	8004758 <_realloc_r>
 80041b4:	4606      	mov	r6, r0
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d1e0      	bne.n	800417c <__ssputs_r+0x5c>
 80041ba:	6921      	ldr	r1, [r4, #16]
 80041bc:	4650      	mov	r0, sl
 80041be:	f7ff feb7 	bl	8003f30 <_free_r>
 80041c2:	230c      	movs	r3, #12
 80041c4:	f8ca 3000 	str.w	r3, [sl]
 80041c8:	89a3      	ldrh	r3, [r4, #12]
 80041ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295
 80041d4:	e7e9      	b.n	80041aa <__ssputs_r+0x8a>
	...

080041d8 <_svfiprintf_r>:
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	4698      	mov	r8, r3
 80041de:	898b      	ldrh	r3, [r1, #12]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	b09d      	sub	sp, #116	@ 0x74
 80041e4:	4607      	mov	r7, r0
 80041e6:	460d      	mov	r5, r1
 80041e8:	4614      	mov	r4, r2
 80041ea:	d510      	bpl.n	800420e <_svfiprintf_r+0x36>
 80041ec:	690b      	ldr	r3, [r1, #16]
 80041ee:	b973      	cbnz	r3, 800420e <_svfiprintf_r+0x36>
 80041f0:	2140      	movs	r1, #64	@ 0x40
 80041f2:	f7ff ff09 	bl	8004008 <_malloc_r>
 80041f6:	6028      	str	r0, [r5, #0]
 80041f8:	6128      	str	r0, [r5, #16]
 80041fa:	b930      	cbnz	r0, 800420a <_svfiprintf_r+0x32>
 80041fc:	230c      	movs	r3, #12
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	b01d      	add	sp, #116	@ 0x74
 8004206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420a:	2340      	movs	r3, #64	@ 0x40
 800420c:	616b      	str	r3, [r5, #20]
 800420e:	2300      	movs	r3, #0
 8004210:	9309      	str	r3, [sp, #36]	@ 0x24
 8004212:	2320      	movs	r3, #32
 8004214:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004218:	f8cd 800c 	str.w	r8, [sp, #12]
 800421c:	2330      	movs	r3, #48	@ 0x30
 800421e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80043bc <_svfiprintf_r+0x1e4>
 8004222:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004226:	f04f 0901 	mov.w	r9, #1
 800422a:	4623      	mov	r3, r4
 800422c:	469a      	mov	sl, r3
 800422e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004232:	b10a      	cbz	r2, 8004238 <_svfiprintf_r+0x60>
 8004234:	2a25      	cmp	r2, #37	@ 0x25
 8004236:	d1f9      	bne.n	800422c <_svfiprintf_r+0x54>
 8004238:	ebba 0b04 	subs.w	fp, sl, r4
 800423c:	d00b      	beq.n	8004256 <_svfiprintf_r+0x7e>
 800423e:	465b      	mov	r3, fp
 8004240:	4622      	mov	r2, r4
 8004242:	4629      	mov	r1, r5
 8004244:	4638      	mov	r0, r7
 8004246:	f7ff ff6b 	bl	8004120 <__ssputs_r>
 800424a:	3001      	adds	r0, #1
 800424c:	f000 80a7 	beq.w	800439e <_svfiprintf_r+0x1c6>
 8004250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004252:	445a      	add	r2, fp
 8004254:	9209      	str	r2, [sp, #36]	@ 0x24
 8004256:	f89a 3000 	ldrb.w	r3, [sl]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 809f 	beq.w	800439e <_svfiprintf_r+0x1c6>
 8004260:	2300      	movs	r3, #0
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800426a:	f10a 0a01 	add.w	sl, sl, #1
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	9307      	str	r3, [sp, #28]
 8004272:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004276:	931a      	str	r3, [sp, #104]	@ 0x68
 8004278:	4654      	mov	r4, sl
 800427a:	2205      	movs	r2, #5
 800427c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004280:	484e      	ldr	r0, [pc, #312]	@ (80043bc <_svfiprintf_r+0x1e4>)
 8004282:	f7fb ffcd 	bl	8000220 <memchr>
 8004286:	9a04      	ldr	r2, [sp, #16]
 8004288:	b9d8      	cbnz	r0, 80042c2 <_svfiprintf_r+0xea>
 800428a:	06d0      	lsls	r0, r2, #27
 800428c:	bf44      	itt	mi
 800428e:	2320      	movmi	r3, #32
 8004290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004294:	0711      	lsls	r1, r2, #28
 8004296:	bf44      	itt	mi
 8004298:	232b      	movmi	r3, #43	@ 0x2b
 800429a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800429e:	f89a 3000 	ldrb.w	r3, [sl]
 80042a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a4:	d015      	beq.n	80042d2 <_svfiprintf_r+0xfa>
 80042a6:	9a07      	ldr	r2, [sp, #28]
 80042a8:	4654      	mov	r4, sl
 80042aa:	2000      	movs	r0, #0
 80042ac:	f04f 0c0a 	mov.w	ip, #10
 80042b0:	4621      	mov	r1, r4
 80042b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042b6:	3b30      	subs	r3, #48	@ 0x30
 80042b8:	2b09      	cmp	r3, #9
 80042ba:	d94b      	bls.n	8004354 <_svfiprintf_r+0x17c>
 80042bc:	b1b0      	cbz	r0, 80042ec <_svfiprintf_r+0x114>
 80042be:	9207      	str	r2, [sp, #28]
 80042c0:	e014      	b.n	80042ec <_svfiprintf_r+0x114>
 80042c2:	eba0 0308 	sub.w	r3, r0, r8
 80042c6:	fa09 f303 	lsl.w	r3, r9, r3
 80042ca:	4313      	orrs	r3, r2
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	46a2      	mov	sl, r4
 80042d0:	e7d2      	b.n	8004278 <_svfiprintf_r+0xa0>
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	1d19      	adds	r1, r3, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	9103      	str	r1, [sp, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfbb      	ittet	lt
 80042de:	425b      	neglt	r3, r3
 80042e0:	f042 0202 	orrlt.w	r2, r2, #2
 80042e4:	9307      	strge	r3, [sp, #28]
 80042e6:	9307      	strlt	r3, [sp, #28]
 80042e8:	bfb8      	it	lt
 80042ea:	9204      	strlt	r2, [sp, #16]
 80042ec:	7823      	ldrb	r3, [r4, #0]
 80042ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80042f0:	d10a      	bne.n	8004308 <_svfiprintf_r+0x130>
 80042f2:	7863      	ldrb	r3, [r4, #1]
 80042f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80042f6:	d132      	bne.n	800435e <_svfiprintf_r+0x186>
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9203      	str	r2, [sp, #12]
 8004300:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004304:	3402      	adds	r4, #2
 8004306:	9305      	str	r3, [sp, #20]
 8004308:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043cc <_svfiprintf_r+0x1f4>
 800430c:	7821      	ldrb	r1, [r4, #0]
 800430e:	2203      	movs	r2, #3
 8004310:	4650      	mov	r0, sl
 8004312:	f7fb ff85 	bl	8000220 <memchr>
 8004316:	b138      	cbz	r0, 8004328 <_svfiprintf_r+0x150>
 8004318:	9b04      	ldr	r3, [sp, #16]
 800431a:	eba0 000a 	sub.w	r0, r0, sl
 800431e:	2240      	movs	r2, #64	@ 0x40
 8004320:	4082      	lsls	r2, r0
 8004322:	4313      	orrs	r3, r2
 8004324:	3401      	adds	r4, #1
 8004326:	9304      	str	r3, [sp, #16]
 8004328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800432c:	4824      	ldr	r0, [pc, #144]	@ (80043c0 <_svfiprintf_r+0x1e8>)
 800432e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004332:	2206      	movs	r2, #6
 8004334:	f7fb ff74 	bl	8000220 <memchr>
 8004338:	2800      	cmp	r0, #0
 800433a:	d036      	beq.n	80043aa <_svfiprintf_r+0x1d2>
 800433c:	4b21      	ldr	r3, [pc, #132]	@ (80043c4 <_svfiprintf_r+0x1ec>)
 800433e:	bb1b      	cbnz	r3, 8004388 <_svfiprintf_r+0x1b0>
 8004340:	9b03      	ldr	r3, [sp, #12]
 8004342:	3307      	adds	r3, #7
 8004344:	f023 0307 	bic.w	r3, r3, #7
 8004348:	3308      	adds	r3, #8
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800434e:	4433      	add	r3, r6
 8004350:	9309      	str	r3, [sp, #36]	@ 0x24
 8004352:	e76a      	b.n	800422a <_svfiprintf_r+0x52>
 8004354:	fb0c 3202 	mla	r2, ip, r2, r3
 8004358:	460c      	mov	r4, r1
 800435a:	2001      	movs	r0, #1
 800435c:	e7a8      	b.n	80042b0 <_svfiprintf_r+0xd8>
 800435e:	2300      	movs	r3, #0
 8004360:	3401      	adds	r4, #1
 8004362:	9305      	str	r3, [sp, #20]
 8004364:	4619      	mov	r1, r3
 8004366:	f04f 0c0a 	mov.w	ip, #10
 800436a:	4620      	mov	r0, r4
 800436c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004370:	3a30      	subs	r2, #48	@ 0x30
 8004372:	2a09      	cmp	r2, #9
 8004374:	d903      	bls.n	800437e <_svfiprintf_r+0x1a6>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0c6      	beq.n	8004308 <_svfiprintf_r+0x130>
 800437a:	9105      	str	r1, [sp, #20]
 800437c:	e7c4      	b.n	8004308 <_svfiprintf_r+0x130>
 800437e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004382:	4604      	mov	r4, r0
 8004384:	2301      	movs	r3, #1
 8004386:	e7f0      	b.n	800436a <_svfiprintf_r+0x192>
 8004388:	ab03      	add	r3, sp, #12
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	462a      	mov	r2, r5
 800438e:	4b0e      	ldr	r3, [pc, #56]	@ (80043c8 <_svfiprintf_r+0x1f0>)
 8004390:	a904      	add	r1, sp, #16
 8004392:	4638      	mov	r0, r7
 8004394:	f3af 8000 	nop.w
 8004398:	1c42      	adds	r2, r0, #1
 800439a:	4606      	mov	r6, r0
 800439c:	d1d6      	bne.n	800434c <_svfiprintf_r+0x174>
 800439e:	89ab      	ldrh	r3, [r5, #12]
 80043a0:	065b      	lsls	r3, r3, #25
 80043a2:	f53f af2d 	bmi.w	8004200 <_svfiprintf_r+0x28>
 80043a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043a8:	e72c      	b.n	8004204 <_svfiprintf_r+0x2c>
 80043aa:	ab03      	add	r3, sp, #12
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	462a      	mov	r2, r5
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <_svfiprintf_r+0x1f0>)
 80043b2:	a904      	add	r1, sp, #16
 80043b4:	4638      	mov	r0, r7
 80043b6:	f000 f879 	bl	80044ac <_printf_i>
 80043ba:	e7ed      	b.n	8004398 <_svfiprintf_r+0x1c0>
 80043bc:	08004c88 	.word	0x08004c88
 80043c0:	08004c92 	.word	0x08004c92
 80043c4:	00000000 	.word	0x00000000
 80043c8:	08004121 	.word	0x08004121
 80043cc:	08004c8e 	.word	0x08004c8e

080043d0 <_printf_common>:
 80043d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d4:	4616      	mov	r6, r2
 80043d6:	4698      	mov	r8, r3
 80043d8:	688a      	ldr	r2, [r1, #8]
 80043da:	690b      	ldr	r3, [r1, #16]
 80043dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	bfb8      	it	lt
 80043e4:	4613      	movlt	r3, r2
 80043e6:	6033      	str	r3, [r6, #0]
 80043e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043ec:	4607      	mov	r7, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	b10a      	cbz	r2, 80043f6 <_printf_common+0x26>
 80043f2:	3301      	adds	r3, #1
 80043f4:	6033      	str	r3, [r6, #0]
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	0699      	lsls	r1, r3, #26
 80043fa:	bf42      	ittt	mi
 80043fc:	6833      	ldrmi	r3, [r6, #0]
 80043fe:	3302      	addmi	r3, #2
 8004400:	6033      	strmi	r3, [r6, #0]
 8004402:	6825      	ldr	r5, [r4, #0]
 8004404:	f015 0506 	ands.w	r5, r5, #6
 8004408:	d106      	bne.n	8004418 <_printf_common+0x48>
 800440a:	f104 0a19 	add.w	sl, r4, #25
 800440e:	68e3      	ldr	r3, [r4, #12]
 8004410:	6832      	ldr	r2, [r6, #0]
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	42ab      	cmp	r3, r5
 8004416:	dc26      	bgt.n	8004466 <_printf_common+0x96>
 8004418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	3b00      	subs	r3, #0
 8004420:	bf18      	it	ne
 8004422:	2301      	movne	r3, #1
 8004424:	0692      	lsls	r2, r2, #26
 8004426:	d42b      	bmi.n	8004480 <_printf_common+0xb0>
 8004428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800442c:	4641      	mov	r1, r8
 800442e:	4638      	mov	r0, r7
 8004430:	47c8      	blx	r9
 8004432:	3001      	adds	r0, #1
 8004434:	d01e      	beq.n	8004474 <_printf_common+0xa4>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	f003 0306 	and.w	r3, r3, #6
 800443e:	2b04      	cmp	r3, #4
 8004440:	bf02      	ittt	eq
 8004442:	68e5      	ldreq	r5, [r4, #12]
 8004444:	6833      	ldreq	r3, [r6, #0]
 8004446:	1aed      	subeq	r5, r5, r3
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	bf0c      	ite	eq
 800444c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004450:	2500      	movne	r5, #0
 8004452:	4293      	cmp	r3, r2
 8004454:	bfc4      	itt	gt
 8004456:	1a9b      	subgt	r3, r3, r2
 8004458:	18ed      	addgt	r5, r5, r3
 800445a:	2600      	movs	r6, #0
 800445c:	341a      	adds	r4, #26
 800445e:	42b5      	cmp	r5, r6
 8004460:	d11a      	bne.n	8004498 <_printf_common+0xc8>
 8004462:	2000      	movs	r0, #0
 8004464:	e008      	b.n	8004478 <_printf_common+0xa8>
 8004466:	2301      	movs	r3, #1
 8004468:	4652      	mov	r2, sl
 800446a:	4641      	mov	r1, r8
 800446c:	4638      	mov	r0, r7
 800446e:	47c8      	blx	r9
 8004470:	3001      	adds	r0, #1
 8004472:	d103      	bne.n	800447c <_printf_common+0xac>
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447c:	3501      	adds	r5, #1
 800447e:	e7c6      	b.n	800440e <_printf_common+0x3e>
 8004480:	18e1      	adds	r1, r4, r3
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	2030      	movs	r0, #48	@ 0x30
 8004486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800448a:	4422      	add	r2, r4
 800448c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004494:	3302      	adds	r3, #2
 8004496:	e7c7      	b.n	8004428 <_printf_common+0x58>
 8004498:	2301      	movs	r3, #1
 800449a:	4622      	mov	r2, r4
 800449c:	4641      	mov	r1, r8
 800449e:	4638      	mov	r0, r7
 80044a0:	47c8      	blx	r9
 80044a2:	3001      	adds	r0, #1
 80044a4:	d0e6      	beq.n	8004474 <_printf_common+0xa4>
 80044a6:	3601      	adds	r6, #1
 80044a8:	e7d9      	b.n	800445e <_printf_common+0x8e>
	...

080044ac <_printf_i>:
 80044ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	7e0f      	ldrb	r7, [r1, #24]
 80044b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044b4:	2f78      	cmp	r7, #120	@ 0x78
 80044b6:	4691      	mov	r9, r2
 80044b8:	4680      	mov	r8, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	469a      	mov	sl, r3
 80044be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044c2:	d807      	bhi.n	80044d4 <_printf_i+0x28>
 80044c4:	2f62      	cmp	r7, #98	@ 0x62
 80044c6:	d80a      	bhi.n	80044de <_printf_i+0x32>
 80044c8:	2f00      	cmp	r7, #0
 80044ca:	f000 80d1 	beq.w	8004670 <_printf_i+0x1c4>
 80044ce:	2f58      	cmp	r7, #88	@ 0x58
 80044d0:	f000 80b8 	beq.w	8004644 <_printf_i+0x198>
 80044d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044dc:	e03a      	b.n	8004554 <_printf_i+0xa8>
 80044de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044e2:	2b15      	cmp	r3, #21
 80044e4:	d8f6      	bhi.n	80044d4 <_printf_i+0x28>
 80044e6:	a101      	add	r1, pc, #4	@ (adr r1, 80044ec <_printf_i+0x40>)
 80044e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044ec:	08004545 	.word	0x08004545
 80044f0:	08004559 	.word	0x08004559
 80044f4:	080044d5 	.word	0x080044d5
 80044f8:	080044d5 	.word	0x080044d5
 80044fc:	080044d5 	.word	0x080044d5
 8004500:	080044d5 	.word	0x080044d5
 8004504:	08004559 	.word	0x08004559
 8004508:	080044d5 	.word	0x080044d5
 800450c:	080044d5 	.word	0x080044d5
 8004510:	080044d5 	.word	0x080044d5
 8004514:	080044d5 	.word	0x080044d5
 8004518:	08004657 	.word	0x08004657
 800451c:	08004583 	.word	0x08004583
 8004520:	08004611 	.word	0x08004611
 8004524:	080044d5 	.word	0x080044d5
 8004528:	080044d5 	.word	0x080044d5
 800452c:	08004679 	.word	0x08004679
 8004530:	080044d5 	.word	0x080044d5
 8004534:	08004583 	.word	0x08004583
 8004538:	080044d5 	.word	0x080044d5
 800453c:	080044d5 	.word	0x080044d5
 8004540:	08004619 	.word	0x08004619
 8004544:	6833      	ldr	r3, [r6, #0]
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6032      	str	r2, [r6, #0]
 800454c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004554:	2301      	movs	r3, #1
 8004556:	e09c      	b.n	8004692 <_printf_i+0x1e6>
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	1d19      	adds	r1, r3, #4
 800455e:	6031      	str	r1, [r6, #0]
 8004560:	0606      	lsls	r6, r0, #24
 8004562:	d501      	bpl.n	8004568 <_printf_i+0xbc>
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	e003      	b.n	8004570 <_printf_i+0xc4>
 8004568:	0645      	lsls	r5, r0, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0xb8>
 800456c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004570:	2d00      	cmp	r5, #0
 8004572:	da03      	bge.n	800457c <_printf_i+0xd0>
 8004574:	232d      	movs	r3, #45	@ 0x2d
 8004576:	426d      	negs	r5, r5
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800457c:	4858      	ldr	r0, [pc, #352]	@ (80046e0 <_printf_i+0x234>)
 800457e:	230a      	movs	r3, #10
 8004580:	e011      	b.n	80045a6 <_printf_i+0xfa>
 8004582:	6821      	ldr	r1, [r4, #0]
 8004584:	6833      	ldr	r3, [r6, #0]
 8004586:	0608      	lsls	r0, r1, #24
 8004588:	f853 5b04 	ldr.w	r5, [r3], #4
 800458c:	d402      	bmi.n	8004594 <_printf_i+0xe8>
 800458e:	0649      	lsls	r1, r1, #25
 8004590:	bf48      	it	mi
 8004592:	b2ad      	uxthmi	r5, r5
 8004594:	2f6f      	cmp	r7, #111	@ 0x6f
 8004596:	4852      	ldr	r0, [pc, #328]	@ (80046e0 <_printf_i+0x234>)
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	bf14      	ite	ne
 800459c:	230a      	movne	r3, #10
 800459e:	2308      	moveq	r3, #8
 80045a0:	2100      	movs	r1, #0
 80045a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045a6:	6866      	ldr	r6, [r4, #4]
 80045a8:	60a6      	str	r6, [r4, #8]
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	db05      	blt.n	80045ba <_printf_i+0x10e>
 80045ae:	6821      	ldr	r1, [r4, #0]
 80045b0:	432e      	orrs	r6, r5
 80045b2:	f021 0104 	bic.w	r1, r1, #4
 80045b6:	6021      	str	r1, [r4, #0]
 80045b8:	d04b      	beq.n	8004652 <_printf_i+0x1a6>
 80045ba:	4616      	mov	r6, r2
 80045bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80045c0:	fb03 5711 	mls	r7, r3, r1, r5
 80045c4:	5dc7      	ldrb	r7, [r0, r7]
 80045c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045ca:	462f      	mov	r7, r5
 80045cc:	42bb      	cmp	r3, r7
 80045ce:	460d      	mov	r5, r1
 80045d0:	d9f4      	bls.n	80045bc <_printf_i+0x110>
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d10b      	bne.n	80045ee <_printf_i+0x142>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	07df      	lsls	r7, r3, #31
 80045da:	d508      	bpl.n	80045ee <_printf_i+0x142>
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	6861      	ldr	r1, [r4, #4]
 80045e0:	4299      	cmp	r1, r3
 80045e2:	bfde      	ittt	le
 80045e4:	2330      	movle	r3, #48	@ 0x30
 80045e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045ee:	1b92      	subs	r2, r2, r6
 80045f0:	6122      	str	r2, [r4, #16]
 80045f2:	f8cd a000 	str.w	sl, [sp]
 80045f6:	464b      	mov	r3, r9
 80045f8:	aa03      	add	r2, sp, #12
 80045fa:	4621      	mov	r1, r4
 80045fc:	4640      	mov	r0, r8
 80045fe:	f7ff fee7 	bl	80043d0 <_printf_common>
 8004602:	3001      	adds	r0, #1
 8004604:	d14a      	bne.n	800469c <_printf_i+0x1f0>
 8004606:	f04f 30ff 	mov.w	r0, #4294967295
 800460a:	b004      	add	sp, #16
 800460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	4832      	ldr	r0, [pc, #200]	@ (80046e4 <_printf_i+0x238>)
 800461a:	2778      	movs	r7, #120	@ 0x78
 800461c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	6831      	ldr	r1, [r6, #0]
 8004624:	061f      	lsls	r7, r3, #24
 8004626:	f851 5b04 	ldr.w	r5, [r1], #4
 800462a:	d402      	bmi.n	8004632 <_printf_i+0x186>
 800462c:	065f      	lsls	r7, r3, #25
 800462e:	bf48      	it	mi
 8004630:	b2ad      	uxthmi	r5, r5
 8004632:	6031      	str	r1, [r6, #0]
 8004634:	07d9      	lsls	r1, r3, #31
 8004636:	bf44      	itt	mi
 8004638:	f043 0320 	orrmi.w	r3, r3, #32
 800463c:	6023      	strmi	r3, [r4, #0]
 800463e:	b11d      	cbz	r5, 8004648 <_printf_i+0x19c>
 8004640:	2310      	movs	r3, #16
 8004642:	e7ad      	b.n	80045a0 <_printf_i+0xf4>
 8004644:	4826      	ldr	r0, [pc, #152]	@ (80046e0 <_printf_i+0x234>)
 8004646:	e7e9      	b.n	800461c <_printf_i+0x170>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f023 0320 	bic.w	r3, r3, #32
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	e7f6      	b.n	8004640 <_printf_i+0x194>
 8004652:	4616      	mov	r6, r2
 8004654:	e7bd      	b.n	80045d2 <_printf_i+0x126>
 8004656:	6833      	ldr	r3, [r6, #0]
 8004658:	6825      	ldr	r5, [r4, #0]
 800465a:	6961      	ldr	r1, [r4, #20]
 800465c:	1d18      	adds	r0, r3, #4
 800465e:	6030      	str	r0, [r6, #0]
 8004660:	062e      	lsls	r6, r5, #24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	d501      	bpl.n	800466a <_printf_i+0x1be>
 8004666:	6019      	str	r1, [r3, #0]
 8004668:	e002      	b.n	8004670 <_printf_i+0x1c4>
 800466a:	0668      	lsls	r0, r5, #25
 800466c:	d5fb      	bpl.n	8004666 <_printf_i+0x1ba>
 800466e:	8019      	strh	r1, [r3, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	6123      	str	r3, [r4, #16]
 8004674:	4616      	mov	r6, r2
 8004676:	e7bc      	b.n	80045f2 <_printf_i+0x146>
 8004678:	6833      	ldr	r3, [r6, #0]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	6032      	str	r2, [r6, #0]
 800467e:	681e      	ldr	r6, [r3, #0]
 8004680:	6862      	ldr	r2, [r4, #4]
 8004682:	2100      	movs	r1, #0
 8004684:	4630      	mov	r0, r6
 8004686:	f7fb fdcb 	bl	8000220 <memchr>
 800468a:	b108      	cbz	r0, 8004690 <_printf_i+0x1e4>
 800468c:	1b80      	subs	r0, r0, r6
 800468e:	6060      	str	r0, [r4, #4]
 8004690:	6863      	ldr	r3, [r4, #4]
 8004692:	6123      	str	r3, [r4, #16]
 8004694:	2300      	movs	r3, #0
 8004696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800469a:	e7aa      	b.n	80045f2 <_printf_i+0x146>
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	4632      	mov	r2, r6
 80046a0:	4649      	mov	r1, r9
 80046a2:	4640      	mov	r0, r8
 80046a4:	47d0      	blx	sl
 80046a6:	3001      	adds	r0, #1
 80046a8:	d0ad      	beq.n	8004606 <_printf_i+0x15a>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	079b      	lsls	r3, r3, #30
 80046ae:	d413      	bmi.n	80046d8 <_printf_i+0x22c>
 80046b0:	68e0      	ldr	r0, [r4, #12]
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	4298      	cmp	r0, r3
 80046b6:	bfb8      	it	lt
 80046b8:	4618      	movlt	r0, r3
 80046ba:	e7a6      	b.n	800460a <_printf_i+0x15e>
 80046bc:	2301      	movs	r3, #1
 80046be:	4632      	mov	r2, r6
 80046c0:	4649      	mov	r1, r9
 80046c2:	4640      	mov	r0, r8
 80046c4:	47d0      	blx	sl
 80046c6:	3001      	adds	r0, #1
 80046c8:	d09d      	beq.n	8004606 <_printf_i+0x15a>
 80046ca:	3501      	adds	r5, #1
 80046cc:	68e3      	ldr	r3, [r4, #12]
 80046ce:	9903      	ldr	r1, [sp, #12]
 80046d0:	1a5b      	subs	r3, r3, r1
 80046d2:	42ab      	cmp	r3, r5
 80046d4:	dcf2      	bgt.n	80046bc <_printf_i+0x210>
 80046d6:	e7eb      	b.n	80046b0 <_printf_i+0x204>
 80046d8:	2500      	movs	r5, #0
 80046da:	f104 0619 	add.w	r6, r4, #25
 80046de:	e7f5      	b.n	80046cc <_printf_i+0x220>
 80046e0:	08004c99 	.word	0x08004c99
 80046e4:	08004caa 	.word	0x08004caa

080046e8 <memmove>:
 80046e8:	4288      	cmp	r0, r1
 80046ea:	b510      	push	{r4, lr}
 80046ec:	eb01 0402 	add.w	r4, r1, r2
 80046f0:	d902      	bls.n	80046f8 <memmove+0x10>
 80046f2:	4284      	cmp	r4, r0
 80046f4:	4623      	mov	r3, r4
 80046f6:	d807      	bhi.n	8004708 <memmove+0x20>
 80046f8:	1e43      	subs	r3, r0, #1
 80046fa:	42a1      	cmp	r1, r4
 80046fc:	d008      	beq.n	8004710 <memmove+0x28>
 80046fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004706:	e7f8      	b.n	80046fa <memmove+0x12>
 8004708:	4402      	add	r2, r0
 800470a:	4601      	mov	r1, r0
 800470c:	428a      	cmp	r2, r1
 800470e:	d100      	bne.n	8004712 <memmove+0x2a>
 8004710:	bd10      	pop	{r4, pc}
 8004712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800471a:	e7f7      	b.n	800470c <memmove+0x24>

0800471c <_sbrk_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d06      	ldr	r5, [pc, #24]	@ (8004738 <_sbrk_r+0x1c>)
 8004720:	2300      	movs	r3, #0
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	f7fc fdd4 	bl	80012d4 <_sbrk>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d102      	bne.n	8004736 <_sbrk_r+0x1a>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b103      	cbz	r3, 8004736 <_sbrk_r+0x1a>
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	bd38      	pop	{r3, r4, r5, pc}
 8004738:	20000284 	.word	0x20000284

0800473c <memcpy>:
 800473c:	440a      	add	r2, r1
 800473e:	4291      	cmp	r1, r2
 8004740:	f100 33ff 	add.w	r3, r0, #4294967295
 8004744:	d100      	bne.n	8004748 <memcpy+0xc>
 8004746:	4770      	bx	lr
 8004748:	b510      	push	{r4, lr}
 800474a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004752:	4291      	cmp	r1, r2
 8004754:	d1f9      	bne.n	800474a <memcpy+0xe>
 8004756:	bd10      	pop	{r4, pc}

08004758 <_realloc_r>:
 8004758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475c:	4607      	mov	r7, r0
 800475e:	4614      	mov	r4, r2
 8004760:	460d      	mov	r5, r1
 8004762:	b921      	cbnz	r1, 800476e <_realloc_r+0x16>
 8004764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	4611      	mov	r1, r2
 800476a:	f7ff bc4d 	b.w	8004008 <_malloc_r>
 800476e:	b92a      	cbnz	r2, 800477c <_realloc_r+0x24>
 8004770:	f7ff fbde 	bl	8003f30 <_free_r>
 8004774:	4625      	mov	r5, r4
 8004776:	4628      	mov	r0, r5
 8004778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800477c:	f000 f81a 	bl	80047b4 <_malloc_usable_size_r>
 8004780:	4284      	cmp	r4, r0
 8004782:	4606      	mov	r6, r0
 8004784:	d802      	bhi.n	800478c <_realloc_r+0x34>
 8004786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800478a:	d8f4      	bhi.n	8004776 <_realloc_r+0x1e>
 800478c:	4621      	mov	r1, r4
 800478e:	4638      	mov	r0, r7
 8004790:	f7ff fc3a 	bl	8004008 <_malloc_r>
 8004794:	4680      	mov	r8, r0
 8004796:	b908      	cbnz	r0, 800479c <_realloc_r+0x44>
 8004798:	4645      	mov	r5, r8
 800479a:	e7ec      	b.n	8004776 <_realloc_r+0x1e>
 800479c:	42b4      	cmp	r4, r6
 800479e:	4622      	mov	r2, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	bf28      	it	cs
 80047a4:	4632      	movcs	r2, r6
 80047a6:	f7ff ffc9 	bl	800473c <memcpy>
 80047aa:	4629      	mov	r1, r5
 80047ac:	4638      	mov	r0, r7
 80047ae:	f7ff fbbf 	bl	8003f30 <_free_r>
 80047b2:	e7f1      	b.n	8004798 <_realloc_r+0x40>

080047b4 <_malloc_usable_size_r>:
 80047b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b8:	1f18      	subs	r0, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfbc      	itt	lt
 80047be:	580b      	ldrlt	r3, [r1, r0]
 80047c0:	18c0      	addlt	r0, r0, r3
 80047c2:	4770      	bx	lr

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
