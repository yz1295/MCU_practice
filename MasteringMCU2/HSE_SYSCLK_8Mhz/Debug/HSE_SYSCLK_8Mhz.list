
HSE_SYSCLK_8Mhz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002cb8  08002cb8  00003cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d54  08002d54  00003d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d5c  08002d5c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00003d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00003d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002d64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000005c  08002dc0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08002dc0  0000420c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d50  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001519  00000000  00000000  0000bddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ca  00000000  00000000  0000d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002105a  00000000  00000000  0000de0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fd3  00000000  00000000  0002ee64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7f77  00000000  00000000  00037e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffdae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db8  00000000  00000000  000ffdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c6  00000000  00000000  00101bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002ca0 	.word	0x08002ca0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002ca0 	.word	0x08002ca0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler (void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005f0:	f000 fa1c 	bl	8000a2c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005f4:	f000 fb68 	bl	8000cc8 <HAL_SYSTICK_IRQHandler>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <main>:

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0ac      	sub	sp, #176	@ 0xb0
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef osc_init;
  RCC_ClkInitTypeDef clk_init;
  char msg[100];
  HAL_Init();
 8000602:	f000 f9c1 	bl	8000988 <HAL_Init>
  UART2_Init();
 8000606:	f000 f8b9 	bl	800077c <UART2_Init>

  memset(&osc_init,0,sizeof(osc_init));
 800060a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800060e:	2234      	movs	r2, #52	@ 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fec6 	bl	80023a4 <memset>
  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  osc_init.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000624:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f839 	bl	80016a0 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <main+0x3c>
  {
    Error_handler();
 8000634:	f000 f8c8 	bl	80007c8 <Error_handler>
  }

  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK  | \
 8000638:	230f      	movs	r3, #15
 800063a:	66bb      	str	r3, [r7, #104]	@ 0x68
                       RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2;
  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000640:	2380      	movs	r3, #128	@ 0x80
 8000642:	673b      	str	r3, [r7, #112]	@ 0x70
  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000648:	677b      	str	r3, [r7, #116]	@ 0x74
  clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064e:	67bb      	str	r3, [r7, #120]	@ 0x78

  if( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK)
 8000650:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fcd8 	bl	800100c <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <main+0x6a>
  {
    Error_handler();
 8000662:	f000 f8b1 	bl	80007c8 <Error_handler>
  }

  /*---------------------------- AFTER THIS LINE SYSCLK is SOURCED BY HSE------------------*/

  __HAL_RCC_HSI_DISABLE(); //Saves some current
 8000666:	4b3e      	ldr	r3, [pc, #248]	@ (8000760 <main+0x164>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]

  /* LETS REDO THE SYSTICK CONFIGURATION */

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800066c:	f000 fdb4 	bl	80011d8 <HAL_RCC_GetHCLKFreq>
 8000670:	4603      	mov	r3, r0
 8000672:	4a3c      	ldr	r2, [pc, #240]	@ (8000764 <main+0x168>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	099b      	lsrs	r3, r3, #6
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fafb 	bl	8000c76 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000680:	2004      	movs	r0, #4
 8000682:	f000 fb05 	bl	8000c90 <HAL_SYSTICK_CLKSourceConfig>

  UART2_Init();
 8000686:	f000 f879 	bl	800077c <UART2_Init>

  memset(msg,0,sizeof(msg));
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2264      	movs	r2, #100	@ 0x64
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fe87 	bl	80023a4 <memset>
  sprintf(msg,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 8000696:	f000 fdd3 	bl	8001240 <HAL_RCC_GetSysClockFreq>
 800069a:	4602      	mov	r2, r0
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4932      	ldr	r1, [pc, #200]	@ (8000768 <main+0x16c>)
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fe5d 	bl	8002360 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fdb1 	bl	8000210 <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	1d39      	adds	r1, r7, #4
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	482c      	ldr	r0, [pc, #176]	@ (800076c <main+0x170>)
 80006ba:	f001 fadc 	bl	8001c76 <HAL_UART_Transmit>

  memset(msg,0,sizeof(msg));
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2264      	movs	r2, #100	@ 0x64
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fe6d 	bl	80023a4 <memset>
  sprintf(msg,"HCLK   : %ldHz\r\n",HAL_RCC_GetHCLKFreq());
 80006ca:	f000 fd85 	bl	80011d8 <HAL_RCC_GetHCLKFreq>
 80006ce:	4602      	mov	r2, r0
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4927      	ldr	r1, [pc, #156]	@ (8000770 <main+0x174>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fe43 	bl	8002360 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd97 	bl	8000210 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	1d39      	adds	r1, r7, #4
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	481f      	ldr	r0, [pc, #124]	@ (800076c <main+0x170>)
 80006ee:	f001 fac2 	bl	8001c76 <HAL_UART_Transmit>

  memset(msg,0,sizeof(msg));
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2264      	movs	r2, #100	@ 0x64
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fe53 	bl	80023a4 <memset>
  sprintf(msg,"PCLK1  : %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
 80006fe:	f000 fd77 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 8000702:	4602      	mov	r2, r0
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	491b      	ldr	r1, [pc, #108]	@ (8000774 <main+0x178>)
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fe29 	bl	8002360 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd7d 	bl	8000210 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	1d39      	adds	r1, r7, #4
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	4812      	ldr	r0, [pc, #72]	@ (800076c <main+0x170>)
 8000722:	f001 faa8 	bl	8001c76 <HAL_UART_Transmit>

  memset(msg,0,sizeof(msg));
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2264      	movs	r2, #100	@ 0x64
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fe39 	bl	80023a4 <memset>
  sprintf(msg,"PCLK2  : %ldHz\r\n",HAL_RCC_GetPCLK2Freq());
 8000732:	f000 fd71 	bl	8001218 <HAL_RCC_GetPCLK2Freq>
 8000736:	4602      	mov	r2, r0
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	490f      	ldr	r1, [pc, #60]	@ (8000778 <main+0x17c>)
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fe0f 	bl	8002360 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd63 	bl	8000210 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	1d39      	adds	r1, r7, #4
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <main+0x170>)
 8000756:	f001 fa8e 	bl	8001c76 <HAL_UART_Transmit>

  while(1);
 800075a:	bf00      	nop
 800075c:	e7fd      	b.n	800075a <main+0x15e>
 800075e:	bf00      	nop
 8000760:	42470000 	.word	0x42470000
 8000764:	10624dd3 	.word	0x10624dd3
 8000768:	08002cb8 	.word	0x08002cb8
 800076c:	20000078 	.word	0x20000078
 8000770:	08002ccc 	.word	0x08002ccc
 8000774:	08002ce0 	.word	0x08002ce0
 8000778:	08002cf4 	.word	0x08002cf4

0800077c <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <UART2_Init+0x44>)
 8000782:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <UART2_Init+0x48>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <UART2_Init+0x44>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <UART2_Init+0x44>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <UART2_Init+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <UART2_Init+0x44>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <UART2_Init+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <UART2_Init+0x44>)
 80007a8:	220c      	movs	r2, #12
 80007aa:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <UART2_Init+0x44>)
 80007ae:	f001 fa15 	bl	8001bdc <HAL_UART_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 80007b8:	f000 f806 	bl	80007c8 <Error_handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000078 	.word	0x20000078
 80007c4:	40004400 	.word	0x40004400

080007c8 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  while(1);
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_handler+0x4>

080007d0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 fa19 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <HAL_MspInit+0x40>)
 80007dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007de:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <HAL_MspInit+0x40>)
 80007e0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80007e4:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	f06f 000b 	mvn.w	r0, #11
 80007ee:	f000 fa18 	bl	8000c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	f06f 000a 	mvn.w	r0, #10
 80007fa:	f000 fa12 	bl	8000c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	f06f 0009 	mvn.w	r0, #9
 8000806:	f000 fa0c 	bl	8000c22 <HAL_NVIC_SetPriority>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <HAL_UART_MspInit+0x88>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a1d      	ldr	r2, [pc, #116]	@ (800089c <HAL_UART_MspInit+0x88>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <HAL_UART_MspInit+0x88>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <HAL_UART_MspInit+0x88>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000840:	4a16      	ldr	r2, [pc, #88]	@ (800089c <HAL_UART_MspInit+0x88>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6313      	str	r3, [r2, #48]	@ 0x30
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <HAL_UART_MspInit+0x88>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 8000854:	2304      	movs	r3, #4
 8000856:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000864:	2307      	movs	r3, #7
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <HAL_UART_MspInit+0x8c>)
 8000870:	f000 fa38 	bl	8000ce4 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000874:	2308      	movs	r3, #8
 8000876:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <HAL_UART_MspInit+0x8c>)
 8000880:	f000 fa30 	bl	8000ce4 <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000884:	2026      	movs	r0, #38	@ 0x26
 8000886:	f000 f9e8 	bl	8000c5a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	2026      	movs	r0, #38	@ 0x26
 8000890:	f000 f9c7 	bl	8000c22 <HAL_NVIC_SetPriority>
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	@ 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000

080008a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ac:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <_sbrk+0x5c>)
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <_sbrk+0x60>)
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <_sbrk+0x64>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	@ (800090c <_sbrk+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d207      	bcs.n	80008e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d4:	f001 fd6e 	bl	80023b4 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	e009      	b.n	80008f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <_sbrk+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20020000 	.word	0x20020000
 8000904:	00000400 	.word	0x00000400
 8000908:	200000bc 	.word	0x200000bc
 800090c:	20000210 	.word	0x20000210

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800096c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	@ (8000970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	@ (8000974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	@ (8000980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800095e:	f7ff ffd7 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f001 fd2d 	bl	80023c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fe49 	bl	80005fc <main>
  bx  lr    
 800096a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800096c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000978:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 800097c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000980:	2000020c 	.word	0x2000020c

08000984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <HAL_Init+0x40>)
 8000992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <HAL_Init+0x40>)
 800099e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <HAL_Init+0x40>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f92b 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff ff08 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023c00 	.word	0x40023c00

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f943 	bl	8000c76 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f90b 	bl	8000c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	@ (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	200000c0 	.word	0x200000c0

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	200000c0 	.word	0x200000c0

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	@ (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	@ (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	@ (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	@ 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	@ 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd8:	d301      	bcc.n	8000bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00f      	b.n	8000bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <SysTick_Config+0x40>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be6:	210f      	movs	r1, #15
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f7ff ff8e 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <SysTick_Config+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf6:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <SysTick_Config+0x40>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff29 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c34:	f7ff ff3e 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff8e 	bl	8000b60 <NVIC_EncodePriority>
 8000c44:	4602      	mov	r2, r0
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff5d 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff31 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffa2 	bl	8000bc8 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d106      	bne.n	8000cac <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a08      	ldr	r2, [pc, #32]	@ (8000cc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000caa:	e005      	b.n	8000cb8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cb2:	f023 0304 	bic.w	r3, r3, #4
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ccc:	f000 f802 	bl	8000cd4 <HAL_SYSTICK_Callback>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	@ 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	e165      	b.n	8000fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d00:	2201      	movs	r2, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	f040 8154 	bne.w	8000fc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d005      	beq.n	8000d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d130      	bne.n	8000d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	091b      	lsrs	r3, r3, #4
 8000d82:	f003 0201 	and.w	r2, r3, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d017      	beq.n	8000dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d123      	bne.n	8000e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	220f      	movs	r2, #15
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	08da      	lsrs	r2, r3, #3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	69b9      	ldr	r1, [r7, #24]
 8000e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0203 	and.w	r2, r3, #3
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80ae 	beq.w	8000fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	4a5c      	ldr	r2, [pc, #368]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e86:	4a58      	ldr	r2, [pc, #352]	@ (8000fe8 <HAL_GPIO_Init+0x304>)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4f      	ldr	r2, [pc, #316]	@ (8000fec <HAL_GPIO_Init+0x308>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d025      	beq.n	8000efe <HAL_GPIO_Init+0x21a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8000ff0 <HAL_GPIO_Init+0x30c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x216>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8000ff4 <HAL_GPIO_Init+0x310>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x212>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8000ff8 <HAL_GPIO_Init+0x314>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x20e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8000ffc <HAL_GPIO_Init+0x318>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x20a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8001000 <HAL_GPIO_Init+0x31c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x206>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a49      	ldr	r2, [pc, #292]	@ (8001004 <HAL_GPIO_Init+0x320>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x202>
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	e00c      	b.n	8000f00 <HAL_GPIO_Init+0x21c>
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	e00a      	b.n	8000f00 <HAL_GPIO_Init+0x21c>
 8000eea:	2305      	movs	r3, #5
 8000eec:	e008      	b.n	8000f00 <HAL_GPIO_Init+0x21c>
 8000eee:	2304      	movs	r3, #4
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x21c>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x21c>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x21c>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x21c>
 8000efe:	2300      	movs	r3, #0
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f10:	4935      	ldr	r1, [pc, #212]	@ (8000fe8 <HAL_GPIO_Init+0x304>)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001008 <HAL_GPIO_Init+0x324>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f42:	4a31      	ldr	r2, [pc, #196]	@ (8001008 <HAL_GPIO_Init+0x324>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f48:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <HAL_GPIO_Init+0x324>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6c:	4a26      	ldr	r2, [pc, #152]	@ (8001008 <HAL_GPIO_Init+0x324>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f72:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <HAL_GPIO_Init+0x324>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f96:	4a1c      	ldr	r2, [pc, #112]	@ (8001008 <HAL_GPIO_Init+0x324>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <HAL_GPIO_Init+0x324>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc0:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <HAL_GPIO_Init+0x324>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	f67f ae96 	bls.w	8000d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40021400 	.word	0x40021400
 8001004:	40021800 	.word	0x40021800
 8001008:	40013c00 	.word	0x40013c00

0800100c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e0cc      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001020:	4b68      	ldr	r3, [pc, #416]	@ (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d90c      	bls.n	8001048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102e:	4b65      	ldr	r3, [pc, #404]	@ (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d001      	beq.n	8001048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0b8      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001060:	4b59      	ldr	r3, [pc, #356]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a58      	ldr	r2, [pc, #352]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800106a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001078:	4b53      	ldr	r3, [pc, #332]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a52      	ldr	r2, [pc, #328]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001084:	4b50      	ldr	r3, [pc, #320]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	494d      	ldr	r1, [pc, #308]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	4313      	orrs	r3, r2
 8001094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d044      	beq.n	800112c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b47      	ldr	r3, [pc, #284]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d119      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e07f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d003      	beq.n	80010ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d107      	bne.n	80010da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ca:	4b3f      	ldr	r3, [pc, #252]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e06f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e067      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ea:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f023 0203 	bic.w	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4934      	ldr	r1, [pc, #208]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010fc:	f7ff fcaa 	bl	8000a54 <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	e00a      	b.n	800111a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001104:	f7ff fca6 	bl	8000a54 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001112:	4293      	cmp	r3, r2
 8001114:	d901      	bls.n	800111a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e04f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111a:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 020c 	and.w	r2, r3, #12
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	429a      	cmp	r2, r3
 800112a:	d1eb      	bne.n	8001104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800112c:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d20c      	bcs.n	8001154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e032      	b.n	80011ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4916      	ldr	r1, [pc, #88]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800117e:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	490e      	ldr	r1, [pc, #56]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	4313      	orrs	r3, r2
 8001190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001192:	f000 f855 	bl	8001240 <HAL_RCC_GetSysClockFreq>
 8001196:	4602      	mov	r2, r0
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	490a      	ldr	r1, [pc, #40]	@ (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	5ccb      	ldrb	r3, [r1, r3]
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <HAL_RCC_ClockConfig+0x1c8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fc0a 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00
 80011c8:	40023800 	.word	0x40023800
 80011cc:	08002d08 	.word	0x08002d08
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <HAL_RCC_GetHCLKFreq+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000

080011f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011f4:	f7ff fff0 	bl	80011d8 <HAL_RCC_GetHCLKFreq>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	0a9b      	lsrs	r3, r3, #10
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	4903      	ldr	r1, [pc, #12]	@ (8001214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001206:	5ccb      	ldrb	r3, [r1, r3]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	08002d18 	.word	0x08002d18

08001218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800121c:	f7ff ffdc 	bl	80011d8 <HAL_RCC_GetHCLKFreq>
 8001220:	4602      	mov	r2, r0
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	0b5b      	lsrs	r3, r3, #13
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	4903      	ldr	r1, [pc, #12]	@ (800123c <HAL_RCC_GetPCLK2Freq+0x24>)
 800122e:	5ccb      	ldrb	r3, [r1, r3]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	08002d18 	.word	0x08002d18

08001240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001244:	b0ae      	sub	sp, #184	@ 0xb8
 8001246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001266:	4bcb      	ldr	r3, [pc, #812]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b0c      	cmp	r3, #12
 8001270:	f200 8206 	bhi.w	8001680 <HAL_RCC_GetSysClockFreq+0x440>
 8001274:	a201      	add	r2, pc, #4	@ (adr r2, 800127c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	080012b1 	.word	0x080012b1
 8001280:	08001681 	.word	0x08001681
 8001284:	08001681 	.word	0x08001681
 8001288:	08001681 	.word	0x08001681
 800128c:	080012b9 	.word	0x080012b9
 8001290:	08001681 	.word	0x08001681
 8001294:	08001681 	.word	0x08001681
 8001298:	08001681 	.word	0x08001681
 800129c:	080012c1 	.word	0x080012c1
 80012a0:	08001681 	.word	0x08001681
 80012a4:	08001681 	.word	0x08001681
 80012a8:	08001681 	.word	0x08001681
 80012ac:	080014b1 	.word	0x080014b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012b0:	4bb9      	ldr	r3, [pc, #740]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x358>)
 80012b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80012b6:	e1e7      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012b8:	4bb8      	ldr	r3, [pc, #736]	@ (800159c <HAL_RCC_GetSysClockFreq+0x35c>)
 80012ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80012be:	e1e3      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c0:	4bb4      	ldr	r3, [pc, #720]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012cc:	4bb1      	ldr	r3, [pc, #708]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d071      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012d8:	4bae      	ldr	r3, [pc, #696]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	2200      	movs	r2, #0
 80012e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80012e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80012e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80012fe:	4622      	mov	r2, r4
 8001300:	462b      	mov	r3, r5
 8001302:	f04f 0000 	mov.w	r0, #0
 8001306:	f04f 0100 	mov.w	r1, #0
 800130a:	0159      	lsls	r1, r3, #5
 800130c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001310:	0150      	lsls	r0, r2, #5
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4621      	mov	r1, r4
 8001318:	1a51      	subs	r1, r2, r1
 800131a:	6439      	str	r1, [r7, #64]	@ 0x40
 800131c:	4629      	mov	r1, r5
 800131e:	eb63 0301 	sbc.w	r3, r3, r1
 8001322:	647b      	str	r3, [r7, #68]	@ 0x44
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001330:	4649      	mov	r1, r9
 8001332:	018b      	lsls	r3, r1, #6
 8001334:	4641      	mov	r1, r8
 8001336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800133a:	4641      	mov	r1, r8
 800133c:	018a      	lsls	r2, r1, #6
 800133e:	4641      	mov	r1, r8
 8001340:	1a51      	subs	r1, r2, r1
 8001342:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001344:	4649      	mov	r1, r9
 8001346:	eb63 0301 	sbc.w	r3, r3, r1
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001358:	4649      	mov	r1, r9
 800135a:	00cb      	lsls	r3, r1, #3
 800135c:	4641      	mov	r1, r8
 800135e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001362:	4641      	mov	r1, r8
 8001364:	00ca      	lsls	r2, r1, #3
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	4603      	mov	r3, r0
 800136c:	4622      	mov	r2, r4
 800136e:	189b      	adds	r3, r3, r2
 8001370:	633b      	str	r3, [r7, #48]	@ 0x30
 8001372:	462b      	mov	r3, r5
 8001374:	460a      	mov	r2, r1
 8001376:	eb42 0303 	adc.w	r3, r2, r3
 800137a:	637b      	str	r3, [r7, #52]	@ 0x34
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001388:	4629      	mov	r1, r5
 800138a:	024b      	lsls	r3, r1, #9
 800138c:	4621      	mov	r1, r4
 800138e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001392:	4621      	mov	r1, r4
 8001394:	024a      	lsls	r2, r1, #9
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800139e:	2200      	movs	r2, #0
 80013a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80013a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80013a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80013ac:	f7fe ff88 	bl	80002c0 <__aeabi_uldivmod>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4613      	mov	r3, r2
 80013b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013ba:	e067      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013bc:	4b75      	ldr	r3, [pc, #468]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	099b      	lsrs	r3, r3, #6
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80013c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80013cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80013d6:	2300      	movs	r3, #0
 80013d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80013de:	4622      	mov	r2, r4
 80013e0:	462b      	mov	r3, r5
 80013e2:	f04f 0000 	mov.w	r0, #0
 80013e6:	f04f 0100 	mov.w	r1, #0
 80013ea:	0159      	lsls	r1, r3, #5
 80013ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013f0:	0150      	lsls	r0, r2, #5
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4621      	mov	r1, r4
 80013f8:	1a51      	subs	r1, r2, r1
 80013fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013fc:	4629      	mov	r1, r5
 80013fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001410:	4649      	mov	r1, r9
 8001412:	018b      	lsls	r3, r1, #6
 8001414:	4641      	mov	r1, r8
 8001416:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800141a:	4641      	mov	r1, r8
 800141c:	018a      	lsls	r2, r1, #6
 800141e:	4641      	mov	r1, r8
 8001420:	ebb2 0a01 	subs.w	sl, r2, r1
 8001424:	4649      	mov	r1, r9
 8001426:	eb63 0b01 	sbc.w	fp, r3, r1
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001436:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800143a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800143e:	4692      	mov	sl, r2
 8001440:	469b      	mov	fp, r3
 8001442:	4623      	mov	r3, r4
 8001444:	eb1a 0303 	adds.w	r3, sl, r3
 8001448:	623b      	str	r3, [r7, #32]
 800144a:	462b      	mov	r3, r5
 800144c:	eb4b 0303 	adc.w	r3, fp, r3
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800145e:	4629      	mov	r1, r5
 8001460:	028b      	lsls	r3, r1, #10
 8001462:	4621      	mov	r1, r4
 8001464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001468:	4621      	mov	r1, r4
 800146a:	028a      	lsls	r2, r1, #10
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001474:	2200      	movs	r2, #0
 8001476:	673b      	str	r3, [r7, #112]	@ 0x70
 8001478:	677a      	str	r2, [r7, #116]	@ 0x74
 800147a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800147e:	f7fe ff1f 	bl	80002c0 <__aeabi_uldivmod>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4613      	mov	r3, r2
 8001488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800148c:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	3301      	adds	r3, #1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800149e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014ae:	e0eb      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014b0:	4b38      	ldr	r3, [pc, #224]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014bc:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d06b      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c8:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	099b      	lsrs	r3, r3, #6
 80014ce:	2200      	movs	r2, #0
 80014d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80014d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014da:	663b      	str	r3, [r7, #96]	@ 0x60
 80014dc:	2300      	movs	r3, #0
 80014de:	667b      	str	r3, [r7, #100]	@ 0x64
 80014e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80014e4:	4622      	mov	r2, r4
 80014e6:	462b      	mov	r3, r5
 80014e8:	f04f 0000 	mov.w	r0, #0
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	0159      	lsls	r1, r3, #5
 80014f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f6:	0150      	lsls	r0, r2, #5
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4621      	mov	r1, r4
 80014fe:	1a51      	subs	r1, r2, r1
 8001500:	61b9      	str	r1, [r7, #24]
 8001502:	4629      	mov	r1, r5
 8001504:	eb63 0301 	sbc.w	r3, r3, r1
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001516:	4659      	mov	r1, fp
 8001518:	018b      	lsls	r3, r1, #6
 800151a:	4651      	mov	r1, sl
 800151c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001520:	4651      	mov	r1, sl
 8001522:	018a      	lsls	r2, r1, #6
 8001524:	4651      	mov	r1, sl
 8001526:	ebb2 0801 	subs.w	r8, r2, r1
 800152a:	4659      	mov	r1, fp
 800152c:	eb63 0901 	sbc.w	r9, r3, r1
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800153c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001540:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001544:	4690      	mov	r8, r2
 8001546:	4699      	mov	r9, r3
 8001548:	4623      	mov	r3, r4
 800154a:	eb18 0303 	adds.w	r3, r8, r3
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	462b      	mov	r3, r5
 8001552:	eb49 0303 	adc.w	r3, r9, r3
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001564:	4629      	mov	r1, r5
 8001566:	024b      	lsls	r3, r1, #9
 8001568:	4621      	mov	r1, r4
 800156a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800156e:	4621      	mov	r1, r4
 8001570:	024a      	lsls	r2, r1, #9
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800157a:	2200      	movs	r2, #0
 800157c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800157e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001580:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001584:	f7fe fe9c 	bl	80002c0 <__aeabi_uldivmod>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4613      	mov	r3, r2
 800158e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001592:	e065      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x420>
 8001594:	40023800 	.word	0x40023800
 8001598:	00f42400 	.word	0x00f42400
 800159c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x458>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	4611      	mov	r1, r2
 80015ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80015b2:	2300      	movs	r3, #0
 80015b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80015b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80015ba:	4642      	mov	r2, r8
 80015bc:	464b      	mov	r3, r9
 80015be:	f04f 0000 	mov.w	r0, #0
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	0159      	lsls	r1, r3, #5
 80015c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015cc:	0150      	lsls	r0, r2, #5
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4641      	mov	r1, r8
 80015d4:	1a51      	subs	r1, r2, r1
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	4649      	mov	r1, r9
 80015da:	eb63 0301 	sbc.w	r3, r3, r1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80015ec:	4659      	mov	r1, fp
 80015ee:	018b      	lsls	r3, r1, #6
 80015f0:	4651      	mov	r1, sl
 80015f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015f6:	4651      	mov	r1, sl
 80015f8:	018a      	lsls	r2, r1, #6
 80015fa:	4651      	mov	r1, sl
 80015fc:	1a54      	subs	r4, r2, r1
 80015fe:	4659      	mov	r1, fp
 8001600:	eb63 0501 	sbc.w	r5, r3, r1
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	00eb      	lsls	r3, r5, #3
 800160e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001612:	00e2      	lsls	r2, r4, #3
 8001614:	4614      	mov	r4, r2
 8001616:	461d      	mov	r5, r3
 8001618:	4643      	mov	r3, r8
 800161a:	18e3      	adds	r3, r4, r3
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	464b      	mov	r3, r9
 8001620:	eb45 0303 	adc.w	r3, r5, r3
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001632:	4629      	mov	r1, r5
 8001634:	028b      	lsls	r3, r1, #10
 8001636:	4621      	mov	r1, r4
 8001638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800163c:	4621      	mov	r1, r4
 800163e:	028a      	lsls	r2, r1, #10
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001648:	2200      	movs	r2, #0
 800164a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800164c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800164e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001652:	f7fe fe35 	bl	80002c0 <__aeabi_uldivmod>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4613      	mov	r3, r2
 800165c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001660:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x458>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	0f1b      	lsrs	r3, r3, #28
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800166e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800167e:	e003      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800168c:	4618      	mov	r0, r3
 800168e:	37b8      	adds	r7, #184	@ 0xb8
 8001690:	46bd      	mov	sp, r7
 8001692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	00f42400 	.word	0x00f42400

080016a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e28d      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8083 	beq.w	80017c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016c0:	4b94      	ldr	r3, [pc, #592]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d019      	beq.n	8001700 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016cc:	4b91      	ldr	r3, [pc, #580]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016e4:	d00c      	beq.n	8001700 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d112      	bne.n	8001718 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f2:	4b88      	ldr	r3, [pc, #544]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4b84      	ldr	r3, [pc, #528]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d05b      	beq.n	80017c4 <HAL_RCC_OscConfig+0x124>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d157      	bne.n	80017c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e25a      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x90>
 8001722:	4b7c      	ldr	r3, [pc, #496]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7b      	ldr	r2, [pc, #492]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e01d      	b.n	800176c <HAL_RCC_OscConfig+0xcc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0xb4>
 800173a:	4b76      	ldr	r3, [pc, #472]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a75      	ldr	r2, [pc, #468]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b73      	ldr	r3, [pc, #460]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a72      	ldr	r2, [pc, #456]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xcc>
 8001754:	4b6f      	ldr	r3, [pc, #444]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a6e      	ldr	r2, [pc, #440]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b6c      	ldr	r3, [pc, #432]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6b      	ldr	r2, [pc, #428]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff f96e 	bl	8000a54 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff f96a 	bl	8000a54 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e21f      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b61      	ldr	r3, [pc, #388]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0xdc>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f95a 	bl	8000a54 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff f956 	bl	8000a54 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	@ 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e20b      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b57      	ldr	r3, [pc, #348]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x104>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d06f      	beq.n	80018b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017d2:	4b50      	ldr	r3, [pc, #320]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d017      	beq.n	800180e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017de:	4b4d      	ldr	r3, [pc, #308]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d105      	bne.n	80017f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f6:	4b47      	ldr	r3, [pc, #284]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d11c      	bne.n	800183c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001802:	4b44      	ldr	r3, [pc, #272]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d116      	bne.n	800183c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	4b41      	ldr	r3, [pc, #260]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x186>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1d3      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4937      	ldr	r1, [pc, #220]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	e03a      	b.n	80018b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d020      	beq.n	8001886 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001844:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <HAL_RCC_OscConfig+0x278>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff f903 	bl	8000a54 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff f8ff 	bl	8000a54 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e1b4      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4925      	ldr	r1, [pc, #148]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <HAL_RCC_OscConfig+0x278>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f8e2 	bl	8000a54 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff f8de 	bl	8000a54 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e193      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d036      	beq.n	800192c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d016      	beq.n	80018f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_RCC_OscConfig+0x27c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff f8c2 	bl	8000a54 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff f8be 	bl	8000a54 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e173      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_RCC_OscConfig+0x274>)
 80018e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x234>
 80018f2:	e01b      	b.n	800192c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_RCC_OscConfig+0x27c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff f8ab 	bl	8000a54 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	e00e      	b.n	8001920 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff f8a7 	bl	8000a54 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d907      	bls.n	8001920 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e15c      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
 8001914:	40023800 	.word	0x40023800
 8001918:	42470000 	.word	0x42470000
 800191c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	4b8a      	ldr	r3, [pc, #552]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ea      	bne.n	8001902 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 8097 	beq.w	8001a68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193e:	4b83      	ldr	r3, [pc, #524]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10f      	bne.n	800196a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	4a7e      	ldr	r2, [pc, #504]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	@ 0x40
 800195a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001966:	2301      	movs	r3, #1
 8001968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196a:	4b79      	ldr	r3, [pc, #484]	@ (8001b50 <HAL_RCC_OscConfig+0x4b0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d118      	bne.n	80019a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001976:	4b76      	ldr	r3, [pc, #472]	@ (8001b50 <HAL_RCC_OscConfig+0x4b0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a75      	ldr	r2, [pc, #468]	@ (8001b50 <HAL_RCC_OscConfig+0x4b0>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001982:	f7ff f867 	bl	8000a54 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198a:	f7ff f863 	bl	8000a54 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e118      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	4b6c      	ldr	r3, [pc, #432]	@ (8001b50 <HAL_RCC_OscConfig+0x4b0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x31e>
 80019b0:	4b66      	ldr	r3, [pc, #408]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	4a65      	ldr	r2, [pc, #404]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80019bc:	e01c      	b.n	80019f8 <HAL_RCC_OscConfig+0x358>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b05      	cmp	r3, #5
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x340>
 80019c6:	4b61      	ldr	r3, [pc, #388]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ca:	4a60      	ldr	r2, [pc, #384]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d2:	4b5e      	ldr	r3, [pc, #376]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d6:	4a5d      	ldr	r2, [pc, #372]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_OscConfig+0x358>
 80019e0:	4b5a      	ldr	r3, [pc, #360]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e4:	4a59      	ldr	r2, [pc, #356]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ec:	4b57      	ldr	r3, [pc, #348]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f0:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 80019f2:	f023 0304 	bic.w	r3, r3, #4
 80019f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d015      	beq.n	8001a2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f828 	bl	8000a54 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f824 	bl	8000a54 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0d7      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0ee      	beq.n	8001a08 <HAL_RCC_OscConfig+0x368>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f812 	bl	8000a54 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff f80e 	bl	8000a54 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0c1      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4a:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ee      	bne.n	8001a34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	4a3a      	ldr	r2, [pc, #232]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80ad 	beq.w	8001bcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a72:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d060      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d145      	bne.n	8001b12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <HAL_RCC_OscConfig+0x4b4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7fe ffe2 	bl	8000a54 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a94:	f7fe ffde 	bl	8000a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e093      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	4b29      	ldr	r3, [pc, #164]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	019b      	lsls	r3, r3, #6
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	071b      	lsls	r3, r3, #28
 8001ade:	491b      	ldr	r1, [pc, #108]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <HAL_RCC_OscConfig+0x4b4>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7fe ffb3 	bl	8000a54 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af2:	f7fe ffaf 	bl	8000a54 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e064      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x452>
 8001b10:	e05c      	b.n	8001bcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <HAL_RCC_OscConfig+0x4b4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7fe ff9c 	bl	8000a54 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe ff98 	bl	8000a54 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e04d      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x480>
 8001b3e:	e045      	b.n	8001bcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e040      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40007000 	.word	0x40007000
 8001b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <HAL_RCC_OscConfig+0x538>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d030      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d129      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d122      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d119      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9e:	085b      	lsrs	r3, r3, #1
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e03f      	b.n	8001c6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe fe06 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f929 	bl	8001e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b08a      	sub	sp, #40	@ 0x28
 8001c7a:	af02      	add	r7, sp, #8
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	4613      	mov	r3, r2
 8001c84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d17c      	bne.n	8001d90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_UART_Transmit+0x2c>
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e075      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_UART_Transmit+0x3e>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e06e      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2221      	movs	r2, #33	@ 0x21
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cca:	f7fe fec3 	bl	8000a54 <HAL_GetTick>
 8001cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	88fa      	ldrh	r2, [r7, #6]
 8001cd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_UART_Transmit+0x82>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d104      	bne.n	8001cf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	e003      	b.n	8001d00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001d08:	e02a      	b.n	8001d60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2200      	movs	r2, #0
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f840 	bl	8001d9a <UART_WaitOnFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e036      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10b      	bne.n	8001d42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e007      	b.n	8001d52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1cf      	bne.n	8001d0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	2140      	movs	r1, #64	@ 0x40
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f810 	bl	8001d9a <UART_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e006      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b090      	sub	sp, #64	@ 0x40
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4613      	mov	r3, r2
 8001da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001daa:	e050      	b.n	8001e4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db2:	d04c      	beq.n	8001e4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <UART_WaitOnFlagUntilTimeout+0x30>
 8001dba:	f7fe fe4b 	bl	8000a54 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d241      	bcs.n	8001e4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	330c      	adds	r3, #12
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	e853 3f00 	ldrex	r3, [r3]
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	330c      	adds	r3, #12
 8001de8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dea:	637a      	str	r2, [r7, #52]	@ 0x34
 8001dec:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001df0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001df2:	e841 2300 	strex	r3, r2, [r1]
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1e5      	bne.n	8001dca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3314      	adds	r3, #20
 8001e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	e853 3f00 	ldrex	r3, [r3]
 8001e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3314      	adds	r3, #20
 8001e1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e1e:	623a      	str	r2, [r7, #32]
 8001e20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e22:	69f9      	ldr	r1, [r7, #28]
 8001e24:	6a3a      	ldr	r2, [r7, #32]
 8001e26:	e841 2300 	strex	r3, r2, [r1]
 8001e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1e5      	bne.n	8001dfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e00f      	b.n	8001e6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4013      	ands	r3, r2
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d09f      	beq.n	8001dac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3740      	adds	r7, #64	@ 0x40
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e7c:	b0c0      	sub	sp, #256	@ 0x100
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e94:	68d9      	ldr	r1, [r3, #12]
 8001e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	ea40 0301 	orr.w	r3, r0, r1
 8001ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001ed0:	f021 010c 	bic.w	r1, r1, #12
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ef2:	6999      	ldr	r1, [r3, #24]
 8001ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	ea40 0301 	orr.w	r3, r0, r1
 8001efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b8f      	ldr	r3, [pc, #572]	@ (8002144 <UART_SetConfig+0x2cc>)
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d005      	beq.n	8001f18 <UART_SetConfig+0xa0>
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b8d      	ldr	r3, [pc, #564]	@ (8002148 <UART_SetConfig+0x2d0>)
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d104      	bne.n	8001f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f18:	f7ff f97e 	bl	8001218 <HAL_RCC_GetPCLK2Freq>
 8001f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001f20:	e003      	b.n	8001f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f22:	f7ff f965 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 8001f26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f34:	f040 810c 	bne.w	8002150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	462b      	mov	r3, r5
 8001f4e:	1891      	adds	r1, r2, r2
 8001f50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f52:	415b      	adcs	r3, r3
 8001f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	eb12 0801 	adds.w	r8, r2, r1
 8001f60:	4629      	mov	r1, r5
 8001f62:	eb43 0901 	adc.w	r9, r3, r1
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f7a:	4690      	mov	r8, r2
 8001f7c:	4699      	mov	r9, r3
 8001f7e:	4623      	mov	r3, r4
 8001f80:	eb18 0303 	adds.w	r3, r8, r3
 8001f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f88:	462b      	mov	r3, r5
 8001f8a:	eb49 0303 	adc.w	r3, r9, r3
 8001f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	18db      	adds	r3, r3, r3
 8001faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fac:	4613      	mov	r3, r2
 8001fae:	eb42 0303 	adc.w	r3, r2, r3
 8001fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001fbc:	f7fe f980 	bl	80002c0 <__aeabi_uldivmod>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4b61      	ldr	r3, [pc, #388]	@ (800214c <UART_SetConfig+0x2d4>)
 8001fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	011c      	lsls	r4, r3, #4
 8001fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001fe0:	4642      	mov	r2, r8
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	1891      	adds	r1, r2, r2
 8001fe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fe8:	415b      	adcs	r3, r3
 8001fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8001ff6:	4649      	mov	r1, r9
 8001ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800200c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002010:	4692      	mov	sl, r2
 8002012:	469b      	mov	fp, r3
 8002014:	4643      	mov	r3, r8
 8002016:	eb1a 0303 	adds.w	r3, sl, r3
 800201a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800201e:	464b      	mov	r3, r9
 8002020:	eb4b 0303 	adc.w	r3, fp, r3
 8002024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002034:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800203c:	460b      	mov	r3, r1
 800203e:	18db      	adds	r3, r3, r3
 8002040:	643b      	str	r3, [r7, #64]	@ 0x40
 8002042:	4613      	mov	r3, r2
 8002044:	eb42 0303 	adc.w	r3, r2, r3
 8002048:	647b      	str	r3, [r7, #68]	@ 0x44
 800204a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800204e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002052:	f7fe f935 	bl	80002c0 <__aeabi_uldivmod>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4611      	mov	r1, r2
 800205c:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <UART_SetConfig+0x2d4>)
 800205e:	fba3 2301 	umull	r2, r3, r3, r1
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2264      	movs	r2, #100	@ 0x64
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	1acb      	subs	r3, r1, r3
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002072:	4b36      	ldr	r3, [pc, #216]	@ (800214c <UART_SetConfig+0x2d4>)
 8002074:	fba3 2302 	umull	r2, r3, r3, r2
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002080:	441c      	add	r4, r3
 8002082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002086:	2200      	movs	r2, #0
 8002088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800208c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002094:	4642      	mov	r2, r8
 8002096:	464b      	mov	r3, r9
 8002098:	1891      	adds	r1, r2, r2
 800209a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800209c:	415b      	adcs	r3, r3
 800209e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80020a4:	4641      	mov	r1, r8
 80020a6:	1851      	adds	r1, r2, r1
 80020a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80020aa:	4649      	mov	r1, r9
 80020ac:	414b      	adcs	r3, r1
 80020ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80020bc:	4659      	mov	r1, fp
 80020be:	00cb      	lsls	r3, r1, #3
 80020c0:	4651      	mov	r1, sl
 80020c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020c6:	4651      	mov	r1, sl
 80020c8:	00ca      	lsls	r2, r1, #3
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	4642      	mov	r2, r8
 80020d2:	189b      	adds	r3, r3, r2
 80020d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020d8:	464b      	mov	r3, r9
 80020da:	460a      	mov	r2, r1
 80020dc:	eb42 0303 	adc.w	r3, r2, r3
 80020e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80020f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80020f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80020f8:	460b      	mov	r3, r1
 80020fa:	18db      	adds	r3, r3, r3
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020fe:	4613      	mov	r3, r2
 8002100:	eb42 0303 	adc.w	r3, r2, r3
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800210a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800210e:	f7fe f8d7 	bl	80002c0 <__aeabi_uldivmod>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <UART_SetConfig+0x2d4>)
 8002118:	fba3 1302 	umull	r1, r3, r3, r2
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	2164      	movs	r1, #100	@ 0x64
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	3332      	adds	r3, #50	@ 0x32
 800212a:	4a08      	ldr	r2, [pc, #32]	@ (800214c <UART_SetConfig+0x2d4>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	f003 0207 	and.w	r2, r3, #7
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4422      	add	r2, r4
 800213e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002140:	e106      	b.n	8002350 <UART_SetConfig+0x4d8>
 8002142:	bf00      	nop
 8002144:	40011000 	.word	0x40011000
 8002148:	40011400 	.word	0x40011400
 800214c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002154:	2200      	movs	r2, #0
 8002156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800215a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800215e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002162:	4642      	mov	r2, r8
 8002164:	464b      	mov	r3, r9
 8002166:	1891      	adds	r1, r2, r2
 8002168:	6239      	str	r1, [r7, #32]
 800216a:	415b      	adcs	r3, r3
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
 800216e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002172:	4641      	mov	r1, r8
 8002174:	1854      	adds	r4, r2, r1
 8002176:	4649      	mov	r1, r9
 8002178:	eb43 0501 	adc.w	r5, r3, r1
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	00eb      	lsls	r3, r5, #3
 8002186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800218a:	00e2      	lsls	r2, r4, #3
 800218c:	4614      	mov	r4, r2
 800218e:	461d      	mov	r5, r3
 8002190:	4643      	mov	r3, r8
 8002192:	18e3      	adds	r3, r4, r3
 8002194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002198:	464b      	mov	r3, r9
 800219a:	eb45 0303 	adc.w	r3, r5, r3
 800219e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80021a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021be:	4629      	mov	r1, r5
 80021c0:	008b      	lsls	r3, r1, #2
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021c8:	4621      	mov	r1, r4
 80021ca:	008a      	lsls	r2, r1, #2
 80021cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80021d0:	f7fe f876 	bl	80002c0 <__aeabi_uldivmod>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4b60      	ldr	r3, [pc, #384]	@ (800235c <UART_SetConfig+0x4e4>)
 80021da:	fba3 2302 	umull	r2, r3, r3, r2
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	011c      	lsls	r4, r3, #4
 80021e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021e6:	2200      	movs	r2, #0
 80021e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80021f4:	4642      	mov	r2, r8
 80021f6:	464b      	mov	r3, r9
 80021f8:	1891      	adds	r1, r2, r2
 80021fa:	61b9      	str	r1, [r7, #24]
 80021fc:	415b      	adcs	r3, r3
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002204:	4641      	mov	r1, r8
 8002206:	1851      	adds	r1, r2, r1
 8002208:	6139      	str	r1, [r7, #16]
 800220a:	4649      	mov	r1, r9
 800220c:	414b      	adcs	r3, r1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800221c:	4659      	mov	r1, fp
 800221e:	00cb      	lsls	r3, r1, #3
 8002220:	4651      	mov	r1, sl
 8002222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002226:	4651      	mov	r1, sl
 8002228:	00ca      	lsls	r2, r1, #3
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	4603      	mov	r3, r0
 8002230:	4642      	mov	r2, r8
 8002232:	189b      	adds	r3, r3, r2
 8002234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002238:	464b      	mov	r3, r9
 800223a:	460a      	mov	r2, r1
 800223c:	eb42 0303 	adc.w	r3, r2, r3
 8002240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800224e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800225c:	4649      	mov	r1, r9
 800225e:	008b      	lsls	r3, r1, #2
 8002260:	4641      	mov	r1, r8
 8002262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002266:	4641      	mov	r1, r8
 8002268:	008a      	lsls	r2, r1, #2
 800226a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800226e:	f7fe f827 	bl	80002c0 <__aeabi_uldivmod>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4611      	mov	r1, r2
 8002278:	4b38      	ldr	r3, [pc, #224]	@ (800235c <UART_SetConfig+0x4e4>)
 800227a:	fba3 2301 	umull	r2, r3, r3, r1
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2264      	movs	r2, #100	@ 0x64
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	1acb      	subs	r3, r1, r3
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	3332      	adds	r3, #50	@ 0x32
 800228c:	4a33      	ldr	r2, [pc, #204]	@ (800235c <UART_SetConfig+0x4e4>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002298:	441c      	add	r4, r3
 800229a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800229e:	2200      	movs	r2, #0
 80022a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80022a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80022a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80022a8:	4642      	mov	r2, r8
 80022aa:	464b      	mov	r3, r9
 80022ac:	1891      	adds	r1, r2, r2
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	415b      	adcs	r3, r3
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022b8:	4641      	mov	r1, r8
 80022ba:	1851      	adds	r1, r2, r1
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	4649      	mov	r1, r9
 80022c0:	414b      	adcs	r3, r1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022d0:	4659      	mov	r1, fp
 80022d2:	00cb      	lsls	r3, r1, #3
 80022d4:	4651      	mov	r1, sl
 80022d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022da:	4651      	mov	r1, sl
 80022dc:	00ca      	lsls	r2, r1, #3
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	4642      	mov	r2, r8
 80022e6:	189b      	adds	r3, r3, r2
 80022e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022ea:	464b      	mov	r3, r9
 80022ec:	460a      	mov	r2, r1
 80022ee:	eb42 0303 	adc.w	r3, r2, r3
 80022f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80022fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800230c:	4649      	mov	r1, r9
 800230e:	008b      	lsls	r3, r1, #2
 8002310:	4641      	mov	r1, r8
 8002312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002316:	4641      	mov	r1, r8
 8002318:	008a      	lsls	r2, r1, #2
 800231a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800231e:	f7fd ffcf 	bl	80002c0 <__aeabi_uldivmod>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <UART_SetConfig+0x4e4>)
 8002328:	fba3 1302 	umull	r1, r3, r3, r2
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	2164      	movs	r1, #100	@ 0x64
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	3332      	adds	r3, #50	@ 0x32
 800233a:	4a08      	ldr	r2, [pc, #32]	@ (800235c <UART_SetConfig+0x4e4>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4422      	add	r2, r4
 800234e:	609a      	str	r2, [r3, #8]
}
 8002350:	bf00      	nop
 8002352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002356:	46bd      	mov	sp, r7
 8002358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235c:	51eb851f 	.word	0x51eb851f

08002360 <siprintf>:
 8002360:	b40e      	push	{r1, r2, r3}
 8002362:	b510      	push	{r4, lr}
 8002364:	b09d      	sub	sp, #116	@ 0x74
 8002366:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002368:	9002      	str	r0, [sp, #8]
 800236a:	9006      	str	r0, [sp, #24]
 800236c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002370:	480a      	ldr	r0, [pc, #40]	@ (800239c <siprintf+0x3c>)
 8002372:	9107      	str	r1, [sp, #28]
 8002374:	9104      	str	r1, [sp, #16]
 8002376:	490a      	ldr	r1, [pc, #40]	@ (80023a0 <siprintf+0x40>)
 8002378:	f853 2b04 	ldr.w	r2, [r3], #4
 800237c:	9105      	str	r1, [sp, #20]
 800237e:	2400      	movs	r4, #0
 8002380:	a902      	add	r1, sp, #8
 8002382:	6800      	ldr	r0, [r0, #0]
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002388:	f000 f994 	bl	80026b4 <_svfiprintf_r>
 800238c:	9b02      	ldr	r3, [sp, #8]
 800238e:	701c      	strb	r4, [r3, #0]
 8002390:	b01d      	add	sp, #116	@ 0x74
 8002392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002396:	b003      	add	sp, #12
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	2000000c 	.word	0x2000000c
 80023a0:	ffff0208 	.word	0xffff0208

080023a4 <memset>:
 80023a4:	4402      	add	r2, r0
 80023a6:	4603      	mov	r3, r0
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d100      	bne.n	80023ae <memset+0xa>
 80023ac:	4770      	bx	lr
 80023ae:	f803 1b01 	strb.w	r1, [r3], #1
 80023b2:	e7f9      	b.n	80023a8 <memset+0x4>

080023b4 <__errno>:
 80023b4:	4b01      	ldr	r3, [pc, #4]	@ (80023bc <__errno+0x8>)
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	2000000c 	.word	0x2000000c

080023c0 <__libc_init_array>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	4d0d      	ldr	r5, [pc, #52]	@ (80023f8 <__libc_init_array+0x38>)
 80023c4:	4c0d      	ldr	r4, [pc, #52]	@ (80023fc <__libc_init_array+0x3c>)
 80023c6:	1b64      	subs	r4, r4, r5
 80023c8:	10a4      	asrs	r4, r4, #2
 80023ca:	2600      	movs	r6, #0
 80023cc:	42a6      	cmp	r6, r4
 80023ce:	d109      	bne.n	80023e4 <__libc_init_array+0x24>
 80023d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002400 <__libc_init_array+0x40>)
 80023d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002404 <__libc_init_array+0x44>)
 80023d4:	f000 fc64 	bl	8002ca0 <_init>
 80023d8:	1b64      	subs	r4, r4, r5
 80023da:	10a4      	asrs	r4, r4, #2
 80023dc:	2600      	movs	r6, #0
 80023de:	42a6      	cmp	r6, r4
 80023e0:	d105      	bne.n	80023ee <__libc_init_array+0x2e>
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e8:	4798      	blx	r3
 80023ea:	3601      	adds	r6, #1
 80023ec:	e7ee      	b.n	80023cc <__libc_init_array+0xc>
 80023ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f2:	4798      	blx	r3
 80023f4:	3601      	adds	r6, #1
 80023f6:	e7f2      	b.n	80023de <__libc_init_array+0x1e>
 80023f8:	08002d5c 	.word	0x08002d5c
 80023fc:	08002d5c 	.word	0x08002d5c
 8002400:	08002d5c 	.word	0x08002d5c
 8002404:	08002d60 	.word	0x08002d60

08002408 <__retarget_lock_acquire_recursive>:
 8002408:	4770      	bx	lr

0800240a <__retarget_lock_release_recursive>:
 800240a:	4770      	bx	lr

0800240c <_free_r>:
 800240c:	b538      	push	{r3, r4, r5, lr}
 800240e:	4605      	mov	r5, r0
 8002410:	2900      	cmp	r1, #0
 8002412:	d041      	beq.n	8002498 <_free_r+0x8c>
 8002414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002418:	1f0c      	subs	r4, r1, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	bfb8      	it	lt
 800241e:	18e4      	addlt	r4, r4, r3
 8002420:	f000 f8e0 	bl	80025e4 <__malloc_lock>
 8002424:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <_free_r+0x90>)
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	b933      	cbnz	r3, 8002438 <_free_r+0x2c>
 800242a:	6063      	str	r3, [r4, #4]
 800242c:	6014      	str	r4, [r2, #0]
 800242e:	4628      	mov	r0, r5
 8002430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002434:	f000 b8dc 	b.w	80025f0 <__malloc_unlock>
 8002438:	42a3      	cmp	r3, r4
 800243a:	d908      	bls.n	800244e <_free_r+0x42>
 800243c:	6820      	ldr	r0, [r4, #0]
 800243e:	1821      	adds	r1, r4, r0
 8002440:	428b      	cmp	r3, r1
 8002442:	bf01      	itttt	eq
 8002444:	6819      	ldreq	r1, [r3, #0]
 8002446:	685b      	ldreq	r3, [r3, #4]
 8002448:	1809      	addeq	r1, r1, r0
 800244a:	6021      	streq	r1, [r4, #0]
 800244c:	e7ed      	b.n	800242a <_free_r+0x1e>
 800244e:	461a      	mov	r2, r3
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	b10b      	cbz	r3, 8002458 <_free_r+0x4c>
 8002454:	42a3      	cmp	r3, r4
 8002456:	d9fa      	bls.n	800244e <_free_r+0x42>
 8002458:	6811      	ldr	r1, [r2, #0]
 800245a:	1850      	adds	r0, r2, r1
 800245c:	42a0      	cmp	r0, r4
 800245e:	d10b      	bne.n	8002478 <_free_r+0x6c>
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	4401      	add	r1, r0
 8002464:	1850      	adds	r0, r2, r1
 8002466:	4283      	cmp	r3, r0
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	d1e0      	bne.n	800242e <_free_r+0x22>
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	6053      	str	r3, [r2, #4]
 8002472:	4408      	add	r0, r1
 8002474:	6010      	str	r0, [r2, #0]
 8002476:	e7da      	b.n	800242e <_free_r+0x22>
 8002478:	d902      	bls.n	8002480 <_free_r+0x74>
 800247a:	230c      	movs	r3, #12
 800247c:	602b      	str	r3, [r5, #0]
 800247e:	e7d6      	b.n	800242e <_free_r+0x22>
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	1821      	adds	r1, r4, r0
 8002484:	428b      	cmp	r3, r1
 8002486:	bf04      	itt	eq
 8002488:	6819      	ldreq	r1, [r3, #0]
 800248a:	685b      	ldreq	r3, [r3, #4]
 800248c:	6063      	str	r3, [r4, #4]
 800248e:	bf04      	itt	eq
 8002490:	1809      	addeq	r1, r1, r0
 8002492:	6021      	streq	r1, [r4, #0]
 8002494:	6054      	str	r4, [r2, #4]
 8002496:	e7ca      	b.n	800242e <_free_r+0x22>
 8002498:	bd38      	pop	{r3, r4, r5, pc}
 800249a:	bf00      	nop
 800249c:	20000208 	.word	0x20000208

080024a0 <sbrk_aligned>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	4e0f      	ldr	r6, [pc, #60]	@ (80024e0 <sbrk_aligned+0x40>)
 80024a4:	460c      	mov	r4, r1
 80024a6:	6831      	ldr	r1, [r6, #0]
 80024a8:	4605      	mov	r5, r0
 80024aa:	b911      	cbnz	r1, 80024b2 <sbrk_aligned+0x12>
 80024ac:	f000 fba4 	bl	8002bf8 <_sbrk_r>
 80024b0:	6030      	str	r0, [r6, #0]
 80024b2:	4621      	mov	r1, r4
 80024b4:	4628      	mov	r0, r5
 80024b6:	f000 fb9f 	bl	8002bf8 <_sbrk_r>
 80024ba:	1c43      	adds	r3, r0, #1
 80024bc:	d103      	bne.n	80024c6 <sbrk_aligned+0x26>
 80024be:	f04f 34ff 	mov.w	r4, #4294967295
 80024c2:	4620      	mov	r0, r4
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
 80024c6:	1cc4      	adds	r4, r0, #3
 80024c8:	f024 0403 	bic.w	r4, r4, #3
 80024cc:	42a0      	cmp	r0, r4
 80024ce:	d0f8      	beq.n	80024c2 <sbrk_aligned+0x22>
 80024d0:	1a21      	subs	r1, r4, r0
 80024d2:	4628      	mov	r0, r5
 80024d4:	f000 fb90 	bl	8002bf8 <_sbrk_r>
 80024d8:	3001      	adds	r0, #1
 80024da:	d1f2      	bne.n	80024c2 <sbrk_aligned+0x22>
 80024dc:	e7ef      	b.n	80024be <sbrk_aligned+0x1e>
 80024de:	bf00      	nop
 80024e0:	20000204 	.word	0x20000204

080024e4 <_malloc_r>:
 80024e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024e8:	1ccd      	adds	r5, r1, #3
 80024ea:	f025 0503 	bic.w	r5, r5, #3
 80024ee:	3508      	adds	r5, #8
 80024f0:	2d0c      	cmp	r5, #12
 80024f2:	bf38      	it	cc
 80024f4:	250c      	movcc	r5, #12
 80024f6:	2d00      	cmp	r5, #0
 80024f8:	4606      	mov	r6, r0
 80024fa:	db01      	blt.n	8002500 <_malloc_r+0x1c>
 80024fc:	42a9      	cmp	r1, r5
 80024fe:	d904      	bls.n	800250a <_malloc_r+0x26>
 8002500:	230c      	movs	r3, #12
 8002502:	6033      	str	r3, [r6, #0]
 8002504:	2000      	movs	r0, #0
 8002506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800250a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80025e0 <_malloc_r+0xfc>
 800250e:	f000 f869 	bl	80025e4 <__malloc_lock>
 8002512:	f8d8 3000 	ldr.w	r3, [r8]
 8002516:	461c      	mov	r4, r3
 8002518:	bb44      	cbnz	r4, 800256c <_malloc_r+0x88>
 800251a:	4629      	mov	r1, r5
 800251c:	4630      	mov	r0, r6
 800251e:	f7ff ffbf 	bl	80024a0 <sbrk_aligned>
 8002522:	1c43      	adds	r3, r0, #1
 8002524:	4604      	mov	r4, r0
 8002526:	d158      	bne.n	80025da <_malloc_r+0xf6>
 8002528:	f8d8 4000 	ldr.w	r4, [r8]
 800252c:	4627      	mov	r7, r4
 800252e:	2f00      	cmp	r7, #0
 8002530:	d143      	bne.n	80025ba <_malloc_r+0xd6>
 8002532:	2c00      	cmp	r4, #0
 8002534:	d04b      	beq.n	80025ce <_malloc_r+0xea>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	4639      	mov	r1, r7
 800253a:	4630      	mov	r0, r6
 800253c:	eb04 0903 	add.w	r9, r4, r3
 8002540:	f000 fb5a 	bl	8002bf8 <_sbrk_r>
 8002544:	4581      	cmp	r9, r0
 8002546:	d142      	bne.n	80025ce <_malloc_r+0xea>
 8002548:	6821      	ldr	r1, [r4, #0]
 800254a:	1a6d      	subs	r5, r5, r1
 800254c:	4629      	mov	r1, r5
 800254e:	4630      	mov	r0, r6
 8002550:	f7ff ffa6 	bl	80024a0 <sbrk_aligned>
 8002554:	3001      	adds	r0, #1
 8002556:	d03a      	beq.n	80025ce <_malloc_r+0xea>
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	442b      	add	r3, r5
 800255c:	6023      	str	r3, [r4, #0]
 800255e:	f8d8 3000 	ldr.w	r3, [r8]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	bb62      	cbnz	r2, 80025c0 <_malloc_r+0xdc>
 8002566:	f8c8 7000 	str.w	r7, [r8]
 800256a:	e00f      	b.n	800258c <_malloc_r+0xa8>
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	1b52      	subs	r2, r2, r5
 8002570:	d420      	bmi.n	80025b4 <_malloc_r+0xd0>
 8002572:	2a0b      	cmp	r2, #11
 8002574:	d917      	bls.n	80025a6 <_malloc_r+0xc2>
 8002576:	1961      	adds	r1, r4, r5
 8002578:	42a3      	cmp	r3, r4
 800257a:	6025      	str	r5, [r4, #0]
 800257c:	bf18      	it	ne
 800257e:	6059      	strne	r1, [r3, #4]
 8002580:	6863      	ldr	r3, [r4, #4]
 8002582:	bf08      	it	eq
 8002584:	f8c8 1000 	streq.w	r1, [r8]
 8002588:	5162      	str	r2, [r4, r5]
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	4630      	mov	r0, r6
 800258e:	f000 f82f 	bl	80025f0 <__malloc_unlock>
 8002592:	f104 000b 	add.w	r0, r4, #11
 8002596:	1d23      	adds	r3, r4, #4
 8002598:	f020 0007 	bic.w	r0, r0, #7
 800259c:	1ac2      	subs	r2, r0, r3
 800259e:	bf1c      	itt	ne
 80025a0:	1a1b      	subne	r3, r3, r0
 80025a2:	50a3      	strne	r3, [r4, r2]
 80025a4:	e7af      	b.n	8002506 <_malloc_r+0x22>
 80025a6:	6862      	ldr	r2, [r4, #4]
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	bf0c      	ite	eq
 80025ac:	f8c8 2000 	streq.w	r2, [r8]
 80025b0:	605a      	strne	r2, [r3, #4]
 80025b2:	e7eb      	b.n	800258c <_malloc_r+0xa8>
 80025b4:	4623      	mov	r3, r4
 80025b6:	6864      	ldr	r4, [r4, #4]
 80025b8:	e7ae      	b.n	8002518 <_malloc_r+0x34>
 80025ba:	463c      	mov	r4, r7
 80025bc:	687f      	ldr	r7, [r7, #4]
 80025be:	e7b6      	b.n	800252e <_malloc_r+0x4a>
 80025c0:	461a      	mov	r2, r3
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	42a3      	cmp	r3, r4
 80025c6:	d1fb      	bne.n	80025c0 <_malloc_r+0xdc>
 80025c8:	2300      	movs	r3, #0
 80025ca:	6053      	str	r3, [r2, #4]
 80025cc:	e7de      	b.n	800258c <_malloc_r+0xa8>
 80025ce:	230c      	movs	r3, #12
 80025d0:	6033      	str	r3, [r6, #0]
 80025d2:	4630      	mov	r0, r6
 80025d4:	f000 f80c 	bl	80025f0 <__malloc_unlock>
 80025d8:	e794      	b.n	8002504 <_malloc_r+0x20>
 80025da:	6005      	str	r5, [r0, #0]
 80025dc:	e7d6      	b.n	800258c <_malloc_r+0xa8>
 80025de:	bf00      	nop
 80025e0:	20000208 	.word	0x20000208

080025e4 <__malloc_lock>:
 80025e4:	4801      	ldr	r0, [pc, #4]	@ (80025ec <__malloc_lock+0x8>)
 80025e6:	f7ff bf0f 	b.w	8002408 <__retarget_lock_acquire_recursive>
 80025ea:	bf00      	nop
 80025ec:	20000200 	.word	0x20000200

080025f0 <__malloc_unlock>:
 80025f0:	4801      	ldr	r0, [pc, #4]	@ (80025f8 <__malloc_unlock+0x8>)
 80025f2:	f7ff bf0a 	b.w	800240a <__retarget_lock_release_recursive>
 80025f6:	bf00      	nop
 80025f8:	20000200 	.word	0x20000200

080025fc <__ssputs_r>:
 80025fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002600:	688e      	ldr	r6, [r1, #8]
 8002602:	461f      	mov	r7, r3
 8002604:	42be      	cmp	r6, r7
 8002606:	680b      	ldr	r3, [r1, #0]
 8002608:	4682      	mov	sl, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4690      	mov	r8, r2
 800260e:	d82d      	bhi.n	800266c <__ssputs_r+0x70>
 8002610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002614:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002618:	d026      	beq.n	8002668 <__ssputs_r+0x6c>
 800261a:	6965      	ldr	r5, [r4, #20]
 800261c:	6909      	ldr	r1, [r1, #16]
 800261e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002622:	eba3 0901 	sub.w	r9, r3, r1
 8002626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800262a:	1c7b      	adds	r3, r7, #1
 800262c:	444b      	add	r3, r9
 800262e:	106d      	asrs	r5, r5, #1
 8002630:	429d      	cmp	r5, r3
 8002632:	bf38      	it	cc
 8002634:	461d      	movcc	r5, r3
 8002636:	0553      	lsls	r3, r2, #21
 8002638:	d527      	bpl.n	800268a <__ssputs_r+0x8e>
 800263a:	4629      	mov	r1, r5
 800263c:	f7ff ff52 	bl	80024e4 <_malloc_r>
 8002640:	4606      	mov	r6, r0
 8002642:	b360      	cbz	r0, 800269e <__ssputs_r+0xa2>
 8002644:	6921      	ldr	r1, [r4, #16]
 8002646:	464a      	mov	r2, r9
 8002648:	f000 fae6 	bl	8002c18 <memcpy>
 800264c:	89a3      	ldrh	r3, [r4, #12]
 800264e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002656:	81a3      	strh	r3, [r4, #12]
 8002658:	6126      	str	r6, [r4, #16]
 800265a:	6165      	str	r5, [r4, #20]
 800265c:	444e      	add	r6, r9
 800265e:	eba5 0509 	sub.w	r5, r5, r9
 8002662:	6026      	str	r6, [r4, #0]
 8002664:	60a5      	str	r5, [r4, #8]
 8002666:	463e      	mov	r6, r7
 8002668:	42be      	cmp	r6, r7
 800266a:	d900      	bls.n	800266e <__ssputs_r+0x72>
 800266c:	463e      	mov	r6, r7
 800266e:	6820      	ldr	r0, [r4, #0]
 8002670:	4632      	mov	r2, r6
 8002672:	4641      	mov	r1, r8
 8002674:	f000 faa6 	bl	8002bc4 <memmove>
 8002678:	68a3      	ldr	r3, [r4, #8]
 800267a:	1b9b      	subs	r3, r3, r6
 800267c:	60a3      	str	r3, [r4, #8]
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	4433      	add	r3, r6
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	2000      	movs	r0, #0
 8002686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800268a:	462a      	mov	r2, r5
 800268c:	f000 fad2 	bl	8002c34 <_realloc_r>
 8002690:	4606      	mov	r6, r0
 8002692:	2800      	cmp	r0, #0
 8002694:	d1e0      	bne.n	8002658 <__ssputs_r+0x5c>
 8002696:	6921      	ldr	r1, [r4, #16]
 8002698:	4650      	mov	r0, sl
 800269a:	f7ff feb7 	bl	800240c <_free_r>
 800269e:	230c      	movs	r3, #12
 80026a0:	f8ca 3000 	str.w	r3, [sl]
 80026a4:	89a3      	ldrh	r3, [r4, #12]
 80026a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026aa:	81a3      	strh	r3, [r4, #12]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	e7e9      	b.n	8002686 <__ssputs_r+0x8a>
	...

080026b4 <_svfiprintf_r>:
 80026b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b8:	4698      	mov	r8, r3
 80026ba:	898b      	ldrh	r3, [r1, #12]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	b09d      	sub	sp, #116	@ 0x74
 80026c0:	4607      	mov	r7, r0
 80026c2:	460d      	mov	r5, r1
 80026c4:	4614      	mov	r4, r2
 80026c6:	d510      	bpl.n	80026ea <_svfiprintf_r+0x36>
 80026c8:	690b      	ldr	r3, [r1, #16]
 80026ca:	b973      	cbnz	r3, 80026ea <_svfiprintf_r+0x36>
 80026cc:	2140      	movs	r1, #64	@ 0x40
 80026ce:	f7ff ff09 	bl	80024e4 <_malloc_r>
 80026d2:	6028      	str	r0, [r5, #0]
 80026d4:	6128      	str	r0, [r5, #16]
 80026d6:	b930      	cbnz	r0, 80026e6 <_svfiprintf_r+0x32>
 80026d8:	230c      	movs	r3, #12
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	b01d      	add	sp, #116	@ 0x74
 80026e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e6:	2340      	movs	r3, #64	@ 0x40
 80026e8:	616b      	str	r3, [r5, #20]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80026ee:	2320      	movs	r3, #32
 80026f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80026f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80026f8:	2330      	movs	r3, #48	@ 0x30
 80026fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002898 <_svfiprintf_r+0x1e4>
 80026fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002702:	f04f 0901 	mov.w	r9, #1
 8002706:	4623      	mov	r3, r4
 8002708:	469a      	mov	sl, r3
 800270a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800270e:	b10a      	cbz	r2, 8002714 <_svfiprintf_r+0x60>
 8002710:	2a25      	cmp	r2, #37	@ 0x25
 8002712:	d1f9      	bne.n	8002708 <_svfiprintf_r+0x54>
 8002714:	ebba 0b04 	subs.w	fp, sl, r4
 8002718:	d00b      	beq.n	8002732 <_svfiprintf_r+0x7e>
 800271a:	465b      	mov	r3, fp
 800271c:	4622      	mov	r2, r4
 800271e:	4629      	mov	r1, r5
 8002720:	4638      	mov	r0, r7
 8002722:	f7ff ff6b 	bl	80025fc <__ssputs_r>
 8002726:	3001      	adds	r0, #1
 8002728:	f000 80a7 	beq.w	800287a <_svfiprintf_r+0x1c6>
 800272c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800272e:	445a      	add	r2, fp
 8002730:	9209      	str	r2, [sp, #36]	@ 0x24
 8002732:	f89a 3000 	ldrb.w	r3, [sl]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 809f 	beq.w	800287a <_svfiprintf_r+0x1c6>
 800273c:	2300      	movs	r3, #0
 800273e:	f04f 32ff 	mov.w	r2, #4294967295
 8002742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002746:	f10a 0a01 	add.w	sl, sl, #1
 800274a:	9304      	str	r3, [sp, #16]
 800274c:	9307      	str	r3, [sp, #28]
 800274e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002752:	931a      	str	r3, [sp, #104]	@ 0x68
 8002754:	4654      	mov	r4, sl
 8002756:	2205      	movs	r2, #5
 8002758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800275c:	484e      	ldr	r0, [pc, #312]	@ (8002898 <_svfiprintf_r+0x1e4>)
 800275e:	f7fd fd5f 	bl	8000220 <memchr>
 8002762:	9a04      	ldr	r2, [sp, #16]
 8002764:	b9d8      	cbnz	r0, 800279e <_svfiprintf_r+0xea>
 8002766:	06d0      	lsls	r0, r2, #27
 8002768:	bf44      	itt	mi
 800276a:	2320      	movmi	r3, #32
 800276c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002770:	0711      	lsls	r1, r2, #28
 8002772:	bf44      	itt	mi
 8002774:	232b      	movmi	r3, #43	@ 0x2b
 8002776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800277a:	f89a 3000 	ldrb.w	r3, [sl]
 800277e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002780:	d015      	beq.n	80027ae <_svfiprintf_r+0xfa>
 8002782:	9a07      	ldr	r2, [sp, #28]
 8002784:	4654      	mov	r4, sl
 8002786:	2000      	movs	r0, #0
 8002788:	f04f 0c0a 	mov.w	ip, #10
 800278c:	4621      	mov	r1, r4
 800278e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002792:	3b30      	subs	r3, #48	@ 0x30
 8002794:	2b09      	cmp	r3, #9
 8002796:	d94b      	bls.n	8002830 <_svfiprintf_r+0x17c>
 8002798:	b1b0      	cbz	r0, 80027c8 <_svfiprintf_r+0x114>
 800279a:	9207      	str	r2, [sp, #28]
 800279c:	e014      	b.n	80027c8 <_svfiprintf_r+0x114>
 800279e:	eba0 0308 	sub.w	r3, r0, r8
 80027a2:	fa09 f303 	lsl.w	r3, r9, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	9304      	str	r3, [sp, #16]
 80027aa:	46a2      	mov	sl, r4
 80027ac:	e7d2      	b.n	8002754 <_svfiprintf_r+0xa0>
 80027ae:	9b03      	ldr	r3, [sp, #12]
 80027b0:	1d19      	adds	r1, r3, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	9103      	str	r1, [sp, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bfbb      	ittet	lt
 80027ba:	425b      	neglt	r3, r3
 80027bc:	f042 0202 	orrlt.w	r2, r2, #2
 80027c0:	9307      	strge	r3, [sp, #28]
 80027c2:	9307      	strlt	r3, [sp, #28]
 80027c4:	bfb8      	it	lt
 80027c6:	9204      	strlt	r2, [sp, #16]
 80027c8:	7823      	ldrb	r3, [r4, #0]
 80027ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80027cc:	d10a      	bne.n	80027e4 <_svfiprintf_r+0x130>
 80027ce:	7863      	ldrb	r3, [r4, #1]
 80027d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80027d2:	d132      	bne.n	800283a <_svfiprintf_r+0x186>
 80027d4:	9b03      	ldr	r3, [sp, #12]
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	9203      	str	r2, [sp, #12]
 80027dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80027e0:	3402      	adds	r4, #2
 80027e2:	9305      	str	r3, [sp, #20]
 80027e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80028a8 <_svfiprintf_r+0x1f4>
 80027e8:	7821      	ldrb	r1, [r4, #0]
 80027ea:	2203      	movs	r2, #3
 80027ec:	4650      	mov	r0, sl
 80027ee:	f7fd fd17 	bl	8000220 <memchr>
 80027f2:	b138      	cbz	r0, 8002804 <_svfiprintf_r+0x150>
 80027f4:	9b04      	ldr	r3, [sp, #16]
 80027f6:	eba0 000a 	sub.w	r0, r0, sl
 80027fa:	2240      	movs	r2, #64	@ 0x40
 80027fc:	4082      	lsls	r2, r0
 80027fe:	4313      	orrs	r3, r2
 8002800:	3401      	adds	r4, #1
 8002802:	9304      	str	r3, [sp, #16]
 8002804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002808:	4824      	ldr	r0, [pc, #144]	@ (800289c <_svfiprintf_r+0x1e8>)
 800280a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800280e:	2206      	movs	r2, #6
 8002810:	f7fd fd06 	bl	8000220 <memchr>
 8002814:	2800      	cmp	r0, #0
 8002816:	d036      	beq.n	8002886 <_svfiprintf_r+0x1d2>
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <_svfiprintf_r+0x1ec>)
 800281a:	bb1b      	cbnz	r3, 8002864 <_svfiprintf_r+0x1b0>
 800281c:	9b03      	ldr	r3, [sp, #12]
 800281e:	3307      	adds	r3, #7
 8002820:	f023 0307 	bic.w	r3, r3, #7
 8002824:	3308      	adds	r3, #8
 8002826:	9303      	str	r3, [sp, #12]
 8002828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800282a:	4433      	add	r3, r6
 800282c:	9309      	str	r3, [sp, #36]	@ 0x24
 800282e:	e76a      	b.n	8002706 <_svfiprintf_r+0x52>
 8002830:	fb0c 3202 	mla	r2, ip, r2, r3
 8002834:	460c      	mov	r4, r1
 8002836:	2001      	movs	r0, #1
 8002838:	e7a8      	b.n	800278c <_svfiprintf_r+0xd8>
 800283a:	2300      	movs	r3, #0
 800283c:	3401      	adds	r4, #1
 800283e:	9305      	str	r3, [sp, #20]
 8002840:	4619      	mov	r1, r3
 8002842:	f04f 0c0a 	mov.w	ip, #10
 8002846:	4620      	mov	r0, r4
 8002848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800284c:	3a30      	subs	r2, #48	@ 0x30
 800284e:	2a09      	cmp	r2, #9
 8002850:	d903      	bls.n	800285a <_svfiprintf_r+0x1a6>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0c6      	beq.n	80027e4 <_svfiprintf_r+0x130>
 8002856:	9105      	str	r1, [sp, #20]
 8002858:	e7c4      	b.n	80027e4 <_svfiprintf_r+0x130>
 800285a:	fb0c 2101 	mla	r1, ip, r1, r2
 800285e:	4604      	mov	r4, r0
 8002860:	2301      	movs	r3, #1
 8002862:	e7f0      	b.n	8002846 <_svfiprintf_r+0x192>
 8002864:	ab03      	add	r3, sp, #12
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	462a      	mov	r2, r5
 800286a:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <_svfiprintf_r+0x1f0>)
 800286c:	a904      	add	r1, sp, #16
 800286e:	4638      	mov	r0, r7
 8002870:	f3af 8000 	nop.w
 8002874:	1c42      	adds	r2, r0, #1
 8002876:	4606      	mov	r6, r0
 8002878:	d1d6      	bne.n	8002828 <_svfiprintf_r+0x174>
 800287a:	89ab      	ldrh	r3, [r5, #12]
 800287c:	065b      	lsls	r3, r3, #25
 800287e:	f53f af2d 	bmi.w	80026dc <_svfiprintf_r+0x28>
 8002882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002884:	e72c      	b.n	80026e0 <_svfiprintf_r+0x2c>
 8002886:	ab03      	add	r3, sp, #12
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	462a      	mov	r2, r5
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <_svfiprintf_r+0x1f0>)
 800288e:	a904      	add	r1, sp, #16
 8002890:	4638      	mov	r0, r7
 8002892:	f000 f879 	bl	8002988 <_printf_i>
 8002896:	e7ed      	b.n	8002874 <_svfiprintf_r+0x1c0>
 8002898:	08002d20 	.word	0x08002d20
 800289c:	08002d2a 	.word	0x08002d2a
 80028a0:	00000000 	.word	0x00000000
 80028a4:	080025fd 	.word	0x080025fd
 80028a8:	08002d26 	.word	0x08002d26

080028ac <_printf_common>:
 80028ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	4616      	mov	r6, r2
 80028b2:	4698      	mov	r8, r3
 80028b4:	688a      	ldr	r2, [r1, #8]
 80028b6:	690b      	ldr	r3, [r1, #16]
 80028b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80028bc:	4293      	cmp	r3, r2
 80028be:	bfb8      	it	lt
 80028c0:	4613      	movlt	r3, r2
 80028c2:	6033      	str	r3, [r6, #0]
 80028c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028c8:	4607      	mov	r7, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	b10a      	cbz	r2, 80028d2 <_printf_common+0x26>
 80028ce:	3301      	adds	r3, #1
 80028d0:	6033      	str	r3, [r6, #0]
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	0699      	lsls	r1, r3, #26
 80028d6:	bf42      	ittt	mi
 80028d8:	6833      	ldrmi	r3, [r6, #0]
 80028da:	3302      	addmi	r3, #2
 80028dc:	6033      	strmi	r3, [r6, #0]
 80028de:	6825      	ldr	r5, [r4, #0]
 80028e0:	f015 0506 	ands.w	r5, r5, #6
 80028e4:	d106      	bne.n	80028f4 <_printf_common+0x48>
 80028e6:	f104 0a19 	add.w	sl, r4, #25
 80028ea:	68e3      	ldr	r3, [r4, #12]
 80028ec:	6832      	ldr	r2, [r6, #0]
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	42ab      	cmp	r3, r5
 80028f2:	dc26      	bgt.n	8002942 <_printf_common+0x96>
 80028f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	3b00      	subs	r3, #0
 80028fc:	bf18      	it	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	0692      	lsls	r2, r2, #26
 8002902:	d42b      	bmi.n	800295c <_printf_common+0xb0>
 8002904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002908:	4641      	mov	r1, r8
 800290a:	4638      	mov	r0, r7
 800290c:	47c8      	blx	r9
 800290e:	3001      	adds	r0, #1
 8002910:	d01e      	beq.n	8002950 <_printf_common+0xa4>
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	6922      	ldr	r2, [r4, #16]
 8002916:	f003 0306 	and.w	r3, r3, #6
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf02      	ittt	eq
 800291e:	68e5      	ldreq	r5, [r4, #12]
 8002920:	6833      	ldreq	r3, [r6, #0]
 8002922:	1aed      	subeq	r5, r5, r3
 8002924:	68a3      	ldr	r3, [r4, #8]
 8002926:	bf0c      	ite	eq
 8002928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800292c:	2500      	movne	r5, #0
 800292e:	4293      	cmp	r3, r2
 8002930:	bfc4      	itt	gt
 8002932:	1a9b      	subgt	r3, r3, r2
 8002934:	18ed      	addgt	r5, r5, r3
 8002936:	2600      	movs	r6, #0
 8002938:	341a      	adds	r4, #26
 800293a:	42b5      	cmp	r5, r6
 800293c:	d11a      	bne.n	8002974 <_printf_common+0xc8>
 800293e:	2000      	movs	r0, #0
 8002940:	e008      	b.n	8002954 <_printf_common+0xa8>
 8002942:	2301      	movs	r3, #1
 8002944:	4652      	mov	r2, sl
 8002946:	4641      	mov	r1, r8
 8002948:	4638      	mov	r0, r7
 800294a:	47c8      	blx	r9
 800294c:	3001      	adds	r0, #1
 800294e:	d103      	bne.n	8002958 <_printf_common+0xac>
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002958:	3501      	adds	r5, #1
 800295a:	e7c6      	b.n	80028ea <_printf_common+0x3e>
 800295c:	18e1      	adds	r1, r4, r3
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	2030      	movs	r0, #48	@ 0x30
 8002962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002966:	4422      	add	r2, r4
 8002968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800296c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002970:	3302      	adds	r3, #2
 8002972:	e7c7      	b.n	8002904 <_printf_common+0x58>
 8002974:	2301      	movs	r3, #1
 8002976:	4622      	mov	r2, r4
 8002978:	4641      	mov	r1, r8
 800297a:	4638      	mov	r0, r7
 800297c:	47c8      	blx	r9
 800297e:	3001      	adds	r0, #1
 8002980:	d0e6      	beq.n	8002950 <_printf_common+0xa4>
 8002982:	3601      	adds	r6, #1
 8002984:	e7d9      	b.n	800293a <_printf_common+0x8e>
	...

08002988 <_printf_i>:
 8002988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800298c:	7e0f      	ldrb	r7, [r1, #24]
 800298e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002990:	2f78      	cmp	r7, #120	@ 0x78
 8002992:	4691      	mov	r9, r2
 8002994:	4680      	mov	r8, r0
 8002996:	460c      	mov	r4, r1
 8002998:	469a      	mov	sl, r3
 800299a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800299e:	d807      	bhi.n	80029b0 <_printf_i+0x28>
 80029a0:	2f62      	cmp	r7, #98	@ 0x62
 80029a2:	d80a      	bhi.n	80029ba <_printf_i+0x32>
 80029a4:	2f00      	cmp	r7, #0
 80029a6:	f000 80d1 	beq.w	8002b4c <_printf_i+0x1c4>
 80029aa:	2f58      	cmp	r7, #88	@ 0x58
 80029ac:	f000 80b8 	beq.w	8002b20 <_printf_i+0x198>
 80029b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029b8:	e03a      	b.n	8002a30 <_printf_i+0xa8>
 80029ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029be:	2b15      	cmp	r3, #21
 80029c0:	d8f6      	bhi.n	80029b0 <_printf_i+0x28>
 80029c2:	a101      	add	r1, pc, #4	@ (adr r1, 80029c8 <_printf_i+0x40>)
 80029c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029c8:	08002a21 	.word	0x08002a21
 80029cc:	08002a35 	.word	0x08002a35
 80029d0:	080029b1 	.word	0x080029b1
 80029d4:	080029b1 	.word	0x080029b1
 80029d8:	080029b1 	.word	0x080029b1
 80029dc:	080029b1 	.word	0x080029b1
 80029e0:	08002a35 	.word	0x08002a35
 80029e4:	080029b1 	.word	0x080029b1
 80029e8:	080029b1 	.word	0x080029b1
 80029ec:	080029b1 	.word	0x080029b1
 80029f0:	080029b1 	.word	0x080029b1
 80029f4:	08002b33 	.word	0x08002b33
 80029f8:	08002a5f 	.word	0x08002a5f
 80029fc:	08002aed 	.word	0x08002aed
 8002a00:	080029b1 	.word	0x080029b1
 8002a04:	080029b1 	.word	0x080029b1
 8002a08:	08002b55 	.word	0x08002b55
 8002a0c:	080029b1 	.word	0x080029b1
 8002a10:	08002a5f 	.word	0x08002a5f
 8002a14:	080029b1 	.word	0x080029b1
 8002a18:	080029b1 	.word	0x080029b1
 8002a1c:	08002af5 	.word	0x08002af5
 8002a20:	6833      	ldr	r3, [r6, #0]
 8002a22:	1d1a      	adds	r2, r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6032      	str	r2, [r6, #0]
 8002a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a30:	2301      	movs	r3, #1
 8002a32:	e09c      	b.n	8002b6e <_printf_i+0x1e6>
 8002a34:	6833      	ldr	r3, [r6, #0]
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	1d19      	adds	r1, r3, #4
 8002a3a:	6031      	str	r1, [r6, #0]
 8002a3c:	0606      	lsls	r6, r0, #24
 8002a3e:	d501      	bpl.n	8002a44 <_printf_i+0xbc>
 8002a40:	681d      	ldr	r5, [r3, #0]
 8002a42:	e003      	b.n	8002a4c <_printf_i+0xc4>
 8002a44:	0645      	lsls	r5, r0, #25
 8002a46:	d5fb      	bpl.n	8002a40 <_printf_i+0xb8>
 8002a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a4c:	2d00      	cmp	r5, #0
 8002a4e:	da03      	bge.n	8002a58 <_printf_i+0xd0>
 8002a50:	232d      	movs	r3, #45	@ 0x2d
 8002a52:	426d      	negs	r5, r5
 8002a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a58:	4858      	ldr	r0, [pc, #352]	@ (8002bbc <_printf_i+0x234>)
 8002a5a:	230a      	movs	r3, #10
 8002a5c:	e011      	b.n	8002a82 <_printf_i+0xfa>
 8002a5e:	6821      	ldr	r1, [r4, #0]
 8002a60:	6833      	ldr	r3, [r6, #0]
 8002a62:	0608      	lsls	r0, r1, #24
 8002a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a68:	d402      	bmi.n	8002a70 <_printf_i+0xe8>
 8002a6a:	0649      	lsls	r1, r1, #25
 8002a6c:	bf48      	it	mi
 8002a6e:	b2ad      	uxthmi	r5, r5
 8002a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a72:	4852      	ldr	r0, [pc, #328]	@ (8002bbc <_printf_i+0x234>)
 8002a74:	6033      	str	r3, [r6, #0]
 8002a76:	bf14      	ite	ne
 8002a78:	230a      	movne	r3, #10
 8002a7a:	2308      	moveq	r3, #8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a82:	6866      	ldr	r6, [r4, #4]
 8002a84:	60a6      	str	r6, [r4, #8]
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	db05      	blt.n	8002a96 <_printf_i+0x10e>
 8002a8a:	6821      	ldr	r1, [r4, #0]
 8002a8c:	432e      	orrs	r6, r5
 8002a8e:	f021 0104 	bic.w	r1, r1, #4
 8002a92:	6021      	str	r1, [r4, #0]
 8002a94:	d04b      	beq.n	8002b2e <_printf_i+0x1a6>
 8002a96:	4616      	mov	r6, r2
 8002a98:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a9c:	fb03 5711 	mls	r7, r3, r1, r5
 8002aa0:	5dc7      	ldrb	r7, [r0, r7]
 8002aa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002aa6:	462f      	mov	r7, r5
 8002aa8:	42bb      	cmp	r3, r7
 8002aaa:	460d      	mov	r5, r1
 8002aac:	d9f4      	bls.n	8002a98 <_printf_i+0x110>
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d10b      	bne.n	8002aca <_printf_i+0x142>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	07df      	lsls	r7, r3, #31
 8002ab6:	d508      	bpl.n	8002aca <_printf_i+0x142>
 8002ab8:	6923      	ldr	r3, [r4, #16]
 8002aba:	6861      	ldr	r1, [r4, #4]
 8002abc:	4299      	cmp	r1, r3
 8002abe:	bfde      	ittt	le
 8002ac0:	2330      	movle	r3, #48	@ 0x30
 8002ac2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ac6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002aca:	1b92      	subs	r2, r2, r6
 8002acc:	6122      	str	r2, [r4, #16]
 8002ace:	f8cd a000 	str.w	sl, [sp]
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	aa03      	add	r2, sp, #12
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	4640      	mov	r0, r8
 8002ada:	f7ff fee7 	bl	80028ac <_printf_common>
 8002ade:	3001      	adds	r0, #1
 8002ae0:	d14a      	bne.n	8002b78 <_printf_i+0x1f0>
 8002ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae6:	b004      	add	sp, #16
 8002ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	f043 0320 	orr.w	r3, r3, #32
 8002af2:	6023      	str	r3, [r4, #0]
 8002af4:	4832      	ldr	r0, [pc, #200]	@ (8002bc0 <_printf_i+0x238>)
 8002af6:	2778      	movs	r7, #120	@ 0x78
 8002af8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	6831      	ldr	r1, [r6, #0]
 8002b00:	061f      	lsls	r7, r3, #24
 8002b02:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b06:	d402      	bmi.n	8002b0e <_printf_i+0x186>
 8002b08:	065f      	lsls	r7, r3, #25
 8002b0a:	bf48      	it	mi
 8002b0c:	b2ad      	uxthmi	r5, r5
 8002b0e:	6031      	str	r1, [r6, #0]
 8002b10:	07d9      	lsls	r1, r3, #31
 8002b12:	bf44      	itt	mi
 8002b14:	f043 0320 	orrmi.w	r3, r3, #32
 8002b18:	6023      	strmi	r3, [r4, #0]
 8002b1a:	b11d      	cbz	r5, 8002b24 <_printf_i+0x19c>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	e7ad      	b.n	8002a7c <_printf_i+0xf4>
 8002b20:	4826      	ldr	r0, [pc, #152]	@ (8002bbc <_printf_i+0x234>)
 8002b22:	e7e9      	b.n	8002af8 <_printf_i+0x170>
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	f023 0320 	bic.w	r3, r3, #32
 8002b2a:	6023      	str	r3, [r4, #0]
 8002b2c:	e7f6      	b.n	8002b1c <_printf_i+0x194>
 8002b2e:	4616      	mov	r6, r2
 8002b30:	e7bd      	b.n	8002aae <_printf_i+0x126>
 8002b32:	6833      	ldr	r3, [r6, #0]
 8002b34:	6825      	ldr	r5, [r4, #0]
 8002b36:	6961      	ldr	r1, [r4, #20]
 8002b38:	1d18      	adds	r0, r3, #4
 8002b3a:	6030      	str	r0, [r6, #0]
 8002b3c:	062e      	lsls	r6, r5, #24
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	d501      	bpl.n	8002b46 <_printf_i+0x1be>
 8002b42:	6019      	str	r1, [r3, #0]
 8002b44:	e002      	b.n	8002b4c <_printf_i+0x1c4>
 8002b46:	0668      	lsls	r0, r5, #25
 8002b48:	d5fb      	bpl.n	8002b42 <_printf_i+0x1ba>
 8002b4a:	8019      	strh	r1, [r3, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	6123      	str	r3, [r4, #16]
 8002b50:	4616      	mov	r6, r2
 8002b52:	e7bc      	b.n	8002ace <_printf_i+0x146>
 8002b54:	6833      	ldr	r3, [r6, #0]
 8002b56:	1d1a      	adds	r2, r3, #4
 8002b58:	6032      	str	r2, [r6, #0]
 8002b5a:	681e      	ldr	r6, [r3, #0]
 8002b5c:	6862      	ldr	r2, [r4, #4]
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4630      	mov	r0, r6
 8002b62:	f7fd fb5d 	bl	8000220 <memchr>
 8002b66:	b108      	cbz	r0, 8002b6c <_printf_i+0x1e4>
 8002b68:	1b80      	subs	r0, r0, r6
 8002b6a:	6060      	str	r0, [r4, #4]
 8002b6c:	6863      	ldr	r3, [r4, #4]
 8002b6e:	6123      	str	r3, [r4, #16]
 8002b70:	2300      	movs	r3, #0
 8002b72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b76:	e7aa      	b.n	8002ace <_printf_i+0x146>
 8002b78:	6923      	ldr	r3, [r4, #16]
 8002b7a:	4632      	mov	r2, r6
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	4640      	mov	r0, r8
 8002b80:	47d0      	blx	sl
 8002b82:	3001      	adds	r0, #1
 8002b84:	d0ad      	beq.n	8002ae2 <_printf_i+0x15a>
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	079b      	lsls	r3, r3, #30
 8002b8a:	d413      	bmi.n	8002bb4 <_printf_i+0x22c>
 8002b8c:	68e0      	ldr	r0, [r4, #12]
 8002b8e:	9b03      	ldr	r3, [sp, #12]
 8002b90:	4298      	cmp	r0, r3
 8002b92:	bfb8      	it	lt
 8002b94:	4618      	movlt	r0, r3
 8002b96:	e7a6      	b.n	8002ae6 <_printf_i+0x15e>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	4632      	mov	r2, r6
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	4640      	mov	r0, r8
 8002ba0:	47d0      	blx	sl
 8002ba2:	3001      	adds	r0, #1
 8002ba4:	d09d      	beq.n	8002ae2 <_printf_i+0x15a>
 8002ba6:	3501      	adds	r5, #1
 8002ba8:	68e3      	ldr	r3, [r4, #12]
 8002baa:	9903      	ldr	r1, [sp, #12]
 8002bac:	1a5b      	subs	r3, r3, r1
 8002bae:	42ab      	cmp	r3, r5
 8002bb0:	dcf2      	bgt.n	8002b98 <_printf_i+0x210>
 8002bb2:	e7eb      	b.n	8002b8c <_printf_i+0x204>
 8002bb4:	2500      	movs	r5, #0
 8002bb6:	f104 0619 	add.w	r6, r4, #25
 8002bba:	e7f5      	b.n	8002ba8 <_printf_i+0x220>
 8002bbc:	08002d31 	.word	0x08002d31
 8002bc0:	08002d42 	.word	0x08002d42

08002bc4 <memmove>:
 8002bc4:	4288      	cmp	r0, r1
 8002bc6:	b510      	push	{r4, lr}
 8002bc8:	eb01 0402 	add.w	r4, r1, r2
 8002bcc:	d902      	bls.n	8002bd4 <memmove+0x10>
 8002bce:	4284      	cmp	r4, r0
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	d807      	bhi.n	8002be4 <memmove+0x20>
 8002bd4:	1e43      	subs	r3, r0, #1
 8002bd6:	42a1      	cmp	r1, r4
 8002bd8:	d008      	beq.n	8002bec <memmove+0x28>
 8002bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002be2:	e7f8      	b.n	8002bd6 <memmove+0x12>
 8002be4:	4402      	add	r2, r0
 8002be6:	4601      	mov	r1, r0
 8002be8:	428a      	cmp	r2, r1
 8002bea:	d100      	bne.n	8002bee <memmove+0x2a>
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002bf6:	e7f7      	b.n	8002be8 <memmove+0x24>

08002bf8 <_sbrk_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4d06      	ldr	r5, [pc, #24]	@ (8002c14 <_sbrk_r+0x1c>)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4608      	mov	r0, r1
 8002c02:	602b      	str	r3, [r5, #0]
 8002c04:	f7fd fe4e 	bl	80008a4 <_sbrk>
 8002c08:	1c43      	adds	r3, r0, #1
 8002c0a:	d102      	bne.n	8002c12 <_sbrk_r+0x1a>
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	b103      	cbz	r3, 8002c12 <_sbrk_r+0x1a>
 8002c10:	6023      	str	r3, [r4, #0]
 8002c12:	bd38      	pop	{r3, r4, r5, pc}
 8002c14:	200001fc 	.word	0x200001fc

08002c18 <memcpy>:
 8002c18:	440a      	add	r2, r1
 8002c1a:	4291      	cmp	r1, r2
 8002c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c20:	d100      	bne.n	8002c24 <memcpy+0xc>
 8002c22:	4770      	bx	lr
 8002c24:	b510      	push	{r4, lr}
 8002c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c2e:	4291      	cmp	r1, r2
 8002c30:	d1f9      	bne.n	8002c26 <memcpy+0xe>
 8002c32:	bd10      	pop	{r4, pc}

08002c34 <_realloc_r>:
 8002c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c38:	4607      	mov	r7, r0
 8002c3a:	4614      	mov	r4, r2
 8002c3c:	460d      	mov	r5, r1
 8002c3e:	b921      	cbnz	r1, 8002c4a <_realloc_r+0x16>
 8002c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c44:	4611      	mov	r1, r2
 8002c46:	f7ff bc4d 	b.w	80024e4 <_malloc_r>
 8002c4a:	b92a      	cbnz	r2, 8002c58 <_realloc_r+0x24>
 8002c4c:	f7ff fbde 	bl	800240c <_free_r>
 8002c50:	4625      	mov	r5, r4
 8002c52:	4628      	mov	r0, r5
 8002c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c58:	f000 f81a 	bl	8002c90 <_malloc_usable_size_r>
 8002c5c:	4284      	cmp	r4, r0
 8002c5e:	4606      	mov	r6, r0
 8002c60:	d802      	bhi.n	8002c68 <_realloc_r+0x34>
 8002c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002c66:	d8f4      	bhi.n	8002c52 <_realloc_r+0x1e>
 8002c68:	4621      	mov	r1, r4
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	f7ff fc3a 	bl	80024e4 <_malloc_r>
 8002c70:	4680      	mov	r8, r0
 8002c72:	b908      	cbnz	r0, 8002c78 <_realloc_r+0x44>
 8002c74:	4645      	mov	r5, r8
 8002c76:	e7ec      	b.n	8002c52 <_realloc_r+0x1e>
 8002c78:	42b4      	cmp	r4, r6
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	bf28      	it	cs
 8002c80:	4632      	movcs	r2, r6
 8002c82:	f7ff ffc9 	bl	8002c18 <memcpy>
 8002c86:	4629      	mov	r1, r5
 8002c88:	4638      	mov	r0, r7
 8002c8a:	f7ff fbbf 	bl	800240c <_free_r>
 8002c8e:	e7f1      	b.n	8002c74 <_realloc_r+0x40>

08002c90 <_malloc_usable_size_r>:
 8002c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c94:	1f18      	subs	r0, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bfbc      	itt	lt
 8002c9a:	580b      	ldrlt	r3, [r1, r0]
 8002c9c:	18c0      	addlt	r0, r0, r3
 8002c9e:	4770      	bx	lr

08002ca0 <_init>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	bf00      	nop
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr

08002cac <_fini>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	bf00      	nop
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr
