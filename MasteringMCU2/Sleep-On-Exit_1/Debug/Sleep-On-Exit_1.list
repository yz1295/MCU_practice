
Sleep-On-Exit_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080026a0  080026a0  000036a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a8  080026a8  00004034  2**0
                  CONTENTS
  4 .ARM          00000008  080026a8  080026a8  000036a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026b0  080026b0  00004034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b0  080026b0  000036b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b4  080026b4  000036b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080026b8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000034  080026ec  00004034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080026ec  000040e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d69f  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d49  00000000  00000000  00011703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00013450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021ccd  00000000  00000000  000140c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e8f0  00000000  00000000  00035d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cfd32  00000000  00000000  00044685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001143b7  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000009b2  00000000  00000000  001143fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003414  00000000  00000000  00114dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c6  00000000  00000000  001181c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002688 	.word	0x08002688

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	08002688 	.word	0x08002688

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <SysTick_Handler>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SysTick_Handler (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000544:	f000 fa0c 	bl	8000960 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000548:	f000 fb3b 	bl	8000bc2 <HAL_SYSTICK_IRQHandler>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
	HAL_TIM_IRQHandler(&htimer6);
 8000554:	4802      	ldr	r0, [pc, #8]	@ (8000560 <TIM6_DAC_IRQHandler+0x10>)
 8000556:	f000 fe85 	bl	8001264 <HAL_TIM_IRQHandler>
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000050 	.word	0x20000050

08000564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt.
  */
void USART2_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <USART2_IRQHandler+0x10>)
 800056a:	f001 f93f 	bl	80017ec <HAL_UART_IRQHandler>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000098 	.word	0x20000098

08000578 <main>:
TIM_HandleTypeDef htimer6;
UART_HandleTypeDef huart2;
extern uint8_t some_data[];

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_Init();
 800057c:	f000 f99e 	bl	80008bc <HAL_Init>
	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
	GPIO_Init();
 8000580:	f000 f82a 	bl	80005d8 <GPIO_Init>
	//HAL_SuspendTick();
	UART2_Init();
 8000584:	f000 f858 	bl	8000638 <UART2_Init>
	TIMER6_Init();
 8000588:	f000 f87c 	bl	8000684 <TIMER6_Init>
	GPIO_AnalogConfig();
 800058c:	f000 f80e 	bl	80005ac <GPIO_AnalogConfig>
	//SCB->SCR |= ( 1 << 1);
	HAL_PWR_EnableSleepOnExit();
 8000590:	f000 fd64 	bl	800105c <HAL_PWR_EnableSleepOnExit>

	/* lets start with fresh Status register of Timer to avoid any spurious interrupts */
  TIM6->SR = 0;
 8000594:	4b03      	ldr	r3, [pc, #12]	@ (80005a4 <main+0x2c>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]

	//Lets start the timer in interrupt mode
	HAL_TIM_Base_Start_IT(&htimer6);
 800059a:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <main+0x30>)
 800059c:	f000 fdf2 	bl	8001184 <HAL_TIM_Base_Start_IT>

	while(1);
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <main+0x28>
 80005a4:	40001000 	.word	0x40001000
 80005a8:	20000050 	.word	0x20000050

080005ac <GPIO_AnalogConfig>:
/**
  * @brief  Configures specified GPIO pins of GPIOA port as analog.
  * @retval None
  */
void GPIO_AnalogConfig(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioA;

	uint32_t gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_4  | \
 80005b2:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80005b6:	617b      	str	r3, [r7, #20]
                       GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7  | \
                       GPIO_PIN_8 | GPIO_PIN_9 |GPIO_PIN_10 | \
                       GPIO_PIN_11| GPIO_PIN_12|GPIO_PIN_15;

	GpioA.Pin = gpio_pins;
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	603b      	str	r3, [r7, #0]
	GpioA.Mode = GPIO_MODE_ANALOG;
 80005bc:	2303      	movs	r3, #3
 80005be:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA,&GpioA);
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <GPIO_AnalogConfig+0x28>)
 80005c6:	f000 fb9b 	bl	8000d00 <HAL_GPIO_Init>
}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020000 	.word	0x40020000

080005d8 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <GPIO_Init+0x58>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a12      	ldr	r2, [pc, #72]	@ (8000630 <GPIO_Init+0x58>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <GPIO_Init+0x58>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef ledgpio ;
  ledgpio.Pin = GPIO_PIN_5;
 80005fa:	2320      	movs	r3, #32
 80005fc:	607b      	str	r3, [r7, #4]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
  ledgpio.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA,&ledgpio);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	480a      	ldr	r0, [pc, #40]	@ (8000634 <GPIO_Init+0x5c>)
 800060c:	f000 fb78 	bl	8000d00 <HAL_GPIO_Init>

  ledgpio.Pin = GPIO_PIN_12;
 8000610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000614:	607b      	str	r3, [r7, #4]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
  ledgpio.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA,&ledgpio);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	4804      	ldr	r0, [pc, #16]	@ (8000634 <GPIO_Init+0x5c>)
 8000624:	f000 fb6c 	bl	8000d00 <HAL_GPIO_Init>
}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40020000 	.word	0x40020000

08000638 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <UART2_Init+0x44>)
 800063e:	4a10      	ldr	r2, [pc, #64]	@ (8000680 <UART2_Init+0x48>)
 8000640:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 921600;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <UART2_Init+0x44>)
 8000644:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000648:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <UART2_Init+0x44>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <UART2_Init+0x44>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <UART2_Init+0x44>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <UART2_Init+0x44>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <UART2_Init+0x44>)
 8000664:	2208      	movs	r2, #8
 8000666:	615a      	str	r2, [r3, #20]

	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <UART2_Init+0x44>)
 800066a:	f000 ffdf 	bl	800162c <HAL_UART_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000674:	f000 f852 	bl	800071c <Error_handler>
	}
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000098 	.word	0x20000098
 8000680:	40004400 	.word	0x40004400

08000684 <TIMER6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void TIMER6_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <TIMER6_Init+0x2c>)
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <TIMER6_Init+0x30>)
 800068c:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 4999;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <TIMER6_Init+0x2c>)
 8000690:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000694:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 100-1;
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <TIMER6_Init+0x2c>)
 8000698:	2263      	movs	r2, #99	@ 0x63
 800069a:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <TIMER6_Init+0x2c>)
 800069e:	f000 fd21 	bl	80010e4 <HAL_TIM_Base_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <TIMER6_Init+0x28>
	{
		Error_handler();
 80006a8:	f000 f838 	bl	800071c <Error_handler>
	}
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000050 	.word	0x20000050
 80006b4:	40001000 	.word	0x40001000

080006b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if ( HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY) != HAL_OK)
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006c2:	f7ff fd9f 	bl	8000204 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	4906      	ldr	r1, [pc, #24]	@ (80006e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006d0:	4806      	ldr	r0, [pc, #24]	@ (80006ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006d2:	f000 fff8 	bl	80016c6 <HAL_UART_Transmit>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
    Error_handler();
 80006dc:	f000 f81e 	bl	800071c <Error_handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000098 	.word	0x20000098

080006f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <HAL_UART_TxCpltCallback+0x28>)
 8000700:	f000 fc92 	bl	8001028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <HAL_UART_TxCpltCallback+0x28>)
 800070c:	f000 fc8c 	bl	8001028 <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020000 	.word	0x40020000

0800071c <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	while(1);
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <Error_handler+0x4>

08000724 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 fa09 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <HAL_MspInit+0x40>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000732:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <HAL_MspInit+0x40>)
 8000734:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000738:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	f06f 000b 	mvn.w	r0, #11
 8000742:	f000 fa08 	bl	8000b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	f06f 000a 	mvn.w	r0, #10
 800074e:	f000 fa02 	bl	8000b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	f06f 0009 	mvn.w	r0, #9
 800075a:	f000 f9fc 	bl	8000b56 <HAL_NVIC_SetPriority>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  //1. enable the clock for the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <HAL_TIM_Base_MspInit+0x3c>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 0310 	and.w	r3, r3, #16
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

  //2. Enable the IRQ of TIM6
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800078c:	2036      	movs	r0, #54	@ 0x36
 800078e:	f000 f9fe 	bl	8000b8e <HAL_NVIC_EnableIRQ>

  //3. setup the priority for TIM6_DAC_IRQn
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn,0,0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2036      	movs	r0, #54	@ 0x36
 8000798:	f000 f9dd 	bl	8000b56 <HAL_NVIC_SetPriority>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800

080007a8 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral

  __HAL_RCC_USART2_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a20      	ldr	r2, [pc, #128]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d0:	4a1a      	ldr	r2, [pc, #104]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007d2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80007d6:	6613      	str	r3, [r2, #96]	@ 0x60

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e0:	4a16      	ldr	r2, [pc, #88]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 80007f4:	2304      	movs	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000804:	2307      	movs	r3, #7
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	480c      	ldr	r0, [pc, #48]	@ (8000840 <HAL_UART_MspInit+0x98>)
 8000810:	f000 fa76 	bl	8000d00 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000814:	2308      	movs	r3, #8
 8000816:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4808      	ldr	r0, [pc, #32]	@ (8000840 <HAL_UART_MspInit+0x98>)
 8000820:	f000 fa6e 	bl	8000d00 <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000824:	2026      	movs	r0, #38	@ 0x26
 8000826:	f000 f9b2 	bl	8000b8e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800082a:	2200      	movs	r2, #0
 800082c:	210f      	movs	r1, #15
 800082e:	2026      	movs	r0, #38	@ 0x26
 8000830:	f000 f991 	bl	8000b56 <HAL_NVIC_SetPriority>
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000

08000844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	@ (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800086c:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086e:	490e      	ldr	r1, [pc, #56]	@ (80008a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000870:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000884:	4c0b      	ldr	r4, [pc, #44]	@ (80008b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000892:	f7ff ffd7 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000896:	f001 fed3 	bl	8002640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fe6d 	bl	8000578 <main>
  bx  lr    
 800089e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80008ac:	080026b8 	.word	0x080026b8
  ldr r2, =_sbss
 80008b0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80008b4:	200000e0 	.word	0x200000e0

080008b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <HAL_Init+0x40>)
 80008c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <HAL_Init+0x40>)
 80008d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	@ (80008fc <HAL_Init+0x40>)
 80008de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f92b 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff ff18 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023c00 	.word	0x40023c00

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f943 	bl	8000baa <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 f90b 	bl	8000b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	@ (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000028 	.word	0x20000028
 8000958:	20000030 	.word	0x20000030
 800095c:	2000002c 	.word	0x2000002c

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_IncTick+0x20>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_IncTick+0x24>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <HAL_IncTick+0x24>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000030 	.word	0x20000030
 8000984:	200000dc 	.word	0x200000dc

08000988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GetTick+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	200000dc 	.word	0x200000dc

080009a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4907      	ldr	r1, [pc, #28]	@ (8000a3c <__NVIC_EnableIRQ+0x38>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	@ 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	@ 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f7ff ff8e 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff29 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff3e 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff8e 	bl	8000a94 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff31 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffa2 	bl	8000afc <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000bc6:	f000 f802 	bl	8000bce <HAL_SYSTICK_Callback>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000bea:	f7ff fecd 	bl	8000988 <HAL_GetTick>
 8000bee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d008      	beq.n	8000c0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e052      	b.n	8000cb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0216 	bic.w	r2, r2, #22
 8000c1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d103      	bne.n	8000c3e <HAL_DMA_Abort+0x62>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0208 	bic.w	r2, r2, #8
 8000c4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f022 0201 	bic.w	r2, r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c5e:	e013      	b.n	8000c88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c60:	f7ff fe92 	bl	8000988 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d90c      	bls.n	8000c88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2220      	movs	r2, #32
 8000c72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2203      	movs	r2, #3
 8000c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e015      	b.n	8000cb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1e4      	bne.n	8000c60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c9a:	223f      	movs	r2, #63	@ 0x3f
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d004      	beq.n	8000cda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00c      	b.n	8000cf4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2205      	movs	r2, #5
 8000cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0201 	bic.w	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	@ 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e165      	b.n	8000fe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8154 	bne.w	8000fe2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d130      	bne.n	8000db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80ae 	beq.w	8000fe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <HAL_GPIO_Init+0x300>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a5c      	ldr	r2, [pc, #368]	@ (8001000 <HAL_GPIO_Init+0x300>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b5a      	ldr	r3, [pc, #360]	@ (8001000 <HAL_GPIO_Init+0x300>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a58      	ldr	r2, [pc, #352]	@ (8001004 <HAL_GPIO_Init+0x304>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8001008 <HAL_GPIO_Init+0x308>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d025      	beq.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800100c <HAL_GPIO_Init+0x30c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01f      	beq.n	8000f16 <HAL_GPIO_Init+0x216>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8001010 <HAL_GPIO_Init+0x310>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x212>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4c      	ldr	r2, [pc, #304]	@ (8001014 <HAL_GPIO_Init+0x314>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x20e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8001018 <HAL_GPIO_Init+0x318>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x20a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800101c <HAL_GPIO_Init+0x31c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x206>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a49      	ldr	r2, [pc, #292]	@ (8001020 <HAL_GPIO_Init+0x320>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x202>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e00c      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e00a      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	@ (8001004 <HAL_GPIO_Init+0x304>)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f5e:	4a31      	ldr	r2, [pc, #196]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f64:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f88:	4a26      	ldr	r2, [pc, #152]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fdc:	4a11      	ldr	r2, [pc, #68]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f67f ae96 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40013800 	.word	0x40013800
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40021400 	.word	0x40021400
 8001020:	40021800 	.word	0x40021800
 8001024:	40013c00 	.word	0x40013c00

08001028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
 8001034:	4613      	mov	r3, r2
 8001036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001044:	e003      	b.n	800104e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	041a      	lsls	r2, r3, #16
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	619a      	str	r2, [r3, #24]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	6113      	str	r3, [r2, #16]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_RCC_GetHCLKFreq+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000028 	.word	0x20000028

08001094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001098:	f7ff fff0 	bl	800107c <HAL_RCC_GetHCLKFreq>
 800109c:	4602      	mov	r2, r0
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	0a9b      	lsrs	r3, r3, #10
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	4903      	ldr	r1, [pc, #12]	@ (80010b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010aa:	5ccb      	ldrb	r3, [r1, r3]
 80010ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	080026a0 	.word	0x080026a0

080010bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80010c0:	f7ff ffdc 	bl	800107c <HAL_RCC_GetHCLKFreq>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	0b5b      	lsrs	r3, r3, #13
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	4903      	ldr	r1, [pc, #12]	@ (80010e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010d2:	5ccb      	ldrb	r3, [r1, r3]
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	080026a0 	.word	0x080026a0

080010e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e041      	b.n	800117a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fb2c 	bl	8000768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3304      	adds	r3, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f000 f9ce 	bl	80014c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d001      	beq.n	800119c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e04e      	b.n	800123a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a23      	ldr	r2, [pc, #140]	@ (8001248 <HAL_TIM_Base_Start_IT+0xc4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d022      	beq.n	8001204 <HAL_TIM_Base_Start_IT+0x80>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c6:	d01d      	beq.n	8001204 <HAL_TIM_Base_Start_IT+0x80>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a1f      	ldr	r2, [pc, #124]	@ (800124c <HAL_TIM_Base_Start_IT+0xc8>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d018      	beq.n	8001204 <HAL_TIM_Base_Start_IT+0x80>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <HAL_TIM_Base_Start_IT+0xcc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d013      	beq.n	8001204 <HAL_TIM_Base_Start_IT+0x80>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <HAL_TIM_Base_Start_IT+0xd0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00e      	beq.n	8001204 <HAL_TIM_Base_Start_IT+0x80>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <HAL_TIM_Base_Start_IT+0xd4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d009      	beq.n	8001204 <HAL_TIM_Base_Start_IT+0x80>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_TIM_Base_Start_IT+0xd8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d004      	beq.n	8001204 <HAL_TIM_Base_Start_IT+0x80>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <HAL_TIM_Base_Start_IT+0xdc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d111      	bne.n	8001228 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b06      	cmp	r3, #6
 8001214:	d010      	beq.n	8001238 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001226:	e007      	b.n	8001238 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40010000 	.word	0x40010000
 800124c:	40000400 	.word	0x40000400
 8001250:	40000800 	.word	0x40000800
 8001254:	40000c00 	.word	0x40000c00
 8001258:	40010400 	.word	0x40010400
 800125c:	40014000 	.word	0x40014000
 8001260:	40001800 	.word	0x40001800

08001264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b02      	cmp	r3, #2
 8001278:	d122      	bne.n	80012c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d11b      	bne.n	80012c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0202 	mvn.w	r2, #2
 8001290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f8ee 	bl	8001488 <HAL_TIM_IC_CaptureCallback>
 80012ac:	e005      	b.n	80012ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f8e0 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f8f1 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d122      	bne.n	8001314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d11b      	bne.n	8001314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f06f 0204 	mvn.w	r2, #4
 80012e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2202      	movs	r2, #2
 80012ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f8c4 	bl	8001488 <HAL_TIM_IC_CaptureCallback>
 8001300:	e005      	b.n	800130e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8b6 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8c7 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b08      	cmp	r3, #8
 8001320:	d122      	bne.n	8001368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b08      	cmp	r3, #8
 800132e:	d11b      	bne.n	8001368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f06f 0208 	mvn.w	r2, #8
 8001338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2204      	movs	r2, #4
 800133e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f89a 	bl	8001488 <HAL_TIM_IC_CaptureCallback>
 8001354:	e005      	b.n	8001362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f88c 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f89d 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b10      	cmp	r3, #16
 8001374:	d122      	bne.n	80013bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	2b10      	cmp	r3, #16
 8001382:	d11b      	bne.n	80013bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f06f 0210 	mvn.w	r2, #16
 800138c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2208      	movs	r2, #8
 8001392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f870 	bl	8001488 <HAL_TIM_IC_CaptureCallback>
 80013a8:	e005      	b.n	80013b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f862 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f873 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d10e      	bne.n	80013e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f06f 0201 	mvn.w	r2, #1
 80013e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f968 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013f2:	2b80      	cmp	r3, #128	@ 0x80
 80013f4:	d10e      	bne.n	8001414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001400:	2b80      	cmp	r3, #128	@ 0x80
 8001402:	d107      	bne.n	8001414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800140c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f902 	bl	8001618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800141e:	2b40      	cmp	r3, #64	@ 0x40
 8001420:	d10e      	bne.n	8001440 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800142c:	2b40      	cmp	r3, #64	@ 0x40
 800142e:	d107      	bne.n	8001440 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f838 	bl	80014b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b20      	cmp	r3, #32
 800144c:	d10e      	bne.n	800146c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	2b20      	cmp	r3, #32
 800145a:	d107      	bne.n	800146c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0220 	mvn.w	r2, #32
 8001464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8cc 	bl	8001604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a40      	ldr	r2, [pc, #256]	@ (80015d8 <TIM_Base_SetConfig+0x114>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e2:	d00f      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3d      	ldr	r2, [pc, #244]	@ (80015dc <TIM_Base_SetConfig+0x118>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00b      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3c      	ldr	r2, [pc, #240]	@ (80015e0 <TIM_Base_SetConfig+0x11c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d007      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3b      	ldr	r2, [pc, #236]	@ (80015e4 <TIM_Base_SetConfig+0x120>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d003      	beq.n	8001504 <TIM_Base_SetConfig+0x40>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3a      	ldr	r2, [pc, #232]	@ (80015e8 <TIM_Base_SetConfig+0x124>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d108      	bne.n	8001516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800150a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a2f      	ldr	r2, [pc, #188]	@ (80015d8 <TIM_Base_SetConfig+0x114>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d02b      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001524:	d027      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a2c      	ldr	r2, [pc, #176]	@ (80015dc <TIM_Base_SetConfig+0x118>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d023      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a2b      	ldr	r2, [pc, #172]	@ (80015e0 <TIM_Base_SetConfig+0x11c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01f      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a2a      	ldr	r2, [pc, #168]	@ (80015e4 <TIM_Base_SetConfig+0x120>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01b      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a29      	ldr	r2, [pc, #164]	@ (80015e8 <TIM_Base_SetConfig+0x124>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d017      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a28      	ldr	r2, [pc, #160]	@ (80015ec <TIM_Base_SetConfig+0x128>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a27      	ldr	r2, [pc, #156]	@ (80015f0 <TIM_Base_SetConfig+0x12c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00f      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <TIM_Base_SetConfig+0x130>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00b      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a25      	ldr	r2, [pc, #148]	@ (80015f8 <TIM_Base_SetConfig+0x134>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a24      	ldr	r2, [pc, #144]	@ (80015fc <TIM_Base_SetConfig+0x138>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d003      	beq.n	8001576 <TIM_Base_SetConfig+0xb2>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a23      	ldr	r2, [pc, #140]	@ (8001600 <TIM_Base_SetConfig+0x13c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d108      	bne.n	8001588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800157c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4313      	orrs	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <TIM_Base_SetConfig+0x114>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d003      	beq.n	80015bc <TIM_Base_SetConfig+0xf8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <TIM_Base_SetConfig+0x124>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d103      	bne.n	80015c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	615a      	str	r2, [r3, #20]
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40000800 	.word	0x40000800
 80015e4:	40000c00 	.word	0x40000c00
 80015e8:	40010400 	.word	0x40010400
 80015ec:	40014000 	.word	0x40014000
 80015f0:	40014400 	.word	0x40014400
 80015f4:	40014800 	.word	0x40014800
 80015f8:	40001800 	.word	0x40001800
 80015fc:	40001c00 	.word	0x40001c00
 8001600:	40002000 	.word	0x40002000

08001604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e03f      	b.n	80016be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d106      	bne.n	8001658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff f8a8 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2224      	movs	r2, #36	@ 0x24
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800166e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fd71 	bl	8002158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2220      	movs	r2, #32
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2220      	movs	r2, #32
 80016b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b08a      	sub	sp, #40	@ 0x28
 80016ca:	af02      	add	r7, sp, #8
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4613      	mov	r3, r2
 80016d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d17c      	bne.n	80017e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <HAL_UART_Transmit+0x2c>
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e075      	b.n	80017e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_UART_Transmit+0x3e>
 8001700:	2302      	movs	r3, #2
 8001702:	e06e      	b.n	80017e2 <HAL_UART_Transmit+0x11c>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2221      	movs	r2, #33	@ 0x21
 8001716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800171a:	f7ff f935 	bl	8000988 <HAL_GetTick>
 800171e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	88fa      	ldrh	r2, [r7, #6]
 8001724:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001734:	d108      	bne.n	8001748 <HAL_UART_Transmit+0x82>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d104      	bne.n	8001748 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	e003      	b.n	8001750 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001758:	e02a      	b.n	80017b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2200      	movs	r2, #0
 8001762:	2180      	movs	r1, #128	@ 0x80
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 faef 	bl	8001d48 <UART_WaitOnFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e036      	b.n	80017e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10b      	bne.n	8001792 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001788:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	3302      	adds	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e007      	b.n	80017a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3301      	adds	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1cf      	bne.n	800175a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2200      	movs	r2, #0
 80017c2:	2140      	movs	r1, #64	@ 0x40
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 fabf 	bl	8001d48 <UART_WaitOnFlagUntilTimeout>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e006      	b.n	80017e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e000      	b.n	80017e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
  }
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0ba      	sub	sp, #232	@ 0xe8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800181e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800182a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_UART_IRQHandler+0x66>
 800183e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fbc9 	bl	8001fe2 <UART_Receive_IT>
      return;
 8001850:	e256      	b.n	8001d00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80de 	beq.w	8001a18 <HAL_UART_IRQHandler+0x22c>
 800185c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d106      	bne.n	8001876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800186c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80d1 	beq.w	8001a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <HAL_UART_IRQHandler+0xae>
 8001882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800189a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <HAL_UART_IRQHandler+0xd2>
 80018a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f043 0202 	orr.w	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_UART_IRQHandler+0xf6>
 80018ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f043 0204 	orr.w	r2, r3, #4
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80018e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d011      	beq.n	8001912 <HAL_UART_IRQHandler+0x126>
 80018ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80018fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f043 0208 	orr.w	r2, r3, #8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 81ed 	beq.w	8001cf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800191c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_UART_IRQHandler+0x14e>
 8001928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fb54 	bl	8001fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001944:	2b40      	cmp	r3, #64	@ 0x40
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d103      	bne.n	8001966 <HAL_UART_IRQHandler+0x17a>
 800195e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d04f      	beq.n	8001a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fa5c 	bl	8001e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001976:	2b40      	cmp	r3, #64	@ 0x40
 8001978:	d141      	bne.n	80019fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3314      	adds	r3, #20
 8001980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001988:	e853 3f00 	ldrex	r3, [r3]
 800198c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3314      	adds	r3, #20
 80019a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80019a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80019aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80019b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80019b6:	e841 2300 	strex	r3, r2, [r1]
 80019ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80019be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1d9      	bne.n	800197a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d013      	beq.n	80019f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d2:	4a7d      	ldr	r2, [pc, #500]	@ (8001bc8 <HAL_UART_IRQHandler+0x3dc>)
 80019d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f96e 	bl	8000cbc <HAL_DMA_Abort_IT>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d016      	beq.n	8001a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019f0:	4610      	mov	r0, r2
 80019f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019f4:	e00e      	b.n	8001a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f990 	bl	8001d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019fc:	e00a      	b.n	8001a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f98c 	bl	8001d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a04:	e006      	b.n	8001a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f988 	bl	8001d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8001a12:	e170      	b.n	8001cf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a14:	bf00      	nop
    return;
 8001a16:	e16e      	b.n	8001cf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	f040 814a 	bne.w	8001cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8143 	beq.w	8001cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 813c 	beq.w	8001cb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5e:	2b40      	cmp	r3, #64	@ 0x40
 8001a60:	f040 80b4 	bne.w	8001bcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8140 	beq.w	8001cfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001a82:	429a      	cmp	r2, r3
 8001a84:	f080 8139 	bcs.w	8001cfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001a8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a9a:	f000 8088 	beq.w	8001bae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	330c      	adds	r3, #12
 8001aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001aac:	e853 3f00 	ldrex	r3, [r3]
 8001ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	330c      	adds	r3, #12
 8001ac6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001aca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ace:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ada:	e841 2300 	strex	r3, r2, [r1]
 8001ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1d9      	bne.n	8001a9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3314      	adds	r3, #20
 8001af0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af4:	e853 3f00 	ldrex	r3, [r3]
 8001af8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3314      	adds	r3, #20
 8001b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001b1a:	e841 2300 	strex	r3, r2, [r1]
 8001b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e1      	bne.n	8001aea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3314      	adds	r3, #20
 8001b2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b30:	e853 3f00 	ldrex	r3, [r3]
 8001b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3314      	adds	r3, #20
 8001b46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001b4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001b50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b52:	e841 2300 	strex	r3, r2, [r1]
 8001b56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1e3      	bne.n	8001b26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2220      	movs	r2, #32
 8001b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	330c      	adds	r3, #12
 8001b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b76:	e853 3f00 	ldrex	r3, [r3]
 8001b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7e:	f023 0310 	bic.w	r3, r3, #16
 8001b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001b90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001b92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b98:	e841 2300 	strex	r3, r2, [r1]
 8001b9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e3      	bne.n	8001b6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f817 	bl	8000bdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8b6 	bl	8001d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001bc4:	e099      	b.n	8001cfa <HAL_UART_IRQHandler+0x50e>
 8001bc6:	bf00      	nop
 8001bc8:	08001eeb 	.word	0x08001eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 808b 	beq.w	8001cfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8086 	beq.w	8001cfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bfc:	e853 3f00 	ldrex	r3, [r3]
 8001c00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	330c      	adds	r3, #12
 8001c12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001c16:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c1e:	e841 2300 	strex	r3, r2, [r1]
 8001c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e3      	bne.n	8001bf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3314      	adds	r3, #20
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	e853 3f00 	ldrex	r3, [r3]
 8001c38:	623b      	str	r3, [r7, #32]
   return(result);
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3314      	adds	r3, #20
 8001c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001c4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c56:	e841 2300 	strex	r3, r2, [r1]
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e3      	bne.n	8001c2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	330c      	adds	r3, #12
 8001c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	e853 3f00 	ldrex	r3, [r3]
 8001c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f023 0310 	bic.w	r3, r3, #16
 8001c86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	330c      	adds	r3, #12
 8001c90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001c94:	61fa      	str	r2, [r7, #28]
 8001c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c98:	69b9      	ldr	r1, [r7, #24]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	e841 2300 	strex	r3, r2, [r1]
 8001ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e3      	bne.n	8001c70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001cac:	4619      	mov	r1, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f83e 	bl	8001d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001cb4:	e023      	b.n	8001cfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_UART_IRQHandler+0x4ea>
 8001cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f91f 	bl	8001f12 <UART_Transmit_IT>
    return;
 8001cd4:	e014      	b.n	8001d00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00e      	beq.n	8001d00 <HAL_UART_IRQHandler+0x514>
 8001ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f95f 	bl	8001fb2 <UART_EndTransmit_IT>
    return;
 8001cf4:	e004      	b.n	8001d00 <HAL_UART_IRQHandler+0x514>
    return;
 8001cf6:	bf00      	nop
 8001cf8:	e002      	b.n	8001d00 <HAL_UART_IRQHandler+0x514>
      return;
 8001cfa:	bf00      	nop
 8001cfc:	e000      	b.n	8001d00 <HAL_UART_IRQHandler+0x514>
      return;
 8001cfe:	bf00      	nop
  }
}
 8001d00:	37e8      	adds	r7, #232	@ 0xe8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop

08001d08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b090      	sub	sp, #64	@ 0x40
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d58:	e050      	b.n	8001dfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d04c      	beq.n	8001dfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d68:	f7fe fe0e 	bl	8000988 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d241      	bcs.n	8001dfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d82:	e853 3f00 	ldrex	r3, [r3]
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	330c      	adds	r3, #12
 8001d96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d98:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001da0:	e841 2300 	strex	r3, r2, [r1]
 8001da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e5      	bne.n	8001d78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3314      	adds	r3, #20
 8001db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	e853 3f00 	ldrex	r3, [r3]
 8001dba:	613b      	str	r3, [r7, #16]
   return(result);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3314      	adds	r3, #20
 8001dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dcc:	623a      	str	r2, [r7, #32]
 8001dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd0:	69f9      	ldr	r1, [r7, #28]
 8001dd2:	6a3a      	ldr	r2, [r7, #32]
 8001dd4:	e841 2300 	strex	r3, r2, [r1]
 8001dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e5      	bne.n	8001dac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e00f      	b.n	8001e1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4013      	ands	r3, r2
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d09f      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3740      	adds	r7, #64	@ 0x40
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b095      	sub	sp, #84	@ 0x54
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	330c      	adds	r3, #12
 8001e32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e36:	e853 3f00 	ldrex	r3, [r3]
 8001e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	330c      	adds	r3, #12
 8001e4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e54:	e841 2300 	strex	r3, r2, [r1]
 8001e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e5      	bne.n	8001e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3314      	adds	r3, #20
 8001e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	e853 3f00 	ldrex	r3, [r3]
 8001e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3314      	adds	r3, #20
 8001e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e88:	e841 2300 	strex	r3, r2, [r1]
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e5      	bne.n	8001e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d119      	bne.n	8001ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	e853 3f00 	ldrex	r3, [r3]
 8001eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f023 0310 	bic.w	r3, r3, #16
 8001eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ebc:	61ba      	str	r2, [r7, #24]
 8001ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	e841 2300 	strex	r3, r2, [r1]
 8001ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e5      	bne.n	8001e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001ede:	bf00      	nop
 8001ee0:	3754      	adds	r7, #84	@ 0x54
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff ff09 	bl	8001d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b21      	cmp	r3, #33	@ 0x21
 8001f24:	d13e      	bne.n	8001fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2e:	d114      	bne.n	8001f5a <UART_Transmit_IT+0x48>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d110      	bne.n	8001f5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	1c9a      	adds	r2, r3, #2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	621a      	str	r2, [r3, #32]
 8001f58:	e008      	b.n	8001f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6211      	str	r1, [r2, #32]
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fb8c 	bl	80006f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b08c      	sub	sp, #48	@ 0x30
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b22      	cmp	r3, #34	@ 0x22
 8001ff4:	f040 80ab 	bne.w	800214e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002000:	d117      	bne.n	8002032 <UART_Receive_IT+0x50>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d113      	bne.n	8002032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	b29b      	uxth	r3, r3
 800201c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002020:	b29a      	uxth	r2, r3
 8002022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	1c9a      	adds	r2, r3, #2
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002030:	e026      	b.n	8002080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002044:	d007      	beq.n	8002056 <UART_Receive_IT+0x74>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <UART_Receive_IT+0x82>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e008      	b.n	8002076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002070:	b2da      	uxtb	r2, r3
 8002072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4619      	mov	r1, r3
 800208e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002090:	2b00      	cmp	r3, #0
 8002092:	d15a      	bne.n	800214a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0220 	bic.w	r2, r2, #32
 80020a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d135      	bne.n	8002140 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	330c      	adds	r3, #12
 80020e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	e853 3f00 	ldrex	r3, [r3]
 80020e8:	613b      	str	r3, [r7, #16]
   return(result);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f023 0310 	bic.w	r3, r3, #16
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fa:	623a      	str	r2, [r7, #32]
 80020fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fe:	69f9      	ldr	r1, [r7, #28]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	e841 2300 	strex	r3, r2, [r1]
 8002106:	61bb      	str	r3, [r7, #24]
   return(result);
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e5      	bne.n	80020da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	d10a      	bne.n	8002132 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fdf9 	bl	8001d30 <HAL_UARTEx_RxEventCallback>
 800213e:	e002      	b.n	8002146 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fde1 	bl	8001d08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e002      	b.n	8002150 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800214e:	2302      	movs	r3, #2
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3730      	adds	r7, #48	@ 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800215c:	b0c0      	sub	sp, #256	@ 0x100
 800215e:	af00      	add	r7, sp, #0
 8002160:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002174:	68d9      	ldr	r1, [r3, #12]
 8002176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	ea40 0301 	orr.w	r3, r0, r1
 8002180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	431a      	orrs	r2, r3
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	431a      	orrs	r2, r3
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80021b0:	f021 010c 	bic.w	r1, r1, #12
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80021be:	430b      	orrs	r3, r1
 80021c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80021ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d2:	6999      	ldr	r1, [r3, #24]
 80021d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	ea40 0301 	orr.w	r3, r0, r1
 80021de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002424 <UART_SetConfig+0x2cc>)
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d005      	beq.n	80021f8 <UART_SetConfig+0xa0>
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002428 <UART_SetConfig+0x2d0>)
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d104      	bne.n	8002202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021f8:	f7fe ff60 	bl	80010bc <HAL_RCC_GetPCLK2Freq>
 80021fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002200:	e003      	b.n	800220a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002202:	f7fe ff47 	bl	8001094 <HAL_RCC_GetPCLK1Freq>
 8002206:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002214:	f040 810c 	bne.w	8002430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800221c:	2200      	movs	r2, #0
 800221e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002222:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800222a:	4622      	mov	r2, r4
 800222c:	462b      	mov	r3, r5
 800222e:	1891      	adds	r1, r2, r2
 8002230:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002232:	415b      	adcs	r3, r3
 8002234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800223a:	4621      	mov	r1, r4
 800223c:	eb12 0801 	adds.w	r8, r2, r1
 8002240:	4629      	mov	r1, r5
 8002242:	eb43 0901 	adc.w	r9, r3, r1
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800225a:	4690      	mov	r8, r2
 800225c:	4699      	mov	r9, r3
 800225e:	4623      	mov	r3, r4
 8002260:	eb18 0303 	adds.w	r3, r8, r3
 8002264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002268:	462b      	mov	r3, r5
 800226a:	eb49 0303 	adc.w	r3, r9, r3
 800226e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800227e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002286:	460b      	mov	r3, r1
 8002288:	18db      	adds	r3, r3, r3
 800228a:	653b      	str	r3, [r7, #80]	@ 0x50
 800228c:	4613      	mov	r3, r2
 800228e:	eb42 0303 	adc.w	r3, r2, r3
 8002292:	657b      	str	r3, [r7, #84]	@ 0x54
 8002294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800229c:	f7fd ffba 	bl	8000214 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4b61      	ldr	r3, [pc, #388]	@ (800242c <UART_SetConfig+0x2d4>)
 80022a6:	fba3 2302 	umull	r2, r3, r3, r2
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	011c      	lsls	r4, r3, #4
 80022ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80022bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80022c0:	4642      	mov	r2, r8
 80022c2:	464b      	mov	r3, r9
 80022c4:	1891      	adds	r1, r2, r2
 80022c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80022c8:	415b      	adcs	r3, r3
 80022ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022d0:	4641      	mov	r1, r8
 80022d2:	eb12 0a01 	adds.w	sl, r2, r1
 80022d6:	4649      	mov	r1, r9
 80022d8:	eb43 0b01 	adc.w	fp, r3, r1
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022f0:	4692      	mov	sl, r2
 80022f2:	469b      	mov	fp, r3
 80022f4:	4643      	mov	r3, r8
 80022f6:	eb1a 0303 	adds.w	r3, sl, r3
 80022fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022fe:	464b      	mov	r3, r9
 8002300:	eb4b 0303 	adc.w	r3, fp, r3
 8002304:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002314:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800231c:	460b      	mov	r3, r1
 800231e:	18db      	adds	r3, r3, r3
 8002320:	643b      	str	r3, [r7, #64]	@ 0x40
 8002322:	4613      	mov	r3, r2
 8002324:	eb42 0303 	adc.w	r3, r2, r3
 8002328:	647b      	str	r3, [r7, #68]	@ 0x44
 800232a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800232e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002332:	f7fd ff6f 	bl	8000214 <__aeabi_uldivmod>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4611      	mov	r1, r2
 800233c:	4b3b      	ldr	r3, [pc, #236]	@ (800242c <UART_SetConfig+0x2d4>)
 800233e:	fba3 2301 	umull	r2, r3, r3, r1
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2264      	movs	r2, #100	@ 0x64
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	1acb      	subs	r3, r1, r3
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002352:	4b36      	ldr	r3, [pc, #216]	@ (800242c <UART_SetConfig+0x2d4>)
 8002354:	fba3 2302 	umull	r2, r3, r3, r2
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002360:	441c      	add	r4, r3
 8002362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800236c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	1891      	adds	r1, r2, r2
 800237a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800237c:	415b      	adcs	r3, r3
 800237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002384:	4641      	mov	r1, r8
 8002386:	1851      	adds	r1, r2, r1
 8002388:	6339      	str	r1, [r7, #48]	@ 0x30
 800238a:	4649      	mov	r1, r9
 800238c:	414b      	adcs	r3, r1
 800238e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800239c:	4659      	mov	r1, fp
 800239e:	00cb      	lsls	r3, r1, #3
 80023a0:	4651      	mov	r1, sl
 80023a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a6:	4651      	mov	r1, sl
 80023a8:	00ca      	lsls	r2, r1, #3
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	4642      	mov	r2, r8
 80023b2:	189b      	adds	r3, r3, r2
 80023b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023b8:	464b      	mov	r3, r9
 80023ba:	460a      	mov	r2, r1
 80023bc:	eb42 0303 	adc.w	r3, r2, r3
 80023c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80023d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80023d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80023d8:	460b      	mov	r3, r1
 80023da:	18db      	adds	r3, r3, r3
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023de:	4613      	mov	r3, r2
 80023e0:	eb42 0303 	adc.w	r3, r2, r3
 80023e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80023ee:	f7fd ff11 	bl	8000214 <__aeabi_uldivmod>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4b0d      	ldr	r3, [pc, #52]	@ (800242c <UART_SetConfig+0x2d4>)
 80023f8:	fba3 1302 	umull	r1, r3, r3, r2
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	2164      	movs	r1, #100	@ 0x64
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	3332      	adds	r3, #50	@ 0x32
 800240a:	4a08      	ldr	r2, [pc, #32]	@ (800242c <UART_SetConfig+0x2d4>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4422      	add	r2, r4
 800241e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002420:	e106      	b.n	8002630 <UART_SetConfig+0x4d8>
 8002422:	bf00      	nop
 8002424:	40011000 	.word	0x40011000
 8002428:	40011400 	.word	0x40011400
 800242c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002434:	2200      	movs	r2, #0
 8002436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800243a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800243e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002442:	4642      	mov	r2, r8
 8002444:	464b      	mov	r3, r9
 8002446:	1891      	adds	r1, r2, r2
 8002448:	6239      	str	r1, [r7, #32]
 800244a:	415b      	adcs	r3, r3
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
 800244e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002452:	4641      	mov	r1, r8
 8002454:	1854      	adds	r4, r2, r1
 8002456:	4649      	mov	r1, r9
 8002458:	eb43 0501 	adc.w	r5, r3, r1
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	00eb      	lsls	r3, r5, #3
 8002466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800246a:	00e2      	lsls	r2, r4, #3
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
 8002470:	4643      	mov	r3, r8
 8002472:	18e3      	adds	r3, r4, r3
 8002474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002478:	464b      	mov	r3, r9
 800247a:	eb45 0303 	adc.w	r3, r5, r3
 800247e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800248e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800249e:	4629      	mov	r1, r5
 80024a0:	008b      	lsls	r3, r1, #2
 80024a2:	4621      	mov	r1, r4
 80024a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a8:	4621      	mov	r1, r4
 80024aa:	008a      	lsls	r2, r1, #2
 80024ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80024b0:	f7fd feb0 	bl	8000214 <__aeabi_uldivmod>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4b60      	ldr	r3, [pc, #384]	@ (800263c <UART_SetConfig+0x4e4>)
 80024ba:	fba3 2302 	umull	r2, r3, r3, r2
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	011c      	lsls	r4, r3, #4
 80024c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80024d4:	4642      	mov	r2, r8
 80024d6:	464b      	mov	r3, r9
 80024d8:	1891      	adds	r1, r2, r2
 80024da:	61b9      	str	r1, [r7, #24]
 80024dc:	415b      	adcs	r3, r3
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e4:	4641      	mov	r1, r8
 80024e6:	1851      	adds	r1, r2, r1
 80024e8:	6139      	str	r1, [r7, #16]
 80024ea:	4649      	mov	r1, r9
 80024ec:	414b      	adcs	r3, r1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024fc:	4659      	mov	r1, fp
 80024fe:	00cb      	lsls	r3, r1, #3
 8002500:	4651      	mov	r1, sl
 8002502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002506:	4651      	mov	r1, sl
 8002508:	00ca      	lsls	r2, r1, #3
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	4603      	mov	r3, r0
 8002510:	4642      	mov	r2, r8
 8002512:	189b      	adds	r3, r3, r2
 8002514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002518:	464b      	mov	r3, r9
 800251a:	460a      	mov	r2, r1
 800251c:	eb42 0303 	adc.w	r3, r2, r3
 8002520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800252e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800253c:	4649      	mov	r1, r9
 800253e:	008b      	lsls	r3, r1, #2
 8002540:	4641      	mov	r1, r8
 8002542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002546:	4641      	mov	r1, r8
 8002548:	008a      	lsls	r2, r1, #2
 800254a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800254e:	f7fd fe61 	bl	8000214 <__aeabi_uldivmod>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4611      	mov	r1, r2
 8002558:	4b38      	ldr	r3, [pc, #224]	@ (800263c <UART_SetConfig+0x4e4>)
 800255a:	fba3 2301 	umull	r2, r3, r3, r1
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2264      	movs	r2, #100	@ 0x64
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	1acb      	subs	r3, r1, r3
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	3332      	adds	r3, #50	@ 0x32
 800256c:	4a33      	ldr	r2, [pc, #204]	@ (800263c <UART_SetConfig+0x4e4>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002578:	441c      	add	r4, r3
 800257a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800257e:	2200      	movs	r2, #0
 8002580:	673b      	str	r3, [r7, #112]	@ 0x70
 8002582:	677a      	str	r2, [r7, #116]	@ 0x74
 8002584:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002588:	4642      	mov	r2, r8
 800258a:	464b      	mov	r3, r9
 800258c:	1891      	adds	r1, r2, r2
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	415b      	adcs	r3, r3
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002598:	4641      	mov	r1, r8
 800259a:	1851      	adds	r1, r2, r1
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	4649      	mov	r1, r9
 80025a0:	414b      	adcs	r3, r1
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025b0:	4659      	mov	r1, fp
 80025b2:	00cb      	lsls	r3, r1, #3
 80025b4:	4651      	mov	r1, sl
 80025b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ba:	4651      	mov	r1, sl
 80025bc:	00ca      	lsls	r2, r1, #3
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	4642      	mov	r2, r8
 80025c6:	189b      	adds	r3, r3, r2
 80025c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025ca:	464b      	mov	r3, r9
 80025cc:	460a      	mov	r2, r1
 80025ce:	eb42 0303 	adc.w	r3, r2, r3
 80025d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80025de:	667a      	str	r2, [r7, #100]	@ 0x64
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80025ec:	4649      	mov	r1, r9
 80025ee:	008b      	lsls	r3, r1, #2
 80025f0:	4641      	mov	r1, r8
 80025f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025f6:	4641      	mov	r1, r8
 80025f8:	008a      	lsls	r2, r1, #2
 80025fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80025fe:	f7fd fe09 	bl	8000214 <__aeabi_uldivmod>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <UART_SetConfig+0x4e4>)
 8002608:	fba3 1302 	umull	r1, r3, r3, r2
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	2164      	movs	r1, #100	@ 0x64
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	3332      	adds	r3, #50	@ 0x32
 800261a:	4a08      	ldr	r2, [pc, #32]	@ (800263c <UART_SetConfig+0x4e4>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4422      	add	r2, r4
 800262e:	609a      	str	r2, [r3, #8]
}
 8002630:	bf00      	nop
 8002632:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002636:	46bd      	mov	sp, r7
 8002638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263c:	51eb851f 	.word	0x51eb851f

08002640 <__libc_init_array>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	4d0d      	ldr	r5, [pc, #52]	@ (8002678 <__libc_init_array+0x38>)
 8002644:	4c0d      	ldr	r4, [pc, #52]	@ (800267c <__libc_init_array+0x3c>)
 8002646:	1b64      	subs	r4, r4, r5
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	2600      	movs	r6, #0
 800264c:	42a6      	cmp	r6, r4
 800264e:	d109      	bne.n	8002664 <__libc_init_array+0x24>
 8002650:	4d0b      	ldr	r5, [pc, #44]	@ (8002680 <__libc_init_array+0x40>)
 8002652:	4c0c      	ldr	r4, [pc, #48]	@ (8002684 <__libc_init_array+0x44>)
 8002654:	f000 f818 	bl	8002688 <_init>
 8002658:	1b64      	subs	r4, r4, r5
 800265a:	10a4      	asrs	r4, r4, #2
 800265c:	2600      	movs	r6, #0
 800265e:	42a6      	cmp	r6, r4
 8002660:	d105      	bne.n	800266e <__libc_init_array+0x2e>
 8002662:	bd70      	pop	{r4, r5, r6, pc}
 8002664:	f855 3b04 	ldr.w	r3, [r5], #4
 8002668:	4798      	blx	r3
 800266a:	3601      	adds	r6, #1
 800266c:	e7ee      	b.n	800264c <__libc_init_array+0xc>
 800266e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002672:	4798      	blx	r3
 8002674:	3601      	adds	r6, #1
 8002676:	e7f2      	b.n	800265e <__libc_init_array+0x1e>
 8002678:	080026b0 	.word	0x080026b0
 800267c:	080026b0 	.word	0x080026b0
 8002680:	080026b0 	.word	0x080026b0
 8002684:	080026b4 	.word	0x080026b4

08002688 <_init>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr

08002694 <_fini>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr
