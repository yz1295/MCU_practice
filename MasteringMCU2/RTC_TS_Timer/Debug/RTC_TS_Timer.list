
RTC_TS_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f5c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003120  08003120  00004120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003150  08003150  00004150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003158  08003158  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003158  08003158  00004158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800315c  0800315c  0000415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003160  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  0800316c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  0800316c  000050d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9b0  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1b  00000000  00000000  000139ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00015808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acb  00000000  00000000  000165c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c0b  00000000  00000000  0001708b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104a9  00000000  00000000  00038c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d287c  00000000  00000000  0004913f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b9bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  0011ba00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c3  00000000  00000000  0011f490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003108 	.word	0x08003108

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003108 	.word	0x08003108

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fabc 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f80a 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f96c 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f93c 	bl	80007bc <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000544:	f000 f89e 	bl	8000684 <MX_RTC_Init>
  MX_TIM6_Init();
 8000548:	f000 f904 	bl	8000754 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x1c>

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0ac      	sub	sp, #176	@ 0xb0
 8000554:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b46      	ldr	r3, [pc, #280]	@ (8000674 <SystemClock_Config+0x124>)
 800055c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055e:	4a45      	ldr	r2, [pc, #276]	@ (8000674 <SystemClock_Config+0x124>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000564:	6413      	str	r3, [r2, #64]	@ 0x40
 8000566:	4b43      	ldr	r3, [pc, #268]	@ (8000674 <SystemClock_Config+0x124>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b40      	ldr	r3, [pc, #256]	@ (8000678 <SystemClock_Config+0x128>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800057e:	4a3e      	ldr	r2, [pc, #248]	@ (8000678 <SystemClock_Config+0x128>)
 8000580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b3c      	ldr	r3, [pc, #240]	@ (8000678 <SystemClock_Config+0x128>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000592:	230a      	movs	r3, #10
 8000594:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80005a2:	2310      	movs	r3, #16
 80005a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005ba:	2310      	movs	r3, #16
 80005bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fc0a 	bl	8001df8 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <SystemClock_Config+0xa2>
  {
    _Error_Handler(__FILE__, __LINE__);
 80005ea:	219e      	movs	r1, #158	@ 0x9e
 80005ec:	4823      	ldr	r0, [pc, #140]	@ (800067c <SystemClock_Config+0x12c>)
 80005ee:	f000 f979 	bl	80008e4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	66bb      	str	r3, [r7, #104]	@ 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000602:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	67bb      	str	r3, [r7, #120]	@ 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000608:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fd7e 	bl	8001110 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800061a:	21ac      	movs	r1, #172	@ 0xac
 800061c:	4817      	ldr	r0, [pc, #92]	@ (800067c <SystemClock_Config+0x12c>)
 800061e:	f000 f961 	bl	80008e4 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000622:	2320      	movs	r3, #32
 8000624:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fe87 	bl	8001344 <HAL_RCCEx_PeriphCLKConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d003      	beq.n	8000644 <SystemClock_Config+0xf4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800063c:	21b3      	movs	r1, #179	@ 0xb3
 800063e:	480f      	ldr	r0, [pc, #60]	@ (800067c <SystemClock_Config+0x12c>)
 8000640:	f000 f950 	bl	80008e4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000644:	f000 fe4a 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 8000648:	4603      	mov	r3, r0
 800064a:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <SystemClock_Config+0x130>)
 800064c:	fba2 2303 	umull	r2, r3, r2, r3
 8000650:	099b      	lsrs	r3, r3, #6
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fb77 	bl	8000d46 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000658:	2004      	movs	r0, #4
 800065a:	f000 fb81 	bl	8000d60 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	f04f 30ff 	mov.w	r0, #4294967295
 8000666:	f000 fb52 	bl	8000d0e <HAL_NVIC_SetPriority>
}
 800066a:	bf00      	nop
 800066c:	37b0      	adds	r7, #176	@ 0xb0
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000
 800067c:	08003120 	.word	0x08003120
 8000680:	10624dd3 	.word	0x10624dd3

08000684 <MX_RTC_Init>:

/* RTC init function */
static void MX_RTC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  /**Initialize RTC Only */
  hrtc.Instance = RTC;
 800068a:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <MX_RTC_Init+0xc4>)
 800068c:	4a2f      	ldr	r2, [pc, #188]	@ (800074c <MX_RTC_Init+0xc8>)
 800068e:	601a      	str	r2, [r3, #0]
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8000690:	2100      	movs	r1, #0
 8000692:	482d      	ldr	r0, [pc, #180]	@ (8000748 <MX_RTC_Init+0xc4>)
 8000694:	f002 f8cf 	bl	8002836 <HAL_RTCEx_BKUPRead>
 8000698:	4603      	mov	r3, r0
 800069a:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 800069e:	4293      	cmp	r3, r2
 80006a0:	d04d      	beq.n	800073e <MX_RTC_Init+0xba>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006a2:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <MX_RTC_Init+0xc4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006a8:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <MX_RTC_Init+0xc4>)
 80006aa:	227f      	movs	r2, #127	@ 0x7f
 80006ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <MX_RTC_Init+0xc4>)
 80006b0:	22ff      	movs	r2, #255	@ 0xff
 80006b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b4:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <MX_RTC_Init+0xc4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <MX_RTC_Init+0xc4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_RTC_Init+0xc4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006c6:	4820      	ldr	r0, [pc, #128]	@ (8000748 <MX_RTC_Init+0xc4>)
 80006c8:	f001 fe34 	bl	8002334 <HAL_RTC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d003      	beq.n	80006da <MX_RTC_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 80006d2:	21d4      	movs	r1, #212	@ 0xd4
 80006d4:	481e      	ldr	r0, [pc, #120]	@ (8000750 <MX_RTC_Init+0xcc>)
 80006d6:	f000 f905 	bl	80008e4 <_Error_Handler>
  }

    /**Initialize RTC and set the Time and Date 
    */
  sTime.Hours = 0x0;
 80006da:	2300      	movs	r3, #0
 80006dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80006de:	2300      	movs	r3, #0
 80006e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	4814      	ldr	r0, [pc, #80]	@ (8000748 <MX_RTC_Init+0xc4>)
 80006f6:	f001 feae 	bl	8002456 <HAL_RTC_SetTime>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <MX_RTC_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000700:	21e0      	movs	r1, #224	@ 0xe0
 8000702:	4813      	ldr	r0, [pc, #76]	@ (8000750 <MX_RTC_Init+0xcc>)
 8000704:	f000 f8ee 	bl	80008e4 <_Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000708:	2301      	movs	r3, #1
 800070a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800070c:	2301      	movs	r3, #1
 800070e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000710:	2301      	movs	r3, #1
 8000712:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000714:	2300      	movs	r3, #0
 8000716:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	480a      	ldr	r0, [pc, #40]	@ (8000748 <MX_RTC_Init+0xc4>)
 8000720:	f001 ff56 	bl	80025d0 <HAL_RTC_SetDate>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <MX_RTC_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 800072a:	21ea      	movs	r1, #234	@ 0xea
 800072c:	4808      	ldr	r0, [pc, #32]	@ (8000750 <MX_RTC_Init+0xcc>)
 800072e:	f000 f8d9 	bl	80008e4 <_Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8000732:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000736:	2100      	movs	r1, #0
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <MX_RTC_Init+0xc4>)
 800073a:	f002 f862 	bl	8002802 <HAL_RTCEx_BKUPWrite>
  }
}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028
 800074c:	40002800 	.word	0x40002800
 8000750:	08003120 	.word	0x08003120

08000754 <MX_TIM6_Init>:

/* TIM6 init function */
static void MX_TIM6_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_TIM6_Init+0x5c>)
 800075c:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_TIM6_Init+0x60>)
 800075e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_TIM6_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_TIM6_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_TIM6_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000772:	480f      	ldr	r0, [pc, #60]	@ (80007b0 <MX_TIM6_Init+0x5c>)
 8000774:	f002 f877 	bl	8002866 <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <MX_TIM6_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 800077e:	21fd      	movs	r1, #253	@ 0xfd
 8000780:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <MX_TIM6_Init+0x64>)
 8000782:	f000 f8af 	bl	80008e4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	4807      	ldr	r0, [pc, #28]	@ (80007b0 <MX_TIM6_Init+0x5c>)
 8000794:	f002 f956 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d004      	beq.n	80007a8 <MX_TIM6_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 800079e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_TIM6_Init+0x64>)
 80007a4:	f000 f89e 	bl	80008e4 <_Error_Handler>
  }

}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000048 	.word	0x20000048
 80007b4:	40001000 	.word	0x40001000
 80007b8:	08003120 	.word	0x08003120

080007bc <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	@ (8000810 <MX_USART2_UART_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007f4:	f002 f9a2 	bl	8002b3c <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80007fe:	f240 1117 	movw	r1, #279	@ 0x117
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 8000804:	f000 f86e 	bl	80008e4 <_Error_Handler>
  }

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000090 	.word	0x20000090
 8000810:	40004400 	.word	0x40004400
 8000814:	08003120 	.word	0x08003120

08000818 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b2d      	ldr	r3, [pc, #180]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a2c      	ldr	r2, [pc, #176]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a25      	ldr	r2, [pc, #148]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a1e      	ldr	r2, [pc, #120]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <MX_GPIO_Init+0xc0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	4812      	ldr	r0, [pc, #72]	@ (80008dc <MX_GPIO_Init+0xc4>)
 8000894:	f000 fc22 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <MX_GPIO_Init+0xc8>)
 80008b0:	f000 fa80 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b4:	2320      	movs	r3, #32
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_GPIO_Init+0xc4>)
 80008cc:	f000 fa72 	bl	8000db4 <HAL_GPIO_Init>
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020800 	.word	0x40020800

080008e4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80008ee:	bf00      	nop
 80008f0:	e7fd      	b.n	80008ee <_Error_Handler+0xa>

080008f2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008f6:	2007      	movs	r0, #7
 80008f8:	f000 f9fe 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	f06f 000b 	mvn.w	r0, #11
 8000904:	f000 fa03 	bl	8000d0e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	f06f 000a 	mvn.w	r0, #10
 8000910:	f000 f9fd 	bl	8000d0e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	f06f 0009 	mvn.w	r0, #9
 800091c:	f000 f9f7 	bl	8000d0e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	f06f 0004 	mvn.w	r0, #4
 8000928:	f000 f9f1 	bl	8000d0e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	f06f 0003 	mvn.w	r0, #3
 8000934:	f000 f9eb 	bl	8000d0e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	f06f 0001 	mvn.w	r0, #1
 8000940:	f000 f9e5 	bl	8000d0e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 f9df 	bl	8000d0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <HAL_RTC_MspInit+0x24>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d102      	bne.n	800096c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <HAL_RTC_MspInit+0x28>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	40002800 	.word	0x40002800
 800097c:	42470e3c 	.word	0x42470e3c

08000980 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0b      	ldr	r2, [pc, #44]	@ (80009bc <HAL_TIM_Base_MspInit+0x3c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d10d      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <HAL_TIM_Base_MspInit+0x40>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a09      	ldr	r2, [pc, #36]	@ (80009c0 <HAL_TIM_Base_MspInit+0x40>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <HAL_TIM_Base_MspInit+0x40>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40001000 	.word	0x40001000
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <HAL_UART_MspInit+0x58>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d11d      	bne.n	8000a12 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_UART_MspInit+0x5c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <HAL_UART_MspInit+0x5c>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_UART_MspInit+0x5c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f2:	230c      	movs	r3, #12
 80009f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <HAL_UART_MspInit+0x60>)
 8000a0e:	f000 f9d1 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f892 	bl	8000b54 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000a30:	f000 f9b2 	bl	8000d98 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a60:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a62:	490e      	ldr	r1, [pc, #56]	@ (8000a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a64:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a78:	4c0b      	ldr	r4, [pc, #44]	@ (8000aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a86:	f7ff ffd7 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f002 fb19 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fd4f 	bl	8000530 <main>
  bx  lr    
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa0:	08003160 	.word	0x08003160
  ldr r2, =_sbss
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa8:	200000d8 	.word	0x200000d8

08000aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <HAL_Init+0x40>)
 8000aba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <HAL_Init+0x40>)
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	@ (8000af0 <HAL_Init+0x40>)
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f90d 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff ff05 	bl	80008f2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f917 	bl	8000d46 <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f8ed 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	@ (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000004 	.word	0x20000004

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	200000d4 	.word	0x200000d4

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	@ (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200000d4 	.word	0x200000d4

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	@ 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff47 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff5c 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffb0 	bl	8000cb4 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d106      	bne.n	8000d7c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d7a:	e005      	b.n	8000d88 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d82:	f023 0304 	bic.w	r3, r3, #4
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d9c:	f000 f802 	bl	8000da4 <HAL_SYSTICK_Callback>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e165      	b.n	800109c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8154 	bne.w	8001096 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d005      	beq.n	8000e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d130      	bne.n	8000e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d017      	beq.n	8000ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d123      	bne.n	8000ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	69b9      	ldr	r1, [r7, #24]
 8000ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0203 	and.w	r2, r3, #3
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80ae 	beq.w	8001096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80010b4 <HAL_GPIO_Init+0x300>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	4a5c      	ldr	r2, [pc, #368]	@ (80010b4 <HAL_GPIO_Init+0x300>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80010b4 <HAL_GPIO_Init+0x300>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f56:	4a58      	ldr	r2, [pc, #352]	@ (80010b8 <HAL_GPIO_Init+0x304>)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	@ (80010bc <HAL_GPIO_Init+0x308>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d025      	beq.n	8000fce <HAL_GPIO_Init+0x21a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	@ (80010c0 <HAL_GPIO_Init+0x30c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d01f      	beq.n	8000fca <HAL_GPIO_Init+0x216>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80010c4 <HAL_GPIO_Init+0x310>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x212>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	@ (80010c8 <HAL_GPIO_Init+0x314>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x20e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80010cc <HAL_GPIO_Init+0x318>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x20a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80010d0 <HAL_GPIO_Init+0x31c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x206>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a49      	ldr	r2, [pc, #292]	@ (80010d4 <HAL_GPIO_Init+0x320>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x202>
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	e00c      	b.n	8000fd0 <HAL_GPIO_Init+0x21c>
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	e00a      	b.n	8000fd0 <HAL_GPIO_Init+0x21c>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x21c>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x21c>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x21c>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x21c>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x21c>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	f002 0203 	and.w	r2, r2, #3
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	@ (80010b8 <HAL_GPIO_Init+0x304>)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fee:	4b3a      	ldr	r3, [pc, #232]	@ (80010d8 <HAL_GPIO_Init+0x324>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001012:	4a31      	ldr	r2, [pc, #196]	@ (80010d8 <HAL_GPIO_Init+0x324>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001018:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <HAL_GPIO_Init+0x324>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103c:	4a26      	ldr	r2, [pc, #152]	@ (80010d8 <HAL_GPIO_Init+0x324>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001042:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <HAL_GPIO_Init+0x324>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001066:	4a1c      	ldr	r2, [pc, #112]	@ (80010d8 <HAL_GPIO_Init+0x324>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <HAL_GPIO_Init+0x324>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001090:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <HAL_GPIO_Init+0x324>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	f67f ae96 	bls.w	8000dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3724      	adds	r7, #36	@ 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40013c00 	.word	0x40013c00

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0cc      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001124:	4b68      	ldr	r3, [pc, #416]	@ (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d90c      	bls.n	800114c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b65      	ldr	r3, [pc, #404]	@ (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b63      	ldr	r3, [pc, #396]	@ (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0b8      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001164:	4b59      	ldr	r3, [pc, #356]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a58      	ldr	r2, [pc, #352]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800116e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800117c:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a52      	ldr	r2, [pc, #328]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001188:	4b50      	ldr	r3, [pc, #320]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	494d      	ldr	r1, [pc, #308]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d044      	beq.n	8001230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	4b47      	ldr	r3, [pc, #284]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d119      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e07f      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d003      	beq.n	80011ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ce:	4b3f      	ldr	r3, [pc, #252]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e06f      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011de:	4b3b      	ldr	r3, [pc, #236]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e067      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ee:	4b37      	ldr	r3, [pc, #220]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f023 0203 	bic.w	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4934      	ldr	r1, [pc, #208]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001200:	f7ff fcbc 	bl	8000b7c <HAL_GetTick>
 8001204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001206:	e00a      	b.n	800121e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001208:	f7ff fcb8 	bl	8000b7c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001216:	4293      	cmp	r3, r2
 8001218:	d901      	bls.n	800121e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e04f      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121e:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 020c 	and.w	r2, r3, #12
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	429a      	cmp	r2, r3
 800122e:	d1eb      	bne.n	8001208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001230:	4b25      	ldr	r3, [pc, #148]	@ (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d20c      	bcs.n	8001258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e032      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4916      	ldr	r1, [pc, #88]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	4313      	orrs	r3, r2
 8001274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	490e      	ldr	r1, [pc, #56]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001296:	f000 fb7f 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 800129a:	4602      	mov	r2, r0
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	490a      	ldr	r1, [pc, #40]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	5ccb      	ldrb	r3, [r1, r3]
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <HAL_RCC_ClockConfig+0x1c8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fc1c 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023c00 	.word	0x40023c00
 80012cc:	40023800 	.word	0x40023800
 80012d0:	08003138 	.word	0x08003138
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000000 	.word	0x20000000

080012f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012f8:	f7ff fff0 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	0a9b      	lsrs	r3, r3, #10
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4903      	ldr	r1, [pc, #12]	@ (8001318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	08003148 	.word	0x08003148

0800131c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001320:	f7ff ffdc 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	@ (800133c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0b5b      	lsrs	r3, r3, #13
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4903      	ldr	r1, [pc, #12]	@ (8001340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	08003148 	.word	0x08003148

08001344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	@ 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d010      	beq.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800137c:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800137e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001382:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800138a:	496c      	ldr	r1, [pc, #432]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800138c:	4313      	orrs	r3, r2
 800138e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800139a:	2301      	movs	r3, #1
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d010      	beq.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80013aa:	4b64      	ldr	r3, [pc, #400]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80013ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b8:	4960      	ldr	r1, [pc, #384]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d017      	beq.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013d8:	4b58      	ldr	r3, [pc, #352]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80013da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4955      	ldr	r1, [pc, #340]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80013f6:	d101      	bne.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d017      	beq.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001414:	4b49      	ldr	r3, [pc, #292]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001422:	4946      	ldr	r1, [pc, #280]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001424:	4313      	orrs	r3, r2
 8001426:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001432:	d101      	bne.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001434:	2301      	movs	r3, #1
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 808a 	beq.w	8001566 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b39      	ldr	r3, [pc, #228]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a38      	ldr	r2, [pc, #224]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b36      	ldr	r3, [pc, #216]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800146e:	4b34      	ldr	r3, [pc, #208]	@ (8001540 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a33      	ldr	r2, [pc, #204]	@ (8001540 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001478:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800147a:	f7ff fb7f 	bl	8000b7c <HAL_GetTick>
 800147e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001482:	f7ff fb7b 	bl	8000b7c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e278      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001494:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014a8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02f      	beq.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014b8:	6a3a      	ldr	r2, [r7, #32]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d028      	beq.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014c6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80014d4:	4a19      	ldr	r2, [pc, #100]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d114      	bne.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb49 	bl	8000b7c <HAL_GetTick>
 80014ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fb45 	bl	8000b7c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e240      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ee      	beq.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001518:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800151c:	d114      	bne.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800152e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001532:	4902      	ldr	r1, [pc, #8]	@ (800153c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001534:	4313      	orrs	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
 8001538:	e00c      	b.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000
 8001544:	42470e40 	.word	0x42470e40
 8001548:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a49      	ldr	r2, [pc, #292]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800154e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001552:	6093      	str	r3, [r2, #8]
 8001554:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001556:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	4944      	ldr	r1, [pc, #272]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001562:	4313      	orrs	r3, r2
 8001564:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001578:	4b3f      	ldr	r3, [pc, #252]	@ (8001678 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800157a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00a      	beq.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800158e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	4937      	ldr	r1, [pc, #220]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001598:	4313      	orrs	r3, r2
 800159a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00a      	beq.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80015aa:	4b32      	ldr	r3, [pc, #200]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b8:	492e      	ldr	r1, [pc, #184]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d011      	beq.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015da:	4926      	ldr	r1, [pc, #152]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80015ea:	d101      	bne.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80015fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001602:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	491a      	ldr	r1, [pc, #104]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800160c:	4313      	orrs	r3, r2
 800160e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001624:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800162c:	4911      	ldr	r1, [pc, #68]	@ (8001674 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800162e:	4313      	orrs	r3, r2
 8001630:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800163c:	d101      	bne.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800163e:	2301      	movs	r3, #1
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001644:	2b01      	cmp	r3, #1
 8001646:	d005      	beq.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001650:	f040 80ff 	bne.w	8001852 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800165a:	f7ff fa8f 	bl	8000b7c <HAL_GetTick>
 800165e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001660:	e00e      	b.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001662:	f7ff fa8b 	bl	8000b7c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d907      	bls.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e188      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001674:	40023800 	.word	0x40023800
 8001678:	424711e0 	.word	0x424711e0
 800167c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001680:	4b7e      	ldr	r3, [pc, #504]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ea      	bne.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d028      	beq.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d124      	bne.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80016b4:	4b71      	ldr	r3, [pc, #452]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80016b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016ba:	0c1b      	lsrs	r3, r3, #16
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	3301      	adds	r3, #1
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80016c6:	4b6d      	ldr	r3, [pc, #436]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80016c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016cc:	0e1b      	lsrs	r3, r3, #24
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	019b      	lsls	r3, r3, #6
 80016de:	431a      	orrs	r2, r3
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	085b      	lsrs	r3, r3, #1
 80016e4:	3b01      	subs	r3, #1
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	431a      	orrs	r2, r3
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	071b      	lsls	r3, r3, #28
 80016f6:	4961      	ldr	r1, [pc, #388]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001712:	d00a      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800171c:	2b00      	cmp	r3, #0
 800171e:	d035      	beq.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001728:	d130      	bne.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800172a:	4b54      	ldr	r3, [pc, #336]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800172c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	3301      	adds	r3, #1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800173c:	4b4f      	ldr	r3, [pc, #316]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800173e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001742:	0f1b      	lsrs	r3, r3, #28
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	019b      	lsls	r3, r3, #6
 8001754:	431a      	orrs	r2, r3
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	3b01      	subs	r3, #1
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	431a      	orrs	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	071b      	lsls	r3, r3, #28
 800176c:	4943      	ldr	r1, [pc, #268]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800176e:	4313      	orrs	r3, r2
 8001770:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001774:	4b41      	ldr	r3, [pc, #260]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177a:	f023 021f 	bic.w	r2, r3, #31
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	3b01      	subs	r3, #1
 8001784:	493d      	ldr	r1, [pc, #244]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001786:	4313      	orrs	r3, r2
 8001788:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d029      	beq.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800179c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017a0:	d124      	bne.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80017a2:	4b36      	ldr	r3, [pc, #216]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	3301      	adds	r3, #1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80017b4:	4b31      	ldr	r3, [pc, #196]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017ba:	0f1b      	lsrs	r3, r3, #28
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	019b      	lsls	r3, r3, #6
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	3b01      	subs	r3, #1
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	431a      	orrs	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	431a      	orrs	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	071b      	lsls	r3, r3, #28
 80017e4:	4925      	ldr	r1, [pc, #148]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d016      	beq.n	8001826 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	3b01      	subs	r3, #1
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	071b      	lsls	r3, r3, #28
 800181e:	4917      	ldr	r1, [pc, #92]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001820:	4313      	orrs	r3, r2
 8001822:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff f9a6 	bl	8000b7c <HAL_GetTick>
 8001830:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001834:	f7ff f9a2 	bl	8000b7c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e09f      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001854:	2b01      	cmp	r3, #1
 8001856:	f040 8095 	bne.w	8001984 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff f98c 	bl	8000b7c <HAL_GetTick>
 8001864:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001866:	e00f      	b.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001868:	f7ff f988 	bl	8000b7c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d908      	bls.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e085      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	42470068 	.word	0x42470068
 8001884:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001888:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001894:	d0e8      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x566>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d02b      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d127      	bne.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80018be:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80018c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c4:	0c1b      	lsrs	r3, r3, #16
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	3301      	adds	r3, #1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	431a      	orrs	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	061b      	lsls	r3, r3, #24
 80018ec:	4928      	ldr	r1, [pc, #160]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80018f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001902:	3b01      	subs	r3, #1
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	4922      	ldr	r1, [pc, #136]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001908:	4313      	orrs	r3, r2
 800190a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01d      	beq.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001922:	d118      	bne.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	0e1b      	lsrs	r3, r3, #24
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699a      	ldr	r2, [r3, #24]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	019b      	lsls	r3, r3, #6
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	431a      	orrs	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	4910      	ldr	r1, [pc, #64]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800195c:	f7ff f90e 	bl	8000b7c <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001964:	f7ff f90a 	bl	8000b7c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e007      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800197e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001982:	d1ef      	bne.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3730      	adds	r7, #48	@ 0x30
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	42470070 	.word	0x42470070

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800199c:	b0ae      	sub	sp, #184	@ 0xb8
 800199e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019be:	4bcb      	ldr	r3, [pc, #812]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	f200 8206 	bhi.w	8001dd8 <HAL_RCC_GetSysClockFreq+0x440>
 80019cc:	a201      	add	r2, pc, #4	@ (adr r2, 80019d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	08001a09 	.word	0x08001a09
 80019d8:	08001dd9 	.word	0x08001dd9
 80019dc:	08001dd9 	.word	0x08001dd9
 80019e0:	08001dd9 	.word	0x08001dd9
 80019e4:	08001a11 	.word	0x08001a11
 80019e8:	08001dd9 	.word	0x08001dd9
 80019ec:	08001dd9 	.word	0x08001dd9
 80019f0:	08001dd9 	.word	0x08001dd9
 80019f4:	08001a19 	.word	0x08001a19
 80019f8:	08001dd9 	.word	0x08001dd9
 80019fc:	08001dd9 	.word	0x08001dd9
 8001a00:	08001dd9 	.word	0x08001dd9
 8001a04:	08001c09 	.word	0x08001c09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4bb9      	ldr	r3, [pc, #740]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001a0e:	e1e7      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a10:	4bb8      	ldr	r3, [pc, #736]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a16:	e1e3      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a18:	4bb4      	ldr	r3, [pc, #720]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a24:	4bb1      	ldr	r3, [pc, #708]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d071      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a30:	4bae      	ldr	r3, [pc, #696]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	2200      	movs	r2, #0
 8001a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a3c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001a56:	4622      	mov	r2, r4
 8001a58:	462b      	mov	r3, r5
 8001a5a:	f04f 0000 	mov.w	r0, #0
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	0159      	lsls	r1, r3, #5
 8001a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a68:	0150      	lsls	r0, r2, #5
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4621      	mov	r1, r4
 8001a70:	1a51      	subs	r1, r2, r1
 8001a72:	6439      	str	r1, [r7, #64]	@ 0x40
 8001a74:	4629      	mov	r1, r5
 8001a76:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001a88:	4649      	mov	r1, r9
 8001a8a:	018b      	lsls	r3, r1, #6
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a92:	4641      	mov	r1, r8
 8001a94:	018a      	lsls	r2, r1, #6
 8001a96:	4641      	mov	r1, r8
 8001a98:	1a51      	subs	r1, r2, r1
 8001a9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001a9c:	4649      	mov	r1, r9
 8001a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	00cb      	lsls	r3, r1, #3
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001aba:	4641      	mov	r1, r8
 8001abc:	00ca      	lsls	r2, r1, #3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	189b      	adds	r3, r3, r2
 8001ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aca:	462b      	mov	r3, r5
 8001acc:	460a      	mov	r2, r1
 8001ace:	eb42 0303 	adc.w	r3, r2, r3
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	024b      	lsls	r3, r1, #9
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aea:	4621      	mov	r1, r4
 8001aec:	024a      	lsls	r2, r1, #9
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001afc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b00:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001b04:	f7fe fb7e 	bl	8000204 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b12:	e067      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b14:	4b75      	ldr	r3, [pc, #468]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b20:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001b24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b2e:	2300      	movs	r3, #0
 8001b30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b32:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001b36:	4622      	mov	r2, r4
 8001b38:	462b      	mov	r3, r5
 8001b3a:	f04f 0000 	mov.w	r0, #0
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	0159      	lsls	r1, r3, #5
 8001b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b48:	0150      	lsls	r0, r2, #5
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4621      	mov	r1, r4
 8001b50:	1a51      	subs	r1, r2, r1
 8001b52:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b54:	4629      	mov	r1, r5
 8001b56:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001b68:	4649      	mov	r1, r9
 8001b6a:	018b      	lsls	r3, r1, #6
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b72:	4641      	mov	r1, r8
 8001b74:	018a      	lsls	r2, r1, #6
 8001b76:	4641      	mov	r1, r8
 8001b78:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b8e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b96:	4692      	mov	sl, r2
 8001b98:	469b      	mov	fp, r3
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	eb1a 0303 	adds.w	r3, sl, r3
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	462b      	mov	r3, r5
 8001ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	028b      	lsls	r3, r1, #10
 8001bba:	4621      	mov	r1, r4
 8001bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	028a      	lsls	r2, r1, #10
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bcc:	2200      	movs	r2, #0
 8001bce:	673b      	str	r3, [r7, #112]	@ 0x70
 8001bd0:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bd2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bd6:	f7fe fb15 	bl	8000204 <__aeabi_uldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4613      	mov	r3, r2
 8001be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be4:	4b41      	ldr	r3, [pc, #260]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c06:	e0eb      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c08:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c14:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d06b      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c20:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x354>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	099b      	lsrs	r3, r3, #6
 8001c26:	2200      	movs	r2, #0
 8001c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c34:	2300      	movs	r3, #0
 8001c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	462b      	mov	r3, r5
 8001c40:	f04f 0000 	mov.w	r0, #0
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	0159      	lsls	r1, r3, #5
 8001c4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4e:	0150      	lsls	r0, r2, #5
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4621      	mov	r1, r4
 8001c56:	1a51      	subs	r1, r2, r1
 8001c58:	61b9      	str	r1, [r7, #24]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c6e:	4659      	mov	r1, fp
 8001c70:	018b      	lsls	r3, r1, #6
 8001c72:	4651      	mov	r1, sl
 8001c74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c78:	4651      	mov	r1, sl
 8001c7a:	018a      	lsls	r2, r1, #6
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c82:	4659      	mov	r1, fp
 8001c84:	eb63 0901 	sbc.w	r9, r3, r1
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c9c:	4690      	mov	r8, r2
 8001c9e:	4699      	mov	r9, r3
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	eb18 0303 	adds.w	r3, r8, r3
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	462b      	mov	r3, r5
 8001caa:	eb49 0303 	adc.w	r3, r9, r3
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	024b      	lsls	r3, r1, #9
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	024a      	lsls	r2, r1, #9
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001cd6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001cd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cdc:	f7fe fa92 	bl	8000204 <__aeabi_uldivmod>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cea:	e065      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x420>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	2200      	movs	r2, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	4611      	mov	r1, r2
 8001d04:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d08:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001d12:	4642      	mov	r2, r8
 8001d14:	464b      	mov	r3, r9
 8001d16:	f04f 0000 	mov.w	r0, #0
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	0159      	lsls	r1, r3, #5
 8001d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d24:	0150      	lsls	r0, r2, #5
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	1a51      	subs	r1, r2, r1
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	4649      	mov	r1, r9
 8001d32:	eb63 0301 	sbc.w	r3, r3, r1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d44:	4659      	mov	r1, fp
 8001d46:	018b      	lsls	r3, r1, #6
 8001d48:	4651      	mov	r1, sl
 8001d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d4e:	4651      	mov	r1, sl
 8001d50:	018a      	lsls	r2, r1, #6
 8001d52:	4651      	mov	r1, sl
 8001d54:	1a54      	subs	r4, r2, r1
 8001d56:	4659      	mov	r1, fp
 8001d58:	eb63 0501 	sbc.w	r5, r3, r1
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	00eb      	lsls	r3, r5, #3
 8001d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d6a:	00e2      	lsls	r2, r4, #3
 8001d6c:	4614      	mov	r4, r2
 8001d6e:	461d      	mov	r5, r3
 8001d70:	4643      	mov	r3, r8
 8001d72:	18e3      	adds	r3, r4, r3
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	464b      	mov	r3, r9
 8001d78:	eb45 0303 	adc.w	r3, r5, r3
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	028b      	lsls	r3, r1, #10
 8001d8e:	4621      	mov	r1, r4
 8001d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d94:	4621      	mov	r1, r4
 8001d96:	028a      	lsls	r2, r1, #10
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001da0:	2200      	movs	r2, #0
 8001da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001da4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001da6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001daa:	f7fe fa2b 	bl	8000204 <__aeabi_uldivmod>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4613      	mov	r3, r2
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0f1b      	lsrs	r3, r3, #28
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dd6:	e003      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	37b8      	adds	r7, #184	@ 0xb8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	00f42400 	.word	0x00f42400

08001df8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e28d      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8083 	beq.w	8001f1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e18:	4b94      	ldr	r3, [pc, #592]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d019      	beq.n	8001e58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e24:	4b91      	ldr	r3, [pc, #580]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e30:	4b8e      	ldr	r3, [pc, #568]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e3c:	d00c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d112      	bne.n	8001e70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	4b88      	ldr	r3, [pc, #544]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	4b84      	ldr	r3, [pc, #528]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d05b      	beq.n	8001f1c <HAL_RCC_OscConfig+0x124>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d157      	bne.n	8001f1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e25a      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x90>
 8001e7a:	4b7c      	ldr	r3, [pc, #496]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7b      	ldr	r2, [pc, #492]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0xcc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0xb4>
 8001e92:	4b76      	ldr	r3, [pc, #472]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a75      	ldr	r2, [pc, #468]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b73      	ldr	r3, [pc, #460]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a72      	ldr	r2, [pc, #456]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0xcc>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6b      	ldr	r2, [pc, #428]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fe56 	bl	8000b7c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7fe fe52 	bl	8000b7c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	@ 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e21f      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b61      	ldr	r3, [pc, #388]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xdc>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fe42 	bl	8000b7c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efc:	f7fe fe3e 	bl	8000b7c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	@ 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e20b      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	4b57      	ldr	r3, [pc, #348]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x104>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06f      	beq.n	800200a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f2a:	4b50      	ldr	r3, [pc, #320]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d017      	beq.n	8001f66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f36:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f42:	4b4a      	ldr	r3, [pc, #296]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b47      	ldr	r3, [pc, #284]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	4b44      	ldr	r3, [pc, #272]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b41      	ldr	r3, [pc, #260]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x186>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1d3      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4937      	ldr	r1, [pc, #220]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <HAL_RCC_OscConfig+0x278>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fdeb 	bl	8000b7c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe fde7 	bl	8000b7c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1b4      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4925      	ldr	r1, [pc, #148]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <HAL_RCC_OscConfig+0x278>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fdca 	bl	8000b7c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fec:	f7fe fdc6 	bl	8000b7c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e193      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d036      	beq.n	8002084 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_RCC_OscConfig+0x27c>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe fdaa 	bl	8000b7c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe fda6 	bl	8000b7c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e173      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <HAL_RCC_OscConfig+0x274>)
 8002040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x234>
 800204a:	e01b      	b.n	8002084 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_OscConfig+0x27c>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe fd93 	bl	8000b7c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	e00e      	b.n	8002078 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe fd8f 	bl	8000b7c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d907      	bls.n	8002078 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e15c      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
 800206c:	40023800 	.word	0x40023800
 8002070:	42470000 	.word	0x42470000
 8002074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b8a      	ldr	r3, [pc, #552]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800207a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ea      	bne.n	800205a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8097 	beq.w	80021c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b83      	ldr	r3, [pc, #524]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b7f      	ldr	r3, [pc, #508]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	4a7e      	ldr	r2, [pc, #504]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b2:	4b7c      	ldr	r3, [pc, #496]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b79      	ldr	r3, [pc, #484]	@ (80022a8 <HAL_RCC_OscConfig+0x4b0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d118      	bne.n	8002100 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ce:	4b76      	ldr	r3, [pc, #472]	@ (80022a8 <HAL_RCC_OscConfig+0x4b0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a75      	ldr	r2, [pc, #468]	@ (80022a8 <HAL_RCC_OscConfig+0x4b0>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020da:	f7fe fd4f 	bl	8000b7c <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7fe fd4b 	bl	8000b7c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e118      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	4b6c      	ldr	r3, [pc, #432]	@ (80022a8 <HAL_RCC_OscConfig+0x4b0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x31e>
 8002108:	4b66      	ldr	r3, [pc, #408]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	4a65      	ldr	r2, [pc, #404]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	@ 0x70
 8002114:	e01c      	b.n	8002150 <HAL_RCC_OscConfig+0x358>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b05      	cmp	r3, #5
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x340>
 800211e:	4b61      	ldr	r3, [pc, #388]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002122:	4a60      	ldr	r2, [pc, #384]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	6713      	str	r3, [r2, #112]	@ 0x70
 800212a:	4b5e      	ldr	r3, [pc, #376]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212e:	4a5d      	ldr	r2, [pc, #372]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6713      	str	r3, [r2, #112]	@ 0x70
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0x358>
 8002138:	4b5a      	ldr	r3, [pc, #360]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213c:	4a59      	ldr	r2, [pc, #356]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	6713      	str	r3, [r2, #112]	@ 0x70
 8002144:	4b57      	ldr	r3, [pc, #348]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	4a56      	ldr	r2, [pc, #344]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800214a:	f023 0304 	bic.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7fe fd10 	bl	8000b7c <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fd0c 	bl	8000b7c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0d7      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	4b4b      	ldr	r3, [pc, #300]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0ee      	beq.n	8002160 <HAL_RCC_OscConfig+0x368>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe fcfa 	bl	8000b7c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe fcf6 	bl	8000b7c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0c1      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a2:	4b40      	ldr	r3, [pc, #256]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ee      	bne.n	800218c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b4:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	4a3a      	ldr	r2, [pc, #232]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80021ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ad 	beq.w	8002324 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ca:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d060      	beq.n	8002298 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d145      	bne.n	800226a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b33      	ldr	r3, [pc, #204]	@ (80022ac <HAL_RCC_OscConfig+0x4b4>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fcca 	bl	8000b7c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fcc6 	bl	8000b7c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e093      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	3b01      	subs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	491b      	ldr	r1, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <HAL_RCC_OscConfig+0x4b4>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fc9b 	bl	8000b7c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe fc97 	bl	8000b7c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e064      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225c:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x452>
 8002268:	e05c      	b.n	8002324 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <HAL_RCC_OscConfig+0x4b4>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fc84 	bl	8000b7c <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fc80 	bl	8000b7c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e04d      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_RCC_OscConfig+0x4ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x480>
 8002296:	e045      	b.n	8002324 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e040      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40007000 	.word	0x40007000
 80022ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HAL_RCC_OscConfig+0x538>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d030      	beq.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d129      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d122      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d119      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	3b01      	subs	r3, #1
 80022fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10f      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e083      	b.n	800244e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7f5b      	ldrb	r3, [r3, #29]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fafc 	bl	8000954 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	22ca      	movs	r2, #202	@ 0xca
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2253      	movs	r2, #83	@ 0x53
 8002370:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9fb 	bl	800276e <RTC_EnterInitMode>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	22ff      	movs	r2, #255	@ 0xff
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2204      	movs	r2, #4
 800238a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e05e      	b.n	800244e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800239e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68d2      	ldr	r2, [r2, #12]
 80023ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6919      	ldr	r1, [r3, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	041a      	lsls	r2, r3, #16
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10e      	bne.n	800241c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f98d 	bl	800271e <HAL_RTC_WaitForSynchro>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	22ff      	movs	r2, #255	@ 0xff
 8002410:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2204      	movs	r2, #4
 8002416:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e018      	b.n	800244e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800242a:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	22ff      	movs	r2, #255	@ 0xff
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002456:	b590      	push	{r4, r7, lr}
 8002458:	b087      	sub	sp, #28
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	7f1b      	ldrb	r3, [r3, #28]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_RTC_SetTime+0x1c>
 800246e:	2302      	movs	r3, #2
 8002470:	e0aa      	b.n	80025c8 <HAL_RTC_SetTime+0x172>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2202      	movs	r2, #2
 800247c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d126      	bne.n	80024d2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f992 	bl	80027c6 <RTC_ByteToBcd2>
 80024a2:	4603      	mov	r3, r0
 80024a4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f98b 	bl	80027c6 <RTC_ByteToBcd2>
 80024b0:	4603      	mov	r3, r0
 80024b2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024b4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	789b      	ldrb	r3, [r3, #2]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f983 	bl	80027c6 <RTC_ByteToBcd2>
 80024c0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80024c2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e018      	b.n	8002504 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80024f2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80024f8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	78db      	ldrb	r3, [r3, #3]
 80024fe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	22ca      	movs	r2, #202	@ 0xca
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2253      	movs	r2, #83	@ 0x53
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f92a 	bl	800276e <RTC_EnterInitMode>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	22ff      	movs	r2, #255	@ 0xff
 8002526:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2204      	movs	r2, #4
 800252c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e047      	b.n	80025c8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002542:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002546:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002556:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800257e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d111      	bne.n	80025b2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f8c5 	bl	800271e <HAL_RTC_WaitForSynchro>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	22ff      	movs	r2, #255	@ 0xff
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2204      	movs	r2, #4
 80025a6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00a      	b.n	80025c8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	22ff      	movs	r2, #255	@ 0xff
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80025c6:	2300      	movs	r3, #0
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	7f1b      	ldrb	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_RTC_SetDate+0x1c>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e094      	b.n	8002716 <HAL_RTC_SetDate+0x146>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2202      	movs	r2, #2
 80025f6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <HAL_RTC_SetDate+0x4c>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	f023 0310 	bic.w	r3, r3, #16
 8002612:	b2db      	uxtb	r3, r3
 8002614:	330a      	adds	r3, #10
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11c      	bne.n	800265c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	78db      	ldrb	r3, [r3, #3]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f8cd 	bl	80027c6 <RTC_ByteToBcd2>
 800262c:	4603      	mov	r3, r0
 800262e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f8c6 	bl	80027c6 <RTC_ByteToBcd2>
 800263a:	4603      	mov	r3, r0
 800263c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800263e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f8be 	bl	80027c6 <RTC_ByteToBcd2>
 800264a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800264c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00e      	b.n	800267a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002668:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800266e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	22ca      	movs	r2, #202	@ 0xca
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2253      	movs	r2, #83	@ 0x53
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f86f 	bl	800276e <RTC_EnterInitMode>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	22ff      	movs	r2, #255	@ 0xff
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2204      	movs	r2, #4
 80026a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e033      	b.n	8002716 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80026bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f81e 	bl	800271e <HAL_RTC_WaitForSynchro>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	22ff      	movs	r2, #255	@ 0xff
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2204      	movs	r2, #4
 80026f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e00a      	b.n	8002716 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	22ff      	movs	r2, #255	@ 0xff
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
  }
}
 8002716:	4618      	mov	r0, r3
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd90      	pop	{r4, r7, pc}

0800271e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002738:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800273a:	f7fe fa1f 	bl	8000b7c <HAL_GetTick>
 800273e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002740:	e009      	b.n	8002756 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002742:	f7fe fa1b 	bl	8000b7c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002750:	d901      	bls.n	8002756 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e007      	b.n	8002766 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d119      	bne.n	80027bc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002792:	f7fe f9f3 	bl	8000b7c <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002798:	e009      	b.n	80027ae <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800279a:	f7fe f9ef 	bl	8000b7c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027a8:	d901      	bls.n	80027ae <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e007      	b.n	80027be <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ee      	beq.n	800279a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80027d4:	e005      	b.n	80027e2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	3b0a      	subs	r3, #10
 80027e0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	d8f6      	bhi.n	80027d6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002802:	b480      	push	{r7}
 8002804:	b087      	sub	sp, #28
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3350      	adds	r3, #80	@ 0x50
 8002818:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3350      	adds	r3, #80	@ 0x50
 800284a:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e041      	b.n	80028fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fe f877 	bl	8000980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 f82d 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a40      	ldr	r2, [pc, #256]	@ (8002a18 <TIM_Base_SetConfig+0x114>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002922:	d00f      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a3d      	ldr	r2, [pc, #244]	@ (8002a1c <TIM_Base_SetConfig+0x118>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00b      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3c      	ldr	r2, [pc, #240]	@ (8002a20 <TIM_Base_SetConfig+0x11c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a3b      	ldr	r2, [pc, #236]	@ (8002a24 <TIM_Base_SetConfig+0x120>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a28 <TIM_Base_SetConfig+0x124>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d108      	bne.n	8002956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800294a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a2f      	ldr	r2, [pc, #188]	@ (8002a18 <TIM_Base_SetConfig+0x114>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d02b      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002964:	d027      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a2c      	ldr	r2, [pc, #176]	@ (8002a1c <TIM_Base_SetConfig+0x118>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d023      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <TIM_Base_SetConfig+0x11c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a2a      	ldr	r2, [pc, #168]	@ (8002a24 <TIM_Base_SetConfig+0x120>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01b      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a29      	ldr	r2, [pc, #164]	@ (8002a28 <TIM_Base_SetConfig+0x124>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d017      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a28      	ldr	r2, [pc, #160]	@ (8002a2c <TIM_Base_SetConfig+0x128>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a27      	ldr	r2, [pc, #156]	@ (8002a30 <TIM_Base_SetConfig+0x12c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00f      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a26      	ldr	r2, [pc, #152]	@ (8002a34 <TIM_Base_SetConfig+0x130>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00b      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a25      	ldr	r2, [pc, #148]	@ (8002a38 <TIM_Base_SetConfig+0x134>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a24      	ldr	r2, [pc, #144]	@ (8002a3c <TIM_Base_SetConfig+0x138>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a23      	ldr	r2, [pc, #140]	@ (8002a40 <TIM_Base_SetConfig+0x13c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d108      	bne.n	80029c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <TIM_Base_SetConfig+0x114>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_Base_SetConfig+0xf8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <TIM_Base_SetConfig+0x124>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d103      	bne.n	8002a04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	615a      	str	r2, [r3, #20]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40010400 	.word	0x40010400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40014400 	.word	0x40014400
 8002a34:	40014800 	.word	0x40014800
 8002a38:	40001800 	.word	0x40001800
 8002a3c:	40001c00 	.word	0x40001c00
 8002a40:	40002000 	.word	0x40002000

08002a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e05a      	b.n	8002b12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a21      	ldr	r2, [pc, #132]	@ (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d022      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa8:	d01d      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d018      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a17      	ldr	r2, [pc, #92]	@ (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	@ (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10c      	bne.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00
 8002b30:	40010400 	.word	0x40010400
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40001800 	.word	0x40001800

08002b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e03f      	b.n	8002bce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd ff2e 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	@ 0x24
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f829 	bl	8002bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b0c0      	sub	sp, #256	@ 0x100
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	68d9      	ldr	r1, [r3, #12]
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	ea40 0301 	orr.w	r3, r0, r1
 8002c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c30:	f021 010c 	bic.w	r1, r1, #12
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c52:	6999      	ldr	r1, [r3, #24]
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	ea40 0301 	orr.w	r3, r0, r1
 8002c5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea4 <UART_SetConfig+0x2cc>)
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d005      	beq.n	8002c78 <UART_SetConfig+0xa0>
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea8 <UART_SetConfig+0x2d0>)
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d104      	bne.n	8002c82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7fe fb50 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 8002c7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c80:	e003      	b.n	8002c8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c82:	f7fe fb37 	bl	80012f4 <HAL_RCC_GetPCLK1Freq>
 8002c86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c94:	f040 810c 	bne.w	8002eb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ca2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ca6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cba:	4621      	mov	r1, r4
 8002cbc:	eb12 0801 	adds.w	r8, r2, r1
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	eb43 0901 	adc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ce8:	462b      	mov	r3, r5
 8002cea:	eb49 0303 	adc.w	r3, r9, r3
 8002cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d06:	460b      	mov	r3, r1
 8002d08:	18db      	adds	r3, r3, r3
 8002d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	eb42 0303 	adc.w	r3, r2, r3
 8002d12:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d1c:	f7fd fa72 	bl	8000204 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4b61      	ldr	r3, [pc, #388]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002d26:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	011c      	lsls	r4, r3, #4
 8002d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d50:	4641      	mov	r1, r8
 8002d52:	eb12 0a01 	adds.w	sl, r2, r1
 8002d56:	4649      	mov	r1, r9
 8002d58:	eb43 0b01 	adc.w	fp, r3, r1
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d70:	4692      	mov	sl, r2
 8002d72:	469b      	mov	fp, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	eb1a 0303 	adds.w	r3, sl, r3
 8002d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	eb4b 0303 	adc.w	r3, fp, r3
 8002d84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	18db      	adds	r3, r3, r3
 8002da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002da2:	4613      	mov	r3, r2
 8002da4:	eb42 0303 	adc.w	r3, r2, r3
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002daa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002db2:	f7fd fa27 	bl	8000204 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2264      	movs	r2, #100	@ 0x64
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	1acb      	subs	r3, r1, r3
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dd2:	4b36      	ldr	r3, [pc, #216]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002de0:	441c      	add	r4, r3
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002df0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e04:	4641      	mov	r1, r8
 8002e06:	1851      	adds	r1, r2, r1
 8002e08:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	414b      	adcs	r3, r1
 8002e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	00cb      	lsls	r3, r1, #3
 8002e20:	4651      	mov	r1, sl
 8002e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e26:	4651      	mov	r1, sl
 8002e28:	00ca      	lsls	r2, r1, #3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4642      	mov	r2, r8
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e38:	464b      	mov	r3, r9
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e58:	460b      	mov	r3, r1
 8002e5a:	18db      	adds	r3, r3, r3
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5e:	4613      	mov	r3, r2
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e6e:	f7fd f9c9 	bl	8000204 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	@ 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	3332      	adds	r3, #50	@ 0x32
 8002e8a:	4a08      	ldr	r2, [pc, #32]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 0207 	and.w	r2, r3, #7
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4422      	add	r2, r4
 8002e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ea0:	e106      	b.n	80030b0 <UART_SetConfig+0x4d8>
 8002ea2:	bf00      	nop
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002eba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ebe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ec2:	4642      	mov	r2, r8
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	1891      	adds	r1, r2, r2
 8002ec8:	6239      	str	r1, [r7, #32]
 8002eca:	415b      	adcs	r3, r3
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	1854      	adds	r4, r2, r1
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	eb43 0501 	adc.w	r5, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	00eb      	lsls	r3, r5, #3
 8002ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eea:	00e2      	lsls	r2, r4, #3
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	18e3      	adds	r3, r4, r3
 8002ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ef8:	464b      	mov	r3, r9
 8002efa:	eb45 0303 	adc.w	r3, r5, r3
 8002efe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f1e:	4629      	mov	r1, r5
 8002f20:	008b      	lsls	r3, r1, #2
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f28:	4621      	mov	r1, r4
 8002f2a:	008a      	lsls	r2, r1, #2
 8002f2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f30:	f7fd f968 	bl	8000204 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4b60      	ldr	r3, [pc, #384]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	011c      	lsls	r4, r3, #4
 8002f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	1891      	adds	r1, r2, r2
 8002f5a:	61b9      	str	r1, [r7, #24]
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f64:	4641      	mov	r1, r8
 8002f66:	1851      	adds	r1, r2, r1
 8002f68:	6139      	str	r1, [r7, #16]
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	414b      	adcs	r3, r1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	00cb      	lsls	r3, r1, #3
 8002f80:	4651      	mov	r1, sl
 8002f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f86:	4651      	mov	r1, sl
 8002f88:	00ca      	lsls	r2, r1, #3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4642      	mov	r2, r8
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f98:	464b      	mov	r3, r9
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	eb42 0303 	adc.w	r3, r2, r3
 8002fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	008b      	lsls	r3, r1, #2
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	008a      	lsls	r2, r1, #2
 8002fca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fce:	f7fd f919 	bl	8000204 <__aeabi_uldivmod>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4b38      	ldr	r3, [pc, #224]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002fda:	fba3 2301 	umull	r2, r3, r3, r1
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2264      	movs	r2, #100	@ 0x64
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	1acb      	subs	r3, r1, r3
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	3332      	adds	r3, #50	@ 0x32
 8002fec:	4a33      	ldr	r2, [pc, #204]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff8:	441c      	add	r4, r3
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffe:	2200      	movs	r2, #0
 8003000:	673b      	str	r3, [r7, #112]	@ 0x70
 8003002:	677a      	str	r2, [r7, #116]	@ 0x74
 8003004:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	415b      	adcs	r3, r3
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003018:	4641      	mov	r1, r8
 800301a:	1851      	adds	r1, r2, r1
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	4649      	mov	r1, r9
 8003020:	414b      	adcs	r3, r1
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003030:	4659      	mov	r1, fp
 8003032:	00cb      	lsls	r3, r1, #3
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303a:	4651      	mov	r1, sl
 800303c:	00ca      	lsls	r2, r1, #3
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	4603      	mov	r3, r0
 8003044:	4642      	mov	r2, r8
 8003046:	189b      	adds	r3, r3, r2
 8003048:	66bb      	str	r3, [r7, #104]	@ 0x68
 800304a:	464b      	mov	r3, r9
 800304c:	460a      	mov	r2, r1
 800304e:	eb42 0303 	adc.w	r3, r2, r3
 8003052:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	663b      	str	r3, [r7, #96]	@ 0x60
 800305e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800306c:	4649      	mov	r1, r9
 800306e:	008b      	lsls	r3, r1, #2
 8003070:	4641      	mov	r1, r8
 8003072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003076:	4641      	mov	r1, r8
 8003078:	008a      	lsls	r2, r1, #2
 800307a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800307e:	f7fd f8c1 	bl	8000204 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <UART_SetConfig+0x4e4>)
 8003088:	fba3 1302 	umull	r1, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	2164      	movs	r1, #100	@ 0x64
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	3332      	adds	r3, #50	@ 0x32
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <UART_SetConfig+0x4e4>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4422      	add	r2, r4
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030b6:	46bd      	mov	sp, r7
 80030b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030bc:	51eb851f 	.word	0x51eb851f

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4d0d      	ldr	r5, [pc, #52]	@ (80030f8 <__libc_init_array+0x38>)
 80030c4:	4c0d      	ldr	r4, [pc, #52]	@ (80030fc <__libc_init_array+0x3c>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2600      	movs	r6, #0
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003100 <__libc_init_array+0x40>)
 80030d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003104 <__libc_init_array+0x44>)
 80030d4:	f000 f818 	bl	8003108 <_init>
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	2600      	movs	r6, #0
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003158 	.word	0x08003158
 80030fc:	08003158 	.word	0x08003158
 8003100:	08003158 	.word	0x08003158
 8003104:	0800315c 	.word	0x0800315c

08003108 <_init>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr

08003114 <_fini>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr
