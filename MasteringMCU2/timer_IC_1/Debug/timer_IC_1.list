
timer_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004528  08004528  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004530  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000060  08004590  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004590  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d101  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c12  00000000  00000000  00013191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00014da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094d  00000000  00000000  00015980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e2a  00000000  00000000  000162cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e507  00000000  00000000  000380f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d06b1  00000000  00000000  000465fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  00116cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c1  00000000  00000000  0011a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004490 	.word	0x08004490

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004490 	.word	0x08004490

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler (void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000d8c:	f000 fbc6 	bl	800151c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000d90:	f000 fd12 	bl	80017b8 <HAL_SYSTICK_IRQHandler>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles Timer 2 interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <TIM2_IRQHandler+0x10>)
 8000d9e:	f001 ff4f 	bl	8002c40 <HAL_TIM_IRQHandler>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000007c 	.word	0x2000007c

08000dac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000db0:	2120      	movs	r1, #32
 8000db2:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <TIM6_DAC_IRQHandler+0x18>)
 8000db4:	f000 fea2 	bl	8001afc <HAL_GPIO_TogglePin>
	HAL_TIM_IRQHandler(&htimer6);
 8000db8:	4803      	ldr	r0, [pc, #12]	@ (8000dc8 <TIM6_DAC_IRQHandler+0x1c>)
 8000dba:	f001 ff41 	bl	8002c40 <HAL_TIM_IRQHandler>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	200000c4 	.word	0x200000c4

08000dcc <main>:
uint32_t input_captures[2] = {0};
uint8_t count=1;
volatile uint8_t is_capture_done = FALSE;

int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0a4      	sub	sp, #144	@ 0x90
 8000dd0:	af00      	add	r7, sp, #0
  uint32_t capture_difference =0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  double timer2_cnt_freq=0;
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  double timer2_cnt_res=0;
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  double user_signal_time_period =0;
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  double user_signal_freq=0;
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  char usr_msg[100];
  HAL_Init();
 8000e08:	f000 fb36 	bl	8001478 <HAL_Init>

  //SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);

  SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000e0c:	2032      	movs	r0, #50	@ 0x32
 8000e0e:	f000 f885 	bl	8000f1c <SystemClock_Config_HSE>
  GPIO_Init();
 8000e12:	f000 f921 	bl	8001058 <GPIO_Init>
  UART2_Init();
 8000e16:	f000 f95d 	bl	80010d4 <UART2_Init>
  TIMER6_Init();
 8000e1a:	f000 f941 	bl	80010a0 <TIMER6_Init>
  TIMER2_Init();
 8000e1e:	f000 f97f 	bl	8001120 <TIMER2_Init>
  LSE_Configuration();
 8000e22:	f000 f9af 	bl	8001184 <LSE_Configuration>
  HAL_TIM_Base_Start_IT(&htimer6);
 8000e26:	4836      	ldr	r0, [pc, #216]	@ (8000f00 <main+0x134>)
 8000e28:	f001 fd22 	bl	8002870 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htimer2,TIM_CHANNEL_1);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4835      	ldr	r0, [pc, #212]	@ (8000f04 <main+0x138>)
 8000e30:	f001 fdde 	bl	80029f0 <HAL_TIM_IC_Start_IT>

  while(1)
  {
    if(is_capture_done)
 8000e34:	4b34      	ldr	r3, [pc, #208]	@ (8000f08 <main+0x13c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0fa      	beq.n	8000e34 <main+0x68>
    {
      if(input_captures[1] > input_captures[0])
 8000e3e:	4b33      	ldr	r3, [pc, #204]	@ (8000f0c <main+0x140>)
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <main+0x140>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d907      	bls.n	8000e5a <main+0x8e>
      {
        capture_difference = input_captures[1] - input_captures[0];
 8000e4a:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <main+0x140>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <main+0x140>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000e58:	e007      	b.n	8000e6a <main+0x9e>
      }
      else
      {
        capture_difference = (0XFFFFFFFF -input_captures[0]) + input_captures[1];
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <main+0x140>)
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <main+0x140>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	3b01      	subs	r3, #1
 8000e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      }

      timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2 ) / (htimer2.Init.Prescaler + 1);
 8000e6a:	f000 ffbb 	bl	8001de4 <HAL_RCC_GetPCLK1Freq>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	005a      	lsls	r2, r3, #1
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <main+0x138>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fb61 	bl	8000544 <__aeabi_ui2d>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
      timer2_cnt_res = 1/ timer2_cnt_freq;
 8000e8a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000e8e:	f04f 0000 	mov.w	r0, #0
 8000e92:	491f      	ldr	r1, [pc, #124]	@ (8000f10 <main+0x144>)
 8000e94:	f7ff fcfa 	bl	800088c <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      user_signal_time_period = capture_difference * timer2_cnt_res;
 8000ea0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000ea4:	f7ff fb4e 	bl	8000544 <__aeabi_ui2d>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000eb0:	f7ff fbc2 	bl	8000638 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
      user_signal_freq = 1/user_signal_time_period ;
 8000ebc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	4912      	ldr	r1, [pc, #72]	@ (8000f10 <main+0x144>)
 8000ec6:	f7ff fce1 	bl	800088c <__aeabi_ddiv>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

      sprintf(usr_msg,"Frequency of the signal applied = %.2f Hz\r\n",user_signal_freq ); // @suppress("Float formatting support")
 8000ed2:	1d38      	adds	r0, r7, #4
 8000ed4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000ed8:	490e      	ldr	r1, [pc, #56]	@ (8000f14 <main+0x148>)
 8000eda:	f002 fe41 	bl	8003b60 <siprintf>
      HAL_UART_Transmit(&huart2,(uint8_t*)usr_msg,strlen(usr_msg),HAL_MAX_DELAY);
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff f995 	bl	8000210 <strlen>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	1d39      	adds	r1, r7, #4
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <main+0x14c>)
 8000ef2:	f002 fac1 	bl	8003478 <HAL_UART_Transmit>

      is_capture_done = FALSE;
 8000ef6:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <main+0x13c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
    if(is_capture_done)
 8000efc:	e79a      	b.n	8000e34 <main+0x68>
 8000efe:	bf00      	nop
 8000f00:	200000c4 	.word	0x200000c4
 8000f04:	2000007c 	.word	0x2000007c
 8000f08:	20000158 	.word	0x20000158
 8000f0c:	20000150 	.word	0x20000150
 8000f10:	3ff00000 	.word	0x3ff00000
 8000f14:	080044a8 	.word	0x080044a8
 8000f18:	2000010c 	.word	0x2000010c

08000f1c <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b096      	sub	sp, #88	@ 0x58
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f34:	623b      	str	r3, [r7, #32]
  Osc_Init.LSEState = RCC_LSE_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  Osc_Init.HSIState = RCC_HSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f46:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b78      	cmp	r3, #120	@ 0x78
 8000f4c:	d038      	beq.n	8000fc0 <SystemClock_Config_HSE+0xa4>
 8000f4e:	2b78      	cmp	r3, #120	@ 0x78
 8000f50:	dc7c      	bgt.n	800104c <SystemClock_Config_HSE+0x130>
 8000f52:	2b32      	cmp	r3, #50	@ 0x32
 8000f54:	d002      	beq.n	8000f5c <SystemClock_Config_HSE+0x40>
 8000f56:	2b54      	cmp	r3, #84	@ 0x54
 8000f58:	d019      	beq.n	8000f8e <SystemClock_Config_HSE+0x72>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 8000f5a:	e077      	b.n	800104c <SystemClock_Config_HSE+0x130>
    Osc_Init.PLL.PLLM = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 8000f60:	2332      	movs	r3, #50	@ 0x32
 8000f62:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000f70:	230f      	movs	r3, #15
 8000f72:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	2302      	movs	r3, #2
 8000f76:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f80:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000f8c:	e032      	b.n	8000ff4 <SystemClock_Config_HSE+0xd8>
    Osc_Init.PLL.PLLM = 4;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 8000f92:	2354      	movs	r3, #84	@ 0x54
 8000f94:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb2:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000fbe:	e019      	b.n	8000ff4 <SystemClock_Config_HSE+0xd8>
    Osc_Init.PLL.PLLM = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 8000fc4:	2378      	movs	r3, #120	@ 0x78
 8000fc6:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fe4:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fea:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000ff2:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 f94b 	bl	8002294 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config_HSE+0xec>
  {
    Error_handler();
 8001004:	f000 f8fc 	bl	8001200 <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8001008:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fd8c 	bl	8001b30 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config_HSE+0x106>
  {
    Error_handler();
 800101e:	f000 f8ef 	bl	8001200 <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8001022:	f000 fed3 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001026:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 8001028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <SystemClock_Config_HSE+0x138>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	099b      	lsrs	r3, r3, #6
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fb97 	bl	8001766 <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001038:	2004      	movs	r0, #4
 800103a:	f000 fba1 	bl	8001780 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	f04f 30ff 	mov.w	r0, #4294967295
 8001046:	f000 fb64 	bl	8001712 <HAL_NVIC_SetPriority>
 800104a:	e000      	b.n	800104e <SystemClock_Config_HSE+0x132>
    return ;
 800104c:	bf00      	nop
}
 800104e:	3758      	adds	r7, #88	@ 0x58
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	10624dd3 	.word	0x10624dd3

08001058 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <GPIO_Init+0x40>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a0c      	ldr	r2, [pc, #48]	@ (8001098 <GPIO_Init+0x40>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <GPIO_Init+0x40>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef ledgpio;
  ledgpio.Pin = GPIO_PIN_5;
 800107a:	2320      	movs	r3, #32
 800107c:	607b      	str	r3, [r7, #4]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
  ledgpio.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA,&ledgpio);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4804      	ldr	r0, [pc, #16]	@ (800109c <GPIO_Init+0x44>)
 800108c:	f000 fba2 	bl	80017d4 <HAL_GPIO_Init>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <TIMER6_Init>:
  * @param None
  * @retval None
  */

void TIMER6_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  htimer6.Instance = TIM6;
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <TIMER6_Init+0x2c>)
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <TIMER6_Init+0x30>)
 80010a8:	601a      	str	r2, [r3, #0]
  htimer6.Init.Prescaler = 9;
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <TIMER6_Init+0x2c>)
 80010ac:	2209      	movs	r2, #9
 80010ae:	605a      	str	r2, [r3, #4]
  htimer6.Init.Period = 50-1;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <TIMER6_Init+0x2c>)
 80010b2:	2231      	movs	r2, #49	@ 0x31
 80010b4:	60da      	str	r2, [r3, #12]
  if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <TIMER6_Init+0x2c>)
 80010b8:	f001 fb8a 	bl	80027d0 <HAL_TIM_Base_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <TIMER6_Init+0x26>
  {
    Error_handler();
 80010c2:	f000 f89d 	bl	8001200 <Error_handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000c4 	.word	0x200000c4
 80010d0:	40001000 	.word	0x40001000

080010d4 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <UART2_Init+0x44>)
 80010da:	4a10      	ldr	r2, [pc, #64]	@ (800111c <UART2_Init+0x48>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <UART2_Init+0x44>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <UART2_Init+0x44>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <UART2_Init+0x44>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <UART2_Init+0x44>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <UART2_Init+0x44>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <UART2_Init+0x44>)
 8001100:	220c      	movs	r2, #12
 8001102:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <UART2_Init+0x44>)
 8001106:	f002 f96a 	bl	80033de <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 8001110:	f000 f876 	bl	8001200 <Error_handler>
  }
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000010c 	.word	0x2000010c
 800111c:	40004400 	.word	0x40004400

08001120 <TIMER2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void TIMER2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef timer2IC_Config;

  htimer2.Instance = TIM2;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <TIMER2_Init+0x60>)
 8001128:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800112c:	601a      	str	r2, [r3, #0]
  htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <TIMER2_Init+0x60>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htimer2.Init.Period = 0xFFFFFFFF;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <TIMER2_Init+0x60>)
 8001136:	f04f 32ff 	mov.w	r2, #4294967295
 800113a:	60da      	str	r2, [r3, #12]
  htimer2.Init.Prescaler = 1;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <TIMER2_Init+0x60>)
 800113e:	2201      	movs	r2, #1
 8001140:	605a      	str	r2, [r3, #4]
  if ( HAL_TIM_IC_Init(&htimer2) != HAL_OK)
 8001142:	480f      	ldr	r0, [pc, #60]	@ (8001180 <TIMER2_Init+0x60>)
 8001144:	f001 fc04 	bl	8002950 <HAL_TIM_IC_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <TIMER2_Init+0x32>
  {
    Error_handler();
 800114e:	f000 f857 	bl	8001200 <Error_handler>
  }

  timer2IC_Config.ICFilter = 0 ;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
  timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115e:	2301      	movs	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
  if ( HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <TIMER2_Init+0x60>)
 800116a:	f001 fe71 	bl	8002e50 <HAL_TIM_IC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <TIMER2_Init+0x58>
  {
    Error_handler();
 8001174:	f000 f844 	bl	8001200 <Error_handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000007c 	.word	0x2000007c

08001184 <LSE_Configuration>:
/**
  * @brief  Configures the LSE.
  * @retval None
  */
void LSE_Configuration(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  {
    Error_handler();
  }
#endif

  HAL_RCC_MCOConfig(RCC_MCO1,RCC_MCO1SOURCE_HSI,RCC_MCODIV_4);
 8001188:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800118c:	2100      	movs	r1, #0
 800118e:	2000      	movs	r0, #0
 8001190:	f000 fdb4 	bl	8001cfc <HAL_RCC_MCOConfig>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  #if 1
  if(! is_capture_done)
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d11e      	bne.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x50>
  {
    if(count == 1)
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10b      	bne.n	80011ca <HAL_TIM_IC_CaptureCallback+0x32>
    {
      input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b8:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <HAL_TIM_IC_CaptureCallback+0x64>)
 80011ba:	6013      	str	r3, [r2, #0]
      count++;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011c6:	701a      	strb	r2, [r3, #0]
      count =1;
      is_capture_done = TRUE;
    }
  }
  #endif
}
 80011c8:	e00e      	b.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x50>
    else if (count == 2)
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d10a      	bne.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x50>
      input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d8:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <HAL_TIM_IC_CaptureCallback+0x64>)
 80011da:	6053      	str	r3, [r2, #4]
      count =1;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
      is_capture_done = TRUE;
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20000158 	.word	0x20000158
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000150 	.word	0x20000150

08001200 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  while(1);
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <Error_handler+0x4>

08001208 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fa75 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8001212:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <HAL_MspInit+0x40>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001216:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <HAL_MspInit+0x40>)
 8001218:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800121c:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	f06f 000b 	mvn.w	r0, #11
 8001226:	f000 fa74 	bl	8001712 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	f06f 000a 	mvn.w	r0, #10
 8001232:	f000 fa6e 	bl	8001712 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	f06f 0009 	mvn.w	r0, #9
 800123e:	f000 fa68 	bl	8001712 <HAL_NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2ch1_gpio;
	//1. enable the peripheral clock for the timer2 peripheral
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <HAL_TIM_IC_MspInit+0x70>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	4a17      	ldr	r2, [pc, #92]	@ (80012bc <HAL_TIM_IC_MspInit+0x70>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6413      	str	r3, [r2, #64]	@ 0x40
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_TIM_IC_MspInit+0x70>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_TIM_IC_MspInit+0x70>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001278:	4a10      	ldr	r2, [pc, #64]	@ (80012bc <HAL_TIM_IC_MspInit+0x70>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_TIM_IC_MspInit+0x70>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]

	//2. Configure a gpio to behave as timer2 channel 1
	tim2ch1_gpio.Pin = GPIO_PIN_0;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
	tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
	tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8001294:	2301      	movs	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA,&tim2ch1_gpio);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <HAL_TIM_IC_MspInit+0x74>)
 80012a0:	f000 fa98 	bl	80017d4 <HAL_GPIO_Init>

	//3. nvic settings
	HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	210f      	movs	r1, #15
 80012a8:	201c      	movs	r0, #28
 80012aa:	f000 fa32 	bl	8001712 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ae:	201c      	movs	r0, #28
 80012b0:	f000 fa4b 	bl	800174a <HAL_NVIC_EnableIRQ>
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  //1. enable the clock for the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_TIM_Base_MspInit+0x3c>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <HAL_TIM_Base_MspInit+0x3c>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <HAL_TIM_Base_MspInit+0x3c>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

  //2. Enable the IRQ of TIM6
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012e8:	2036      	movs	r0, #54	@ 0x36
 80012ea:	f000 fa2e 	bl	800174a <HAL_NVIC_EnableIRQ>

  //3. setup the priority for TIM6_DAC_IRQn
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	210f      	movs	r1, #15
 80012f2:	2036      	movs	r0, #54	@ 0x36
 80012f4:	f000 fa0d 	bl	8001712 <HAL_NVIC_SetPriority>
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <HAL_UART_MspInit+0x88>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <HAL_UART_MspInit+0x88>)
 8001316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131a:	6413      	str	r3, [r2, #64]	@ 0x40
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_UART_MspInit+0x88>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4b17      	ldr	r3, [pc, #92]	@ (800138c <HAL_UART_MspInit+0x88>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	4a16      	ldr	r2, [pc, #88]	@ (800138c <HAL_UART_MspInit+0x88>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	@ 0x30
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <HAL_UART_MspInit+0x88>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin  = GPIO_PIN_2;
 8001344:	2304      	movs	r3, #4
 8001346:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8001354:	2307      	movs	r3, #7
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	480c      	ldr	r0, [pc, #48]	@ (8001390 <HAL_UART_MspInit+0x8c>)
 8001360:	f000 fa38 	bl	80017d4 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8001364:	2308      	movs	r3, #8
 8001366:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4808      	ldr	r0, [pc, #32]	@ (8001390 <HAL_UART_MspInit+0x8c>)
 8001370:	f000 fa30 	bl	80017d4 <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001374:	2026      	movs	r0, #38	@ 0x26
 8001376:	f000 f9e8 	bl	800174a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800137a:	2200      	movs	r2, #0
 800137c:	210f      	movs	r1, #15
 800137e:	2026      	movs	r0, #38	@ 0x26
 8001380:	f000 f9c7 	bl	8001712 <HAL_NVIC_SetPriority>
}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	@ 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f002 fbee 	bl	8003ba4 <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20020000 	.word	0x20020000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	2000015c 	.word	0x2000015c
 80013fc:	200002b0 	.word	0x200002b0

08001400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800145c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480d      	ldr	r0, [pc, #52]	@ (8001460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142a:	490e      	ldr	r1, [pc, #56]	@ (8001464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800142c:	4a0e      	ldr	r2, [pc, #56]	@ (8001468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001440:	4c0b      	ldr	r4, [pc, #44]	@ (8001470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800144e:	f7ff ffd7 	bl	8001400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001452:	f002 fbad 	bl	8003bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff fcb9 	bl	8000dcc <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001468:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 800146c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001470:	200002ac 	.word	0x200002ac

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <HAL_Init+0x40>)
 8001482:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_Init+0x40>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	@ (80014b8 <HAL_Init+0x40>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f92b 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f808 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff feac 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023c00 	.word	0x40023c00

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x54>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_InitTick+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f943 	bl	8001766 <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f90b 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <HAL_InitTick+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000004 	.word	0x20000004
 8001514:	2000000c 	.word	0x2000000c
 8001518:	20000008 	.word	0x20000008

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000160 	.word	0x20000160

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000160 	.word	0x20000160

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	@ (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	@ (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	@ 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff29 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff3e 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff8e 	bl	8001650 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5d 	bl	80015fc <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff31 	bl	80015c0 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa2 	bl	80016b8 <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b04      	cmp	r3, #4
 800178c:	d106      	bne.n	800179c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800179a:	e005      	b.n	80017a8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80017bc:	f000 f802 	bl	80017c4 <HAL_SYSTICK_Callback>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e165      	b.n	8001abc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8154 	bne.w	8001ab6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80ae 	beq.w	8001ab6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad4 <HAL_GPIO_Init+0x300>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad4 <HAL_GPIO_Init+0x300>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001968:	6453      	str	r3, [r2, #68]	@ 0x44
 800196a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad4 <HAL_GPIO_Init+0x300>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a58      	ldr	r2, [pc, #352]	@ (8001ad8 <HAL_GPIO_Init+0x304>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4f      	ldr	r2, [pc, #316]	@ (8001adc <HAL_GPIO_Init+0x308>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d025      	beq.n	80019ee <HAL_GPIO_Init+0x21a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae0 <HAL_GPIO_Init+0x30c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01f      	beq.n	80019ea <HAL_GPIO_Init+0x216>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae4 <HAL_GPIO_Init+0x310>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0x212>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae8 <HAL_GPIO_Init+0x314>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4b      	ldr	r2, [pc, #300]	@ (8001aec <HAL_GPIO_Init+0x318>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_GPIO_Init+0x20a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4a      	ldr	r2, [pc, #296]	@ (8001af0 <HAL_GPIO_Init+0x31c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_GPIO_Init+0x206>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a49      	ldr	r2, [pc, #292]	@ (8001af4 <HAL_GPIO_Init+0x320>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x202>
 80019d2:	2306      	movs	r3, #6
 80019d4:	e00c      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019d6:	2307      	movs	r3, #7
 80019d8:	e00a      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019da:	2305      	movs	r3, #5
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019de:	2304      	movs	r3, #4
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x21c>
 80019ee:	2300      	movs	r3, #0
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f002 0203 	and.w	r2, r2, #3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a32:	4a31      	ldr	r2, [pc, #196]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a38:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5c:	4a26      	ldr	r2, [pc, #152]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a86:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab0:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <HAL_GPIO_Init+0x324>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f67f ae96 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40021400 	.word	0x40021400
 8001af4:	40021800 	.word	0x40021800
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	041a      	lsls	r2, r3, #16
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43d9      	mvns	r1, r3
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0cc      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b68      	ldr	r3, [pc, #416]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d90c      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b65      	ldr	r3, [pc, #404]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b63      	ldr	r3, [pc, #396]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b84:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a58      	ldr	r2, [pc, #352]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b9c:	4b53      	ldr	r3, [pc, #332]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b50      	ldr	r3, [pc, #320]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	494d      	ldr	r1, [pc, #308]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d044      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d119      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bee:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e067      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0e:	4b37      	ldr	r3, [pc, #220]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 0203 	bic.w	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4934      	ldr	r1, [pc, #208]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c20:	f7ff fc90 	bl	8001544 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff fc8c 	bl	8001544 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e04f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 020c 	and.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1eb      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c50:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d20c      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e032      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4916      	ldr	r1, [pc, #88]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca2:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	490e      	ldr	r1, [pc, #56]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cb6:	f000 f8bd 	bl	8001e34 <HAL_RCC_GetSysClockFreq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	490a      	ldr	r1, [pc, #40]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a09      	ldr	r2, [pc, #36]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fbf0 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	080044d4 	.word	0x080044d4
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	20000008 	.word	0x20000008

08001cfc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d129      	bne.n	8001d62 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001d2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	481f      	ldr	r0, [pc, #124]	@ (8001dc4 <HAL_RCC_MCOConfig+0xc8>)
 8001d48:	f7ff fd44 	bl	80017d4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	4919      	ldr	r1, [pc, #100]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001d60:	e029      	b.n	8001db6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480b      	ldr	r0, [pc, #44]	@ (8001dc8 <HAL_RCC_MCOConfig+0xcc>)
 8001d9c:	f7ff fd1a 	bl	80017d4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001da0:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	00d9      	lsls	r1, r3, #3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	430b      	orrs	r3, r1
 8001db0:	4903      	ldr	r1, [pc, #12]	@ (8001dc0 <HAL_RCC_MCOConfig+0xc4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
}
 8001db6:	bf00      	nop
 8001db8:	3730      	adds	r7, #48	@ 0x30
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020800 	.word	0x40020800

08001dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0a9b      	lsrs	r3, r3, #10
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4903      	ldr	r1, [pc, #12]	@ (8001e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	080044e4 	.word	0x080044e4

08001e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e10:	f7ff ffdc 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0b5b      	lsrs	r3, r3, #13
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4903      	ldr	r1, [pc, #12]	@ (8001e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	080044e4 	.word	0x080044e4

08001e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e38:	b0ae      	sub	sp, #184	@ 0xb8
 8001e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5a:	4bcb      	ldr	r3, [pc, #812]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	f200 8206 	bhi.w	8002274 <HAL_RCC_GetSysClockFreq+0x440>
 8001e68:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001ea5 	.word	0x08001ea5
 8001e74:	08002275 	.word	0x08002275
 8001e78:	08002275 	.word	0x08002275
 8001e7c:	08002275 	.word	0x08002275
 8001e80:	08001ead 	.word	0x08001ead
 8001e84:	08002275 	.word	0x08002275
 8001e88:	08002275 	.word	0x08002275
 8001e8c:	08002275 	.word	0x08002275
 8001e90:	08001eb5 	.word	0x08001eb5
 8001e94:	08002275 	.word	0x08002275
 8001e98:	08002275 	.word	0x08002275
 8001e9c:	08002275 	.word	0x08002275
 8001ea0:	080020a5 	.word	0x080020a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ea4:	4bb9      	ldr	r3, [pc, #740]	@ (800218c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001eaa:	e1e7      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eac:	4bb8      	ldr	r3, [pc, #736]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001eb2:	e1e3      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb4:	4bb4      	ldr	r3, [pc, #720]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec0:	4bb1      	ldr	r3, [pc, #708]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d071      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ecc:	4bae      	ldr	r3, [pc, #696]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ed8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	f04f 0000 	mov.w	r0, #0
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	0159      	lsls	r1, r3, #5
 8001f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f04:	0150      	lsls	r0, r2, #5
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	1a51      	subs	r1, r2, r1
 8001f0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f10:	4629      	mov	r1, r5
 8001f12:	eb63 0301 	sbc.w	r3, r3, r1
 8001f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f24:	4649      	mov	r1, r9
 8001f26:	018b      	lsls	r3, r1, #6
 8001f28:	4641      	mov	r1, r8
 8001f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2e:	4641      	mov	r1, r8
 8001f30:	018a      	lsls	r2, r1, #6
 8001f32:	4641      	mov	r1, r8
 8001f34:	1a51      	subs	r1, r2, r1
 8001f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f38:	4649      	mov	r1, r9
 8001f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	00cb      	lsls	r3, r1, #3
 8001f50:	4641      	mov	r1, r8
 8001f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f56:	4641      	mov	r1, r8
 8001f58:	00ca      	lsls	r2, r1, #3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4622      	mov	r2, r4
 8001f62:	189b      	adds	r3, r3, r2
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f66:	462b      	mov	r3, r5
 8001f68:	460a      	mov	r2, r1
 8001f6a:	eb42 0303 	adc.w	r3, r2, r3
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	024b      	lsls	r3, r1, #9
 8001f80:	4621      	mov	r1, r4
 8001f82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f86:	4621      	mov	r1, r4
 8001f88:	024a      	lsls	r2, r1, #9
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001fa0:	f7fe fd5c 	bl	8000a5c <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fae:	e067      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb0:	4b75      	ldr	r3, [pc, #468]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	099b      	lsrs	r3, r3, #6
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fca:	2300      	movs	r3, #0
 8001fcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	462b      	mov	r3, r5
 8001fd6:	f04f 0000 	mov.w	r0, #0
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	0159      	lsls	r1, r3, #5
 8001fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe4:	0150      	lsls	r0, r2, #5
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4621      	mov	r1, r4
 8001fec:	1a51      	subs	r1, r2, r1
 8001fee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002004:	4649      	mov	r1, r9
 8002006:	018b      	lsls	r3, r1, #6
 8002008:	4641      	mov	r1, r8
 800200a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200e:	4641      	mov	r1, r8
 8002010:	018a      	lsls	r2, r1, #6
 8002012:	4641      	mov	r1, r8
 8002014:	ebb2 0a01 	subs.w	sl, r2, r1
 8002018:	4649      	mov	r1, r9
 800201a:	eb63 0b01 	sbc.w	fp, r3, r1
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800202a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800202e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002032:	4692      	mov	sl, r2
 8002034:	469b      	mov	fp, r3
 8002036:	4623      	mov	r3, r4
 8002038:	eb1a 0303 	adds.w	r3, sl, r3
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	462b      	mov	r3, r5
 8002040:	eb4b 0303 	adc.w	r3, fp, r3
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002052:	4629      	mov	r1, r5
 8002054:	028b      	lsls	r3, r1, #10
 8002056:	4621      	mov	r1, r4
 8002058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800205c:	4621      	mov	r1, r4
 800205e:	028a      	lsls	r2, r1, #10
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002068:	2200      	movs	r2, #0
 800206a:	673b      	str	r3, [r7, #112]	@ 0x70
 800206c:	677a      	str	r2, [r7, #116]	@ 0x74
 800206e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002072:	f7fe fcf3 	bl	8000a5c <__aeabi_uldivmod>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4613      	mov	r3, r2
 800207c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002080:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	3301      	adds	r3, #1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020a2:	e0eb      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a4:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b0:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d06b      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020bc:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	2200      	movs	r2, #0
 80020c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80020d0:	2300      	movs	r3, #0
 80020d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80020d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020d8:	4622      	mov	r2, r4
 80020da:	462b      	mov	r3, r5
 80020dc:	f04f 0000 	mov.w	r0, #0
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	0159      	lsls	r1, r3, #5
 80020e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ea:	0150      	lsls	r0, r2, #5
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4621      	mov	r1, r4
 80020f2:	1a51      	subs	r1, r2, r1
 80020f4:	61b9      	str	r1, [r7, #24]
 80020f6:	4629      	mov	r1, r5
 80020f8:	eb63 0301 	sbc.w	r3, r3, r1
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800210a:	4659      	mov	r1, fp
 800210c:	018b      	lsls	r3, r1, #6
 800210e:	4651      	mov	r1, sl
 8002110:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002114:	4651      	mov	r1, sl
 8002116:	018a      	lsls	r2, r1, #6
 8002118:	4651      	mov	r1, sl
 800211a:	ebb2 0801 	subs.w	r8, r2, r1
 800211e:	4659      	mov	r1, fp
 8002120:	eb63 0901 	sbc.w	r9, r3, r1
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002130:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002134:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002138:	4690      	mov	r8, r2
 800213a:	4699      	mov	r9, r3
 800213c:	4623      	mov	r3, r4
 800213e:	eb18 0303 	adds.w	r3, r8, r3
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	462b      	mov	r3, r5
 8002146:	eb49 0303 	adc.w	r3, r9, r3
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002158:	4629      	mov	r1, r5
 800215a:	024b      	lsls	r3, r1, #9
 800215c:	4621      	mov	r1, r4
 800215e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002162:	4621      	mov	r1, r4
 8002164:	024a      	lsls	r2, r1, #9
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800216e:	2200      	movs	r2, #0
 8002170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002172:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002174:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002178:	f7fe fc70 	bl	8000a5c <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4613      	mov	r3, r2
 8002182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002186:	e065      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x420>
 8002188:	40023800 	.word	0x40023800
 800218c:	00f42400 	.word	0x00f42400
 8002190:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002194:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_RCC_GetSysClockFreq+0x458>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	2200      	movs	r2, #0
 800219c:	4618      	mov	r0, r3
 800219e:	4611      	mov	r1, r2
 80021a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80021a6:	2300      	movs	r3, #0
 80021a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80021aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80021ae:	4642      	mov	r2, r8
 80021b0:	464b      	mov	r3, r9
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	0159      	lsls	r1, r3, #5
 80021bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c0:	0150      	lsls	r0, r2, #5
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4641      	mov	r1, r8
 80021c8:	1a51      	subs	r1, r2, r1
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	4649      	mov	r1, r9
 80021ce:	eb63 0301 	sbc.w	r3, r3, r1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021e0:	4659      	mov	r1, fp
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	4651      	mov	r1, sl
 80021e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ea:	4651      	mov	r1, sl
 80021ec:	018a      	lsls	r2, r1, #6
 80021ee:	4651      	mov	r1, sl
 80021f0:	1a54      	subs	r4, r2, r1
 80021f2:	4659      	mov	r1, fp
 80021f4:	eb63 0501 	sbc.w	r5, r3, r1
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	00eb      	lsls	r3, r5, #3
 8002202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002206:	00e2      	lsls	r2, r4, #3
 8002208:	4614      	mov	r4, r2
 800220a:	461d      	mov	r5, r3
 800220c:	4643      	mov	r3, r8
 800220e:	18e3      	adds	r3, r4, r3
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	464b      	mov	r3, r9
 8002214:	eb45 0303 	adc.w	r3, r5, r3
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002226:	4629      	mov	r1, r5
 8002228:	028b      	lsls	r3, r1, #10
 800222a:	4621      	mov	r1, r4
 800222c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002230:	4621      	mov	r1, r4
 8002232:	028a      	lsls	r2, r1, #10
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800223c:	2200      	movs	r2, #0
 800223e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002240:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002242:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002246:	f7fe fc09 	bl	8000a5c <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4613      	mov	r3, r2
 8002250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <HAL_RCC_GetSysClockFreq+0x458>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0f1b      	lsrs	r3, r3, #28
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002272:	e003      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800227a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002280:	4618      	mov	r0, r3
 8002282:	37b8      	adds	r7, #184	@ 0xb8
 8002284:	46bd      	mov	sp, r7
 8002286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	00f42400 	.word	0x00f42400

08002294 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e28d      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8083 	beq.w	80023ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022b4:	4b94      	ldr	r3, [pc, #592]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d019      	beq.n	80022f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c0:	4b91      	ldr	r3, [pc, #580]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022d8:	d00c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b8b      	ldr	r3, [pc, #556]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d112      	bne.n	800230c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b88      	ldr	r3, [pc, #544]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f2:	d10b      	bne.n	800230c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	4b84      	ldr	r3, [pc, #528]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05b      	beq.n	80023b8 <HAL_RCC_OscConfig+0x124>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d157      	bne.n	80023b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e25a      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x90>
 8002316:	4b7c      	ldr	r3, [pc, #496]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7b      	ldr	r2, [pc, #492]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xcc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0xb4>
 800232e:	4b76      	ldr	r3, [pc, #472]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a75      	ldr	r2, [pc, #468]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b73      	ldr	r3, [pc, #460]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a72      	ldr	r2, [pc, #456]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xcc>
 8002348:	4b6f      	ldr	r3, [pc, #444]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6e      	ldr	r2, [pc, #440]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b6c      	ldr	r3, [pc, #432]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6b      	ldr	r2, [pc, #428]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800235e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff f8ec 	bl	8001544 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff f8e8 	bl	8001544 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e21f      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b61      	ldr	r3, [pc, #388]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xdc>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff f8d8 	bl	8001544 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff f8d4 	bl	8001544 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	@ 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e20b      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x104>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06f      	beq.n	80024a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023c6:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d017      	beq.n	8002402 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d105      	bne.n	80023ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023de:	4b4a      	ldr	r3, [pc, #296]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d11c      	bne.n	8002430 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x186>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e1d3      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4937      	ldr	r1, [pc, #220]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	e03a      	b.n	80024a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002438:	4b34      	ldr	r3, [pc, #208]	@ (800250c <HAL_RCC_OscConfig+0x278>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f881 	bl	8001544 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002446:	f7ff f87d 	bl	8001544 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1b4      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4925      	ldr	r1, [pc, #148]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247a:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_OscConfig+0x278>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff f860 	bl	8001544 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002488:	f7ff f85c 	bl	8001544 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e193      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d036      	beq.n	8002520 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff f840 	bl	8001544 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff f83c 	bl	8001544 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e173      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x234>
 80024e6:	e01b      	b.n	8002520 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7ff f829 	bl	8001544 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	e00e      	b.n	8002514 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f6:	f7ff f825 	bl	8001544 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d907      	bls.n	8002514 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e15c      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
 8002508:	40023800 	.word	0x40023800
 800250c:	42470000 	.word	0x42470000
 8002510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	4b8a      	ldr	r3, [pc, #552]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ea      	bne.n	80024f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8097 	beq.w	800265c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4b83      	ldr	r3, [pc, #524]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b7f      	ldr	r3, [pc, #508]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a7e      	ldr	r2, [pc, #504]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b7c      	ldr	r3, [pc, #496]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b79      	ldr	r3, [pc, #484]	@ (8002744 <HAL_RCC_OscConfig+0x4b0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b76      	ldr	r3, [pc, #472]	@ (8002744 <HAL_RCC_OscConfig+0x4b0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a75      	ldr	r2, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x4b0>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe ffe5 	bl	8001544 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe ffe1 	bl	8001544 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e118      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	4b6c      	ldr	r3, [pc, #432]	@ (8002744 <HAL_RCC_OscConfig+0x4b0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x31e>
 80025a4:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	e01c      	b.n	80025ec <HAL_RCC_OscConfig+0x358>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x340>
 80025ba:	4b61      	ldr	r3, [pc, #388]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	4a60      	ldr	r2, [pc, #384]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0x358>
 80025d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	4a59      	ldr	r2, [pc, #356]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e0:	4b57      	ldr	r3, [pc, #348]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4a56      	ldr	r2, [pc, #344]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d015      	beq.n	8002620 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe ffa6 	bl	8001544 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe ffa2 	bl	8001544 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0d7      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	4b4b      	ldr	r3, [pc, #300]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ee      	beq.n	80025fc <HAL_RCC_OscConfig+0x368>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe ff90 	bl	8001544 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe ff8c 	bl	8001544 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0c1      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ee      	bne.n	8002628 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002650:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	4a3a      	ldr	r2, [pc, #232]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80ad 	beq.w	80027c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002666:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b08      	cmp	r3, #8
 8002670:	d060      	beq.n	8002734 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d145      	bne.n	8002706 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <HAL_RCC_OscConfig+0x4b4>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe ff60 	bl	8001544 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe ff5c 	bl	8001544 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e093      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	019b      	lsls	r3, r3, #6
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	3b01      	subs	r3, #1
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	061b      	lsls	r3, r3, #24
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	071b      	lsls	r3, r3, #28
 80026d2:	491b      	ldr	r1, [pc, #108]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x4b4>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe ff31 	bl	8001544 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe ff2d 	bl	8001544 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e064      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x452>
 8002704:	e05c      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_RCC_OscConfig+0x4b4>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe ff1a 	bl	8001544 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe ff16 	bl	8001544 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e04d      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x480>
 8002732:	e045      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e040      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
 8002740:	40023800 	.word	0x40023800
 8002744:	40007000 	.word	0x40007000
 8002748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <HAL_RCC_OscConfig+0x538>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d030      	beq.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d129      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d122      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800277c:	4013      	ands	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	4293      	cmp	r3, r2
 8002786:	d119      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d10f      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e041      	b.n	8002866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fd64 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3304      	adds	r3, #4
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f000 fbe2 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d001      	beq.n	8002888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e04e      	b.n	8002926 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	@ (8002934 <HAL_TIM_Base_Start_IT+0xc4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d022      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x80>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b2:	d01d      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x80>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002938 <HAL_TIM_Base_Start_IT+0xc8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d018      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x80>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1e      	ldr	r2, [pc, #120]	@ (800293c <HAL_TIM_Base_Start_IT+0xcc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x80>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002940 <HAL_TIM_Base_Start_IT+0xd0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00e      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x80>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002944 <HAL_TIM_Base_Start_IT+0xd4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x80>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a19      	ldr	r2, [pc, #100]	@ (8002948 <HAL_TIM_Base_Start_IT+0xd8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d004      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x80>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_TIM_Base_Start_IT+0xdc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d111      	bne.n	8002914 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d010      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002912:	e007      	b.n	8002924 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40010400 	.word	0x40010400
 8002948:	40014000 	.word	0x40014000
 800294c:	40001800 	.word	0x40001800

08002950 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e041      	b.n	80029e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fc68 	bl	800124c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 fb22 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_IC_Start_IT+0x1e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e013      	b.n	8002a36 <HAL_TIM_IC_Start_IT+0x46>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_IC_Start_IT+0x2e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_IC_Start_IT+0x46>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_IC_Start_IT+0x3e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	e003      	b.n	8002a36 <HAL_TIM_IC_Start_IT+0x46>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d104      	bne.n	8002a48 <HAL_TIM_IC_Start_IT+0x58>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e013      	b.n	8002a70 <HAL_TIM_IC_Start_IT+0x80>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d104      	bne.n	8002a58 <HAL_TIM_IC_Start_IT+0x68>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e00b      	b.n	8002a70 <HAL_TIM_IC_Start_IT+0x80>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d104      	bne.n	8002a68 <HAL_TIM_IC_Start_IT+0x78>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e003      	b.n	8002a70 <HAL_TIM_IC_Start_IT+0x80>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a72:	7bbb      	ldrb	r3, [r7, #14]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a78:	7b7b      	ldrb	r3, [r7, #13]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d001      	beq.n	8002a82 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0cc      	b.n	8002c1c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <HAL_TIM_IC_Start_IT+0xa2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a90:	e013      	b.n	8002aba <HAL_TIM_IC_Start_IT+0xca>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_IC_Start_IT+0xb2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aa0:	e00b      	b.n	8002aba <HAL_TIM_IC_Start_IT+0xca>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_IC_Start_IT+0xc2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab0:	e003      	b.n	8002aba <HAL_TIM_IC_Start_IT+0xca>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_IC_Start_IT+0xda>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac8:	e013      	b.n	8002af2 <HAL_TIM_IC_Start_IT+0x102>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_IC_Start_IT+0xea>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ad8:	e00b      	b.n	8002af2 <HAL_TIM_IC_Start_IT+0x102>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_IC_Start_IT+0xfa>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ae8:	e003      	b.n	8002af2 <HAL_TIM_IC_Start_IT+0x102>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d841      	bhi.n	8002b7c <HAL_TIM_IC_Start_IT+0x18c>
 8002af8:	a201      	add	r2, pc, #4	@ (adr r2, 8002b00 <HAL_TIM_IC_Start_IT+0x110>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b35 	.word	0x08002b35
 8002b04:	08002b7d 	.word	0x08002b7d
 8002b08:	08002b7d 	.word	0x08002b7d
 8002b0c:	08002b7d 	.word	0x08002b7d
 8002b10:	08002b47 	.word	0x08002b47
 8002b14:	08002b7d 	.word	0x08002b7d
 8002b18:	08002b7d 	.word	0x08002b7d
 8002b1c:	08002b7d 	.word	0x08002b7d
 8002b20:	08002b59 	.word	0x08002b59
 8002b24:	08002b7d 	.word	0x08002b7d
 8002b28:	08002b7d 	.word	0x08002b7d
 8002b2c:	08002b7d 	.word	0x08002b7d
 8002b30:	08002b6b 	.word	0x08002b6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0202 	orr.w	r2, r2, #2
 8002b42:	60da      	str	r2, [r3, #12]
      break;
 8002b44:	e01d      	b.n	8002b82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0204 	orr.w	r2, r2, #4
 8002b54:	60da      	str	r2, [r3, #12]
      break;
 8002b56:	e014      	b.n	8002b82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0208 	orr.w	r2, r2, #8
 8002b66:	60da      	str	r2, [r3, #12]
      break;
 8002b68:	e00b      	b.n	8002b82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0210 	orr.w	r2, r2, #16
 8002b78:	60da      	str	r2, [r3, #12]
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d148      	bne.n	8002c1a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fbeb 	bl	800336c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <HAL_TIM_IC_Start_IT+0x234>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d022      	beq.n	8002be6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba8:	d01d      	beq.n	8002be6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_TIM_IC_Start_IT+0x238>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d018      	beq.n	8002be6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c2c <HAL_TIM_IC_Start_IT+0x23c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <HAL_TIM_IC_Start_IT+0x240>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00e      	beq.n	8002be6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	@ (8002c34 <HAL_TIM_IC_Start_IT+0x244>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a18      	ldr	r2, [pc, #96]	@ (8002c38 <HAL_TIM_IC_Start_IT+0x248>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <HAL_TIM_IC_Start_IT+0x24c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d111      	bne.n	8002c0a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b06      	cmp	r3, #6
 8002bf6:	d010      	beq.n	8002c1a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	e007      	b.n	8002c1a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0201 	orr.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40010000 	.word	0x40010000
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	40000c00 	.word	0x40000c00
 8002c34:	40010400 	.word	0x40010400
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40001800 	.word	0x40001800

08002c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0202 	mvn.w	r2, #2
 8002c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe fa88 	bl	8001198 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f986 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f98d 	bl	8002fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0204 	mvn.w	r2, #4
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fa5e 	bl	8001198 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f95c 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f963 	bl	8002fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0208 	mvn.w	r2, #8
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2204      	movs	r2, #4
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe fa34 	bl	8001198 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f932 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f939 	bl	8002fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d122      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d11b      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0210 	mvn.w	r2, #16
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe fa0a 	bl	8001198 <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f908 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f90f 	bl	8002fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d107      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0201 	mvn.w	r2, #1
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8e2 	bl	8002f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dce:	2b80      	cmp	r3, #128	@ 0x80
 8002dd0:	d10e      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ddc:	2b80      	cmp	r3, #128	@ 0x80
 8002dde:	d107      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 faed 	bl	80033ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfa:	2b40      	cmp	r3, #64	@ 0x40
 8002dfc:	d10e      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e08:	2b40      	cmp	r3, #64	@ 0x40
 8002e0a:	d107      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8d4 	bl	8002fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0220 	mvn.w	r2, #32
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fab7 	bl	80033b6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e088      	b.n	8002f80 <HAL_TIM_IC_ConfigChannel+0x130>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f000 f944 	bl	8003118 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 020c 	bic.w	r2, r2, #12
 8002e9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	619a      	str	r2, [r3, #24]
 8002eb2:	e060      	b.n	8002f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d11c      	bne.n	8002ef4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f000 f999 	bl	8003200 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002edc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6999      	ldr	r1, [r3, #24]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	021a      	lsls	r2, r3, #8
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	619a      	str	r2, [r3, #24]
 8002ef2:	e040      	b.n	8002f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11b      	bne.n	8002f32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f000 f9b6 	bl	800327a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 020c 	bic.w	r2, r2, #12
 8002f1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	61da      	str	r2, [r3, #28]
 8002f30:	e021      	b.n	8002f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d11c      	bne.n	8002f72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f000 f9d3 	bl	80032f2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69d9      	ldr	r1, [r3, #28]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	61da      	str	r2, [r3, #28]
 8002f70:	e001      	b.n	8002f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a40      	ldr	r2, [pc, #256]	@ (80030ec <TIM_Base_SetConfig+0x114>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff6:	d00f      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80030f0 <TIM_Base_SetConfig+0x118>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3c      	ldr	r2, [pc, #240]	@ (80030f4 <TIM_Base_SetConfig+0x11c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3b      	ldr	r2, [pc, #236]	@ (80030f8 <TIM_Base_SetConfig+0x120>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3a      	ldr	r2, [pc, #232]	@ (80030fc <TIM_Base_SetConfig+0x124>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2f      	ldr	r2, [pc, #188]	@ (80030ec <TIM_Base_SetConfig+0x114>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02b      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003038:	d027      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a2c      	ldr	r2, [pc, #176]	@ (80030f0 <TIM_Base_SetConfig+0x118>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d023      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a2b      	ldr	r2, [pc, #172]	@ (80030f4 <TIM_Base_SetConfig+0x11c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01f      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a2a      	ldr	r2, [pc, #168]	@ (80030f8 <TIM_Base_SetConfig+0x120>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01b      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a29      	ldr	r2, [pc, #164]	@ (80030fc <TIM_Base_SetConfig+0x124>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d017      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a28      	ldr	r2, [pc, #160]	@ (8003100 <TIM_Base_SetConfig+0x128>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a27      	ldr	r2, [pc, #156]	@ (8003104 <TIM_Base_SetConfig+0x12c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00f      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a26      	ldr	r2, [pc, #152]	@ (8003108 <TIM_Base_SetConfig+0x130>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a25      	ldr	r2, [pc, #148]	@ (800310c <TIM_Base_SetConfig+0x134>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a24      	ldr	r2, [pc, #144]	@ (8003110 <TIM_Base_SetConfig+0x138>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a23      	ldr	r2, [pc, #140]	@ (8003114 <TIM_Base_SetConfig+0x13c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a0a      	ldr	r2, [pc, #40]	@ (80030ec <TIM_Base_SetConfig+0x114>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_Base_SetConfig+0xf8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a0c      	ldr	r2, [pc, #48]	@ (80030fc <TIM_Base_SetConfig+0x124>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d103      	bne.n	80030d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	615a      	str	r2, [r3, #20]
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40010000 	.word	0x40010000
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40000c00 	.word	0x40000c00
 80030fc:	40010400 	.word	0x40010400
 8003100:	40014000 	.word	0x40014000
 8003104:	40014400 	.word	0x40014400
 8003108:	40014800 	.word	0x40014800
 800310c:	40001800 	.word	0x40001800
 8003110:	40001c00 	.word	0x40001c00
 8003114:	40002000 	.word	0x40002000

08003118 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f023 0201 	bic.w	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a28      	ldr	r2, [pc, #160]	@ (80031e4 <TIM_TI1_SetConfig+0xcc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01b      	beq.n	800317e <TIM_TI1_SetConfig+0x66>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314c:	d017      	beq.n	800317e <TIM_TI1_SetConfig+0x66>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a25      	ldr	r2, [pc, #148]	@ (80031e8 <TIM_TI1_SetConfig+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <TIM_TI1_SetConfig+0x66>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4a24      	ldr	r2, [pc, #144]	@ (80031ec <TIM_TI1_SetConfig+0xd4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00f      	beq.n	800317e <TIM_TI1_SetConfig+0x66>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a23      	ldr	r2, [pc, #140]	@ (80031f0 <TIM_TI1_SetConfig+0xd8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00b      	beq.n	800317e <TIM_TI1_SetConfig+0x66>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a22      	ldr	r2, [pc, #136]	@ (80031f4 <TIM_TI1_SetConfig+0xdc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <TIM_TI1_SetConfig+0x66>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a21      	ldr	r2, [pc, #132]	@ (80031f8 <TIM_TI1_SetConfig+0xe0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d003      	beq.n	800317e <TIM_TI1_SetConfig+0x66>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a20      	ldr	r2, [pc, #128]	@ (80031fc <TIM_TI1_SetConfig+0xe4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <TIM_TI1_SetConfig+0x6a>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <TIM_TI1_SetConfig+0x6c>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e003      	b.n	80031a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f023 030a 	bic.w	r3, r3, #10
 80031bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 030a 	and.w	r3, r3, #10
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800
 80031f0:	40000c00 	.word	0x40000c00
 80031f4:	40010400 	.word	0x40010400
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40001800 	.word	0x40001800

08003200 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f023 0210 	bic.w	r2, r3, #16
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800322c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800323e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	031b      	lsls	r3, r3, #12
 8003244:	b29b      	uxth	r3, r3
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003252:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800327a:	b480      	push	{r7}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b087      	sub	sp, #28
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800331e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003330:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	031b      	lsls	r3, r3, #12
 8003336:	b29b      	uxth	r3, r3
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003344:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	031b      	lsls	r3, r3, #12
 800334a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2201      	movs	r2, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1a      	ldr	r2, [r3, #32]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	fa01 f303 	lsl.w	r3, r1, r3
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e03f      	b.n	8003470 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fd ff7d 	bl	8001304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2224      	movs	r2, #36	@ 0x24
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003420:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f928 	bl	8003678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003436:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003446:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003456:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	@ 0x28
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b20      	cmp	r3, #32
 8003496:	d17c      	bne.n	8003592 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_UART_Transmit+0x2c>
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e075      	b.n	8003594 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Transmit+0x3e>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e06e      	b.n	8003594 <HAL_UART_Transmit+0x11c>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2221      	movs	r2, #33	@ 0x21
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034cc:	f7fe f83a 	bl	8001544 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e6:	d108      	bne.n	80034fa <HAL_UART_Transmit+0x82>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e003      	b.n	8003502 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800350a:	e02a      	b.n	8003562 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2200      	movs	r2, #0
 8003514:	2180      	movs	r1, #128	@ 0x80
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f840 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e036      	b.n	8003594 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800353a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	3302      	adds	r3, #2
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	e007      	b.n	8003554 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3301      	adds	r3, #1
 8003552:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1cf      	bne.n	800350c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2200      	movs	r2, #0
 8003574:	2140      	movs	r1, #64	@ 0x40
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f810 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e006      	b.n	8003594 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b090      	sub	sp, #64	@ 0x40
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	e050      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d04c      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <UART_WaitOnFlagUntilTimeout+0x30>
 80035bc:	f7fd ffc2 	bl	8001544 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d241      	bcs.n	8003650 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80035e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80035ee:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80035fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	613b      	str	r3, [r7, #16]
   return(result);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003620:	623a      	str	r2, [r7, #32]
 8003622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	69f9      	ldr	r1, [r7, #28]
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	61bb      	str	r3, [r7, #24]
   return(result);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e00f      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	429a      	cmp	r2, r3
 800366c:	d09f      	beq.n	80035ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3740      	adds	r7, #64	@ 0x40
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b0c0      	sub	sp, #256	@ 0x100
 800367e:	af00      	add	r7, sp, #0
 8003680:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	ea40 0301 	orr.w	r3, r0, r1
 80036a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036d0:	f021 010c 	bic.w	r1, r1, #12
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036de:	430b      	orrs	r3, r1
 80036e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f2:	6999      	ldr	r1, [r3, #24]
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	ea40 0301 	orr.w	r3, r0, r1
 80036fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b8f      	ldr	r3, [pc, #572]	@ (8003944 <UART_SetConfig+0x2cc>)
 8003708:	429a      	cmp	r2, r3
 800370a:	d005      	beq.n	8003718 <UART_SetConfig+0xa0>
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b8d      	ldr	r3, [pc, #564]	@ (8003948 <UART_SetConfig+0x2d0>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7fe fb78 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 800371c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003720:	e003      	b.n	800372a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003722:	f7fe fb5f 	bl	8001de4 <HAL_RCC_GetPCLK1Freq>
 8003726:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003734:	f040 810c 	bne.w	8003950 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003742:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003746:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800374a:	4622      	mov	r2, r4
 800374c:	462b      	mov	r3, r5
 800374e:	1891      	adds	r1, r2, r2
 8003750:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003752:	415b      	adcs	r3, r3
 8003754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800375a:	4621      	mov	r1, r4
 800375c:	eb12 0801 	adds.w	r8, r2, r1
 8003760:	4629      	mov	r1, r5
 8003762:	eb43 0901 	adc.w	r9, r3, r1
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	4623      	mov	r3, r4
 8003780:	eb18 0303 	adds.w	r3, r8, r3
 8003784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003788:	462b      	mov	r3, r5
 800378a:	eb49 0303 	adc.w	r3, r9, r3
 800378e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800379e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037a6:	460b      	mov	r3, r1
 80037a8:	18db      	adds	r3, r3, r3
 80037aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ac:	4613      	mov	r3, r2
 80037ae:	eb42 0303 	adc.w	r3, r2, r3
 80037b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80037b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037bc:	f7fd f94e 	bl	8000a5c <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4b61      	ldr	r3, [pc, #388]	@ (800394c <UART_SetConfig+0x2d4>)
 80037c6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	011c      	lsls	r4, r3, #4
 80037ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	1891      	adds	r1, r2, r2
 80037e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037e8:	415b      	adcs	r3, r3
 80037ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037f0:	4641      	mov	r1, r8
 80037f2:	eb12 0a01 	adds.w	sl, r2, r1
 80037f6:	4649      	mov	r1, r9
 80037f8:	eb43 0b01 	adc.w	fp, r3, r1
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003808:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800380c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003810:	4692      	mov	sl, r2
 8003812:	469b      	mov	fp, r3
 8003814:	4643      	mov	r3, r8
 8003816:	eb1a 0303 	adds.w	r3, sl, r3
 800381a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800381e:	464b      	mov	r3, r9
 8003820:	eb4b 0303 	adc.w	r3, fp, r3
 8003824:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003834:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003838:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800383c:	460b      	mov	r3, r1
 800383e:	18db      	adds	r3, r3, r3
 8003840:	643b      	str	r3, [r7, #64]	@ 0x40
 8003842:	4613      	mov	r3, r2
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	647b      	str	r3, [r7, #68]	@ 0x44
 800384a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800384e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003852:	f7fd f903 	bl	8000a5c <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4611      	mov	r1, r2
 800385c:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <UART_SetConfig+0x2d4>)
 800385e:	fba3 2301 	umull	r2, r3, r3, r1
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2264      	movs	r2, #100	@ 0x64
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	1acb      	subs	r3, r1, r3
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003872:	4b36      	ldr	r3, [pc, #216]	@ (800394c <UART_SetConfig+0x2d4>)
 8003874:	fba3 2302 	umull	r2, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003880:	441c      	add	r4, r3
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800388c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003890:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003894:	4642      	mov	r2, r8
 8003896:	464b      	mov	r3, r9
 8003898:	1891      	adds	r1, r2, r2
 800389a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800389c:	415b      	adcs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038a4:	4641      	mov	r1, r8
 80038a6:	1851      	adds	r1, r2, r1
 80038a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80038aa:	4649      	mov	r1, r9
 80038ac:	414b      	adcs	r3, r1
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038bc:	4659      	mov	r1, fp
 80038be:	00cb      	lsls	r3, r1, #3
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c6:	4651      	mov	r1, sl
 80038c8:	00ca      	lsls	r2, r1, #3
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	4642      	mov	r2, r8
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038d8:	464b      	mov	r3, r9
 80038da:	460a      	mov	r2, r1
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038f8:	460b      	mov	r3, r1
 80038fa:	18db      	adds	r3, r3, r3
 80038fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038fe:	4613      	mov	r3, r2
 8003900:	eb42 0303 	adc.w	r3, r2, r3
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800390a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800390e:	f7fd f8a5 	bl	8000a5c <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <UART_SetConfig+0x2d4>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	@ 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	3332      	adds	r3, #50	@ 0x32
 800392a:	4a08      	ldr	r2, [pc, #32]	@ (800394c <UART_SetConfig+0x2d4>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 0207 	and.w	r2, r3, #7
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4422      	add	r2, r4
 800393e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003940:	e106      	b.n	8003b50 <UART_SetConfig+0x4d8>
 8003942:	bf00      	nop
 8003944:	40011000 	.word	0x40011000
 8003948:	40011400 	.word	0x40011400
 800394c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800395a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800395e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003962:	4642      	mov	r2, r8
 8003964:	464b      	mov	r3, r9
 8003966:	1891      	adds	r1, r2, r2
 8003968:	6239      	str	r1, [r7, #32]
 800396a:	415b      	adcs	r3, r3
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
 800396e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003972:	4641      	mov	r1, r8
 8003974:	1854      	adds	r4, r2, r1
 8003976:	4649      	mov	r1, r9
 8003978:	eb43 0501 	adc.w	r5, r3, r1
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	00eb      	lsls	r3, r5, #3
 8003986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800398a:	00e2      	lsls	r2, r4, #3
 800398c:	4614      	mov	r4, r2
 800398e:	461d      	mov	r5, r3
 8003990:	4643      	mov	r3, r8
 8003992:	18e3      	adds	r3, r4, r3
 8003994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003998:	464b      	mov	r3, r9
 800399a:	eb45 0303 	adc.w	r3, r5, r3
 800399e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039be:	4629      	mov	r1, r5
 80039c0:	008b      	lsls	r3, r1, #2
 80039c2:	4621      	mov	r1, r4
 80039c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c8:	4621      	mov	r1, r4
 80039ca:	008a      	lsls	r2, r1, #2
 80039cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039d0:	f7fd f844 	bl	8000a5c <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b60      	ldr	r3, [pc, #384]	@ (8003b5c <UART_SetConfig+0x4e4>)
 80039da:	fba3 2302 	umull	r2, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	011c      	lsls	r4, r3, #4
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	61b9      	str	r1, [r7, #24]
 80039fc:	415b      	adcs	r3, r3
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a04:	4641      	mov	r1, r8
 8003a06:	1851      	adds	r1, r2, r1
 8003a08:	6139      	str	r1, [r7, #16]
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4651      	mov	r1, sl
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4642      	mov	r2, r8
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a38:	464b      	mov	r3, r9
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	008b      	lsls	r3, r1, #2
 8003a60:	4641      	mov	r1, r8
 8003a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a66:	4641      	mov	r1, r8
 8003a68:	008a      	lsls	r2, r1, #2
 8003a6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a6e:	f7fc fff5 	bl	8000a5c <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	4b38      	ldr	r3, [pc, #224]	@ (8003b5c <UART_SetConfig+0x4e4>)
 8003a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2264      	movs	r2, #100	@ 0x64
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	1acb      	subs	r3, r1, r3
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	3332      	adds	r3, #50	@ 0x32
 8003a8c:	4a33      	ldr	r2, [pc, #204]	@ (8003b5c <UART_SetConfig+0x4e4>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a98:	441c      	add	r4, r3
 8003a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003aa2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003aa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	464b      	mov	r3, r9
 8003aac:	1891      	adds	r1, r2, r2
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	415b      	adcs	r3, r3
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab8:	4641      	mov	r1, r8
 8003aba:	1851      	adds	r1, r2, r1
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	4649      	mov	r1, r9
 8003ac0:	414b      	adcs	r3, r1
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	00cb      	lsls	r3, r1, #3
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ada:	4651      	mov	r1, sl
 8003adc:	00ca      	lsls	r2, r1, #3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aea:	464b      	mov	r3, r9
 8003aec:	460a      	mov	r2, r1
 8003aee:	eb42 0303 	adc.w	r3, r2, r3
 8003af2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003afe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	008b      	lsls	r3, r1, #2
 8003b10:	4641      	mov	r1, r8
 8003b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b16:	4641      	mov	r1, r8
 8003b18:	008a      	lsls	r2, r1, #2
 8003b1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b1e:	f7fc ff9d 	bl	8000a5c <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <UART_SetConfig+0x4e4>)
 8003b28:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	2164      	movs	r1, #100	@ 0x64
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	3332      	adds	r3, #50	@ 0x32
 8003b3a:	4a08      	ldr	r2, [pc, #32]	@ (8003b5c <UART_SetConfig+0x4e4>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 020f 	and.w	r2, r3, #15
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4422      	add	r2, r4
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b56:	46bd      	mov	sp, r7
 8003b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5c:	51eb851f 	.word	0x51eb851f

08003b60 <siprintf>:
 8003b60:	b40e      	push	{r1, r2, r3}
 8003b62:	b510      	push	{r4, lr}
 8003b64:	b09d      	sub	sp, #116	@ 0x74
 8003b66:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003b68:	9002      	str	r0, [sp, #8]
 8003b6a:	9006      	str	r0, [sp, #24]
 8003b6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b70:	480a      	ldr	r0, [pc, #40]	@ (8003b9c <siprintf+0x3c>)
 8003b72:	9107      	str	r1, [sp, #28]
 8003b74:	9104      	str	r1, [sp, #16]
 8003b76:	490a      	ldr	r1, [pc, #40]	@ (8003ba0 <siprintf+0x40>)
 8003b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b7c:	9105      	str	r1, [sp, #20]
 8003b7e:	2400      	movs	r4, #0
 8003b80:	a902      	add	r1, sp, #8
 8003b82:	6800      	ldr	r0, [r0, #0]
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003b88:	f000 f98c 	bl	8003ea4 <_svfiprintf_r>
 8003b8c:	9b02      	ldr	r3, [sp, #8]
 8003b8e:	701c      	strb	r4, [r3, #0]
 8003b90:	b01d      	add	sp, #116	@ 0x74
 8003b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b96:	b003      	add	sp, #12
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000010 	.word	0x20000010
 8003ba0:	ffff0208 	.word	0xffff0208

08003ba4 <__errno>:
 8003ba4:	4b01      	ldr	r3, [pc, #4]	@ (8003bac <__errno+0x8>)
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000010 	.word	0x20000010

08003bb0 <__libc_init_array>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8003be8 <__libc_init_array+0x38>)
 8003bb4:	4c0d      	ldr	r4, [pc, #52]	@ (8003bec <__libc_init_array+0x3c>)
 8003bb6:	1b64      	subs	r4, r4, r5
 8003bb8:	10a4      	asrs	r4, r4, #2
 8003bba:	2600      	movs	r6, #0
 8003bbc:	42a6      	cmp	r6, r4
 8003bbe:	d109      	bne.n	8003bd4 <__libc_init_array+0x24>
 8003bc0:	4d0b      	ldr	r5, [pc, #44]	@ (8003bf0 <__libc_init_array+0x40>)
 8003bc2:	4c0c      	ldr	r4, [pc, #48]	@ (8003bf4 <__libc_init_array+0x44>)
 8003bc4:	f000 fc64 	bl	8004490 <_init>
 8003bc8:	1b64      	subs	r4, r4, r5
 8003bca:	10a4      	asrs	r4, r4, #2
 8003bcc:	2600      	movs	r6, #0
 8003bce:	42a6      	cmp	r6, r4
 8003bd0:	d105      	bne.n	8003bde <__libc_init_array+0x2e>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd8:	4798      	blx	r3
 8003bda:	3601      	adds	r6, #1
 8003bdc:	e7ee      	b.n	8003bbc <__libc_init_array+0xc>
 8003bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be2:	4798      	blx	r3
 8003be4:	3601      	adds	r6, #1
 8003be6:	e7f2      	b.n	8003bce <__libc_init_array+0x1e>
 8003be8:	08004528 	.word	0x08004528
 8003bec:	08004528 	.word	0x08004528
 8003bf0:	08004528 	.word	0x08004528
 8003bf4:	0800452c 	.word	0x0800452c

08003bf8 <__retarget_lock_acquire_recursive>:
 8003bf8:	4770      	bx	lr

08003bfa <__retarget_lock_release_recursive>:
 8003bfa:	4770      	bx	lr

08003bfc <_free_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4605      	mov	r5, r0
 8003c00:	2900      	cmp	r1, #0
 8003c02:	d041      	beq.n	8003c88 <_free_r+0x8c>
 8003c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c08:	1f0c      	subs	r4, r1, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bfb8      	it	lt
 8003c0e:	18e4      	addlt	r4, r4, r3
 8003c10:	f000 f8e0 	bl	8003dd4 <__malloc_lock>
 8003c14:	4a1d      	ldr	r2, [pc, #116]	@ (8003c8c <_free_r+0x90>)
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	b933      	cbnz	r3, 8003c28 <_free_r+0x2c>
 8003c1a:	6063      	str	r3, [r4, #4]
 8003c1c:	6014      	str	r4, [r2, #0]
 8003c1e:	4628      	mov	r0, r5
 8003c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c24:	f000 b8dc 	b.w	8003de0 <__malloc_unlock>
 8003c28:	42a3      	cmp	r3, r4
 8003c2a:	d908      	bls.n	8003c3e <_free_r+0x42>
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	1821      	adds	r1, r4, r0
 8003c30:	428b      	cmp	r3, r1
 8003c32:	bf01      	itttt	eq
 8003c34:	6819      	ldreq	r1, [r3, #0]
 8003c36:	685b      	ldreq	r3, [r3, #4]
 8003c38:	1809      	addeq	r1, r1, r0
 8003c3a:	6021      	streq	r1, [r4, #0]
 8003c3c:	e7ed      	b.n	8003c1a <_free_r+0x1e>
 8003c3e:	461a      	mov	r2, r3
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b10b      	cbz	r3, 8003c48 <_free_r+0x4c>
 8003c44:	42a3      	cmp	r3, r4
 8003c46:	d9fa      	bls.n	8003c3e <_free_r+0x42>
 8003c48:	6811      	ldr	r1, [r2, #0]
 8003c4a:	1850      	adds	r0, r2, r1
 8003c4c:	42a0      	cmp	r0, r4
 8003c4e:	d10b      	bne.n	8003c68 <_free_r+0x6c>
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	4401      	add	r1, r0
 8003c54:	1850      	adds	r0, r2, r1
 8003c56:	4283      	cmp	r3, r0
 8003c58:	6011      	str	r1, [r2, #0]
 8003c5a:	d1e0      	bne.n	8003c1e <_free_r+0x22>
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	6053      	str	r3, [r2, #4]
 8003c62:	4408      	add	r0, r1
 8003c64:	6010      	str	r0, [r2, #0]
 8003c66:	e7da      	b.n	8003c1e <_free_r+0x22>
 8003c68:	d902      	bls.n	8003c70 <_free_r+0x74>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	602b      	str	r3, [r5, #0]
 8003c6e:	e7d6      	b.n	8003c1e <_free_r+0x22>
 8003c70:	6820      	ldr	r0, [r4, #0]
 8003c72:	1821      	adds	r1, r4, r0
 8003c74:	428b      	cmp	r3, r1
 8003c76:	bf04      	itt	eq
 8003c78:	6819      	ldreq	r1, [r3, #0]
 8003c7a:	685b      	ldreq	r3, [r3, #4]
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	bf04      	itt	eq
 8003c80:	1809      	addeq	r1, r1, r0
 8003c82:	6021      	streq	r1, [r4, #0]
 8003c84:	6054      	str	r4, [r2, #4]
 8003c86:	e7ca      	b.n	8003c1e <_free_r+0x22>
 8003c88:	bd38      	pop	{r3, r4, r5, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200002a8 	.word	0x200002a8

08003c90 <sbrk_aligned>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	4e0f      	ldr	r6, [pc, #60]	@ (8003cd0 <sbrk_aligned+0x40>)
 8003c94:	460c      	mov	r4, r1
 8003c96:	6831      	ldr	r1, [r6, #0]
 8003c98:	4605      	mov	r5, r0
 8003c9a:	b911      	cbnz	r1, 8003ca2 <sbrk_aligned+0x12>
 8003c9c:	f000 fba4 	bl	80043e8 <_sbrk_r>
 8003ca0:	6030      	str	r0, [r6, #0]
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f000 fb9f 	bl	80043e8 <_sbrk_r>
 8003caa:	1c43      	adds	r3, r0, #1
 8003cac:	d103      	bne.n	8003cb6 <sbrk_aligned+0x26>
 8003cae:	f04f 34ff 	mov.w	r4, #4294967295
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
 8003cb6:	1cc4      	adds	r4, r0, #3
 8003cb8:	f024 0403 	bic.w	r4, r4, #3
 8003cbc:	42a0      	cmp	r0, r4
 8003cbe:	d0f8      	beq.n	8003cb2 <sbrk_aligned+0x22>
 8003cc0:	1a21      	subs	r1, r4, r0
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 fb90 	bl	80043e8 <_sbrk_r>
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d1f2      	bne.n	8003cb2 <sbrk_aligned+0x22>
 8003ccc:	e7ef      	b.n	8003cae <sbrk_aligned+0x1e>
 8003cce:	bf00      	nop
 8003cd0:	200002a4 	.word	0x200002a4

08003cd4 <_malloc_r>:
 8003cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd8:	1ccd      	adds	r5, r1, #3
 8003cda:	f025 0503 	bic.w	r5, r5, #3
 8003cde:	3508      	adds	r5, #8
 8003ce0:	2d0c      	cmp	r5, #12
 8003ce2:	bf38      	it	cc
 8003ce4:	250c      	movcc	r5, #12
 8003ce6:	2d00      	cmp	r5, #0
 8003ce8:	4606      	mov	r6, r0
 8003cea:	db01      	blt.n	8003cf0 <_malloc_r+0x1c>
 8003cec:	42a9      	cmp	r1, r5
 8003cee:	d904      	bls.n	8003cfa <_malloc_r+0x26>
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	6033      	str	r3, [r6, #0]
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dd0 <_malloc_r+0xfc>
 8003cfe:	f000 f869 	bl	8003dd4 <__malloc_lock>
 8003d02:	f8d8 3000 	ldr.w	r3, [r8]
 8003d06:	461c      	mov	r4, r3
 8003d08:	bb44      	cbnz	r4, 8003d5c <_malloc_r+0x88>
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f7ff ffbf 	bl	8003c90 <sbrk_aligned>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	4604      	mov	r4, r0
 8003d16:	d158      	bne.n	8003dca <_malloc_r+0xf6>
 8003d18:	f8d8 4000 	ldr.w	r4, [r8]
 8003d1c:	4627      	mov	r7, r4
 8003d1e:	2f00      	cmp	r7, #0
 8003d20:	d143      	bne.n	8003daa <_malloc_r+0xd6>
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	d04b      	beq.n	8003dbe <_malloc_r+0xea>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	4639      	mov	r1, r7
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	eb04 0903 	add.w	r9, r4, r3
 8003d30:	f000 fb5a 	bl	80043e8 <_sbrk_r>
 8003d34:	4581      	cmp	r9, r0
 8003d36:	d142      	bne.n	8003dbe <_malloc_r+0xea>
 8003d38:	6821      	ldr	r1, [r4, #0]
 8003d3a:	1a6d      	subs	r5, r5, r1
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff ffa6 	bl	8003c90 <sbrk_aligned>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d03a      	beq.n	8003dbe <_malloc_r+0xea>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	442b      	add	r3, r5
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	bb62      	cbnz	r2, 8003db0 <_malloc_r+0xdc>
 8003d56:	f8c8 7000 	str.w	r7, [r8]
 8003d5a:	e00f      	b.n	8003d7c <_malloc_r+0xa8>
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	1b52      	subs	r2, r2, r5
 8003d60:	d420      	bmi.n	8003da4 <_malloc_r+0xd0>
 8003d62:	2a0b      	cmp	r2, #11
 8003d64:	d917      	bls.n	8003d96 <_malloc_r+0xc2>
 8003d66:	1961      	adds	r1, r4, r5
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	6025      	str	r5, [r4, #0]
 8003d6c:	bf18      	it	ne
 8003d6e:	6059      	strne	r1, [r3, #4]
 8003d70:	6863      	ldr	r3, [r4, #4]
 8003d72:	bf08      	it	eq
 8003d74:	f8c8 1000 	streq.w	r1, [r8]
 8003d78:	5162      	str	r2, [r4, r5]
 8003d7a:	604b      	str	r3, [r1, #4]
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f000 f82f 	bl	8003de0 <__malloc_unlock>
 8003d82:	f104 000b 	add.w	r0, r4, #11
 8003d86:	1d23      	adds	r3, r4, #4
 8003d88:	f020 0007 	bic.w	r0, r0, #7
 8003d8c:	1ac2      	subs	r2, r0, r3
 8003d8e:	bf1c      	itt	ne
 8003d90:	1a1b      	subne	r3, r3, r0
 8003d92:	50a3      	strne	r3, [r4, r2]
 8003d94:	e7af      	b.n	8003cf6 <_malloc_r+0x22>
 8003d96:	6862      	ldr	r2, [r4, #4]
 8003d98:	42a3      	cmp	r3, r4
 8003d9a:	bf0c      	ite	eq
 8003d9c:	f8c8 2000 	streq.w	r2, [r8]
 8003da0:	605a      	strne	r2, [r3, #4]
 8003da2:	e7eb      	b.n	8003d7c <_malloc_r+0xa8>
 8003da4:	4623      	mov	r3, r4
 8003da6:	6864      	ldr	r4, [r4, #4]
 8003da8:	e7ae      	b.n	8003d08 <_malloc_r+0x34>
 8003daa:	463c      	mov	r4, r7
 8003dac:	687f      	ldr	r7, [r7, #4]
 8003dae:	e7b6      	b.n	8003d1e <_malloc_r+0x4a>
 8003db0:	461a      	mov	r2, r3
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	42a3      	cmp	r3, r4
 8003db6:	d1fb      	bne.n	8003db0 <_malloc_r+0xdc>
 8003db8:	2300      	movs	r3, #0
 8003dba:	6053      	str	r3, [r2, #4]
 8003dbc:	e7de      	b.n	8003d7c <_malloc_r+0xa8>
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f000 f80c 	bl	8003de0 <__malloc_unlock>
 8003dc8:	e794      	b.n	8003cf4 <_malloc_r+0x20>
 8003dca:	6005      	str	r5, [r0, #0]
 8003dcc:	e7d6      	b.n	8003d7c <_malloc_r+0xa8>
 8003dce:	bf00      	nop
 8003dd0:	200002a8 	.word	0x200002a8

08003dd4 <__malloc_lock>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	@ (8003ddc <__malloc_lock+0x8>)
 8003dd6:	f7ff bf0f 	b.w	8003bf8 <__retarget_lock_acquire_recursive>
 8003dda:	bf00      	nop
 8003ddc:	200002a0 	.word	0x200002a0

08003de0 <__malloc_unlock>:
 8003de0:	4801      	ldr	r0, [pc, #4]	@ (8003de8 <__malloc_unlock+0x8>)
 8003de2:	f7ff bf0a 	b.w	8003bfa <__retarget_lock_release_recursive>
 8003de6:	bf00      	nop
 8003de8:	200002a0 	.word	0x200002a0

08003dec <__ssputs_r>:
 8003dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	688e      	ldr	r6, [r1, #8]
 8003df2:	461f      	mov	r7, r3
 8003df4:	42be      	cmp	r6, r7
 8003df6:	680b      	ldr	r3, [r1, #0]
 8003df8:	4682      	mov	sl, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	4690      	mov	r8, r2
 8003dfe:	d82d      	bhi.n	8003e5c <__ssputs_r+0x70>
 8003e00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e08:	d026      	beq.n	8003e58 <__ssputs_r+0x6c>
 8003e0a:	6965      	ldr	r5, [r4, #20]
 8003e0c:	6909      	ldr	r1, [r1, #16]
 8003e0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e12:	eba3 0901 	sub.w	r9, r3, r1
 8003e16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e1a:	1c7b      	adds	r3, r7, #1
 8003e1c:	444b      	add	r3, r9
 8003e1e:	106d      	asrs	r5, r5, #1
 8003e20:	429d      	cmp	r5, r3
 8003e22:	bf38      	it	cc
 8003e24:	461d      	movcc	r5, r3
 8003e26:	0553      	lsls	r3, r2, #21
 8003e28:	d527      	bpl.n	8003e7a <__ssputs_r+0x8e>
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	f7ff ff52 	bl	8003cd4 <_malloc_r>
 8003e30:	4606      	mov	r6, r0
 8003e32:	b360      	cbz	r0, 8003e8e <__ssputs_r+0xa2>
 8003e34:	6921      	ldr	r1, [r4, #16]
 8003e36:	464a      	mov	r2, r9
 8003e38:	f000 fae6 	bl	8004408 <memcpy>
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e46:	81a3      	strh	r3, [r4, #12]
 8003e48:	6126      	str	r6, [r4, #16]
 8003e4a:	6165      	str	r5, [r4, #20]
 8003e4c:	444e      	add	r6, r9
 8003e4e:	eba5 0509 	sub.w	r5, r5, r9
 8003e52:	6026      	str	r6, [r4, #0]
 8003e54:	60a5      	str	r5, [r4, #8]
 8003e56:	463e      	mov	r6, r7
 8003e58:	42be      	cmp	r6, r7
 8003e5a:	d900      	bls.n	8003e5e <__ssputs_r+0x72>
 8003e5c:	463e      	mov	r6, r7
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	4632      	mov	r2, r6
 8003e62:	4641      	mov	r1, r8
 8003e64:	f000 faa6 	bl	80043b4 <memmove>
 8003e68:	68a3      	ldr	r3, [r4, #8]
 8003e6a:	1b9b      	subs	r3, r3, r6
 8003e6c:	60a3      	str	r3, [r4, #8]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	4433      	add	r3, r6
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	2000      	movs	r0, #0
 8003e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7a:	462a      	mov	r2, r5
 8003e7c:	f000 fad2 	bl	8004424 <_realloc_r>
 8003e80:	4606      	mov	r6, r0
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d1e0      	bne.n	8003e48 <__ssputs_r+0x5c>
 8003e86:	6921      	ldr	r1, [r4, #16]
 8003e88:	4650      	mov	r0, sl
 8003e8a:	f7ff feb7 	bl	8003bfc <_free_r>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	f8ca 3000 	str.w	r3, [sl]
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e9a:	81a3      	strh	r3, [r4, #12]
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	e7e9      	b.n	8003e76 <__ssputs_r+0x8a>
	...

08003ea4 <_svfiprintf_r>:
 8003ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea8:	4698      	mov	r8, r3
 8003eaa:	898b      	ldrh	r3, [r1, #12]
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	b09d      	sub	sp, #116	@ 0x74
 8003eb0:	4607      	mov	r7, r0
 8003eb2:	460d      	mov	r5, r1
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	d510      	bpl.n	8003eda <_svfiprintf_r+0x36>
 8003eb8:	690b      	ldr	r3, [r1, #16]
 8003eba:	b973      	cbnz	r3, 8003eda <_svfiprintf_r+0x36>
 8003ebc:	2140      	movs	r1, #64	@ 0x40
 8003ebe:	f7ff ff09 	bl	8003cd4 <_malloc_r>
 8003ec2:	6028      	str	r0, [r5, #0]
 8003ec4:	6128      	str	r0, [r5, #16]
 8003ec6:	b930      	cbnz	r0, 8003ed6 <_svfiprintf_r+0x32>
 8003ec8:	230c      	movs	r3, #12
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	b01d      	add	sp, #116	@ 0x74
 8003ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed6:	2340      	movs	r3, #64	@ 0x40
 8003ed8:	616b      	str	r3, [r5, #20]
 8003eda:	2300      	movs	r3, #0
 8003edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ede:	2320      	movs	r3, #32
 8003ee0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ee4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ee8:	2330      	movs	r3, #48	@ 0x30
 8003eea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004088 <_svfiprintf_r+0x1e4>
 8003eee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ef2:	f04f 0901 	mov.w	r9, #1
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	469a      	mov	sl, r3
 8003efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003efe:	b10a      	cbz	r2, 8003f04 <_svfiprintf_r+0x60>
 8003f00:	2a25      	cmp	r2, #37	@ 0x25
 8003f02:	d1f9      	bne.n	8003ef8 <_svfiprintf_r+0x54>
 8003f04:	ebba 0b04 	subs.w	fp, sl, r4
 8003f08:	d00b      	beq.n	8003f22 <_svfiprintf_r+0x7e>
 8003f0a:	465b      	mov	r3, fp
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	4629      	mov	r1, r5
 8003f10:	4638      	mov	r0, r7
 8003f12:	f7ff ff6b 	bl	8003dec <__ssputs_r>
 8003f16:	3001      	adds	r0, #1
 8003f18:	f000 80a7 	beq.w	800406a <_svfiprintf_r+0x1c6>
 8003f1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f1e:	445a      	add	r2, fp
 8003f20:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f22:	f89a 3000 	ldrb.w	r3, [sl]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 809f 	beq.w	800406a <_svfiprintf_r+0x1c6>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f36:	f10a 0a01 	add.w	sl, sl, #1
 8003f3a:	9304      	str	r3, [sp, #16]
 8003f3c:	9307      	str	r3, [sp, #28]
 8003f3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f42:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f44:	4654      	mov	r4, sl
 8003f46:	2205      	movs	r2, #5
 8003f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f4c:	484e      	ldr	r0, [pc, #312]	@ (8004088 <_svfiprintf_r+0x1e4>)
 8003f4e:	f7fc f967 	bl	8000220 <memchr>
 8003f52:	9a04      	ldr	r2, [sp, #16]
 8003f54:	b9d8      	cbnz	r0, 8003f8e <_svfiprintf_r+0xea>
 8003f56:	06d0      	lsls	r0, r2, #27
 8003f58:	bf44      	itt	mi
 8003f5a:	2320      	movmi	r3, #32
 8003f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f60:	0711      	lsls	r1, r2, #28
 8003f62:	bf44      	itt	mi
 8003f64:	232b      	movmi	r3, #43	@ 0x2b
 8003f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f70:	d015      	beq.n	8003f9e <_svfiprintf_r+0xfa>
 8003f72:	9a07      	ldr	r2, [sp, #28]
 8003f74:	4654      	mov	r4, sl
 8003f76:	2000      	movs	r0, #0
 8003f78:	f04f 0c0a 	mov.w	ip, #10
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f82:	3b30      	subs	r3, #48	@ 0x30
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	d94b      	bls.n	8004020 <_svfiprintf_r+0x17c>
 8003f88:	b1b0      	cbz	r0, 8003fb8 <_svfiprintf_r+0x114>
 8003f8a:	9207      	str	r2, [sp, #28]
 8003f8c:	e014      	b.n	8003fb8 <_svfiprintf_r+0x114>
 8003f8e:	eba0 0308 	sub.w	r3, r0, r8
 8003f92:	fa09 f303 	lsl.w	r3, r9, r3
 8003f96:	4313      	orrs	r3, r2
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	46a2      	mov	sl, r4
 8003f9c:	e7d2      	b.n	8003f44 <_svfiprintf_r+0xa0>
 8003f9e:	9b03      	ldr	r3, [sp, #12]
 8003fa0:	1d19      	adds	r1, r3, #4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	9103      	str	r1, [sp, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bfbb      	ittet	lt
 8003faa:	425b      	neglt	r3, r3
 8003fac:	f042 0202 	orrlt.w	r2, r2, #2
 8003fb0:	9307      	strge	r3, [sp, #28]
 8003fb2:	9307      	strlt	r3, [sp, #28]
 8003fb4:	bfb8      	it	lt
 8003fb6:	9204      	strlt	r2, [sp, #16]
 8003fb8:	7823      	ldrb	r3, [r4, #0]
 8003fba:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fbc:	d10a      	bne.n	8003fd4 <_svfiprintf_r+0x130>
 8003fbe:	7863      	ldrb	r3, [r4, #1]
 8003fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc2:	d132      	bne.n	800402a <_svfiprintf_r+0x186>
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	1d1a      	adds	r2, r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	9203      	str	r2, [sp, #12]
 8003fcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003fd0:	3402      	adds	r4, #2
 8003fd2:	9305      	str	r3, [sp, #20]
 8003fd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004098 <_svfiprintf_r+0x1f4>
 8003fd8:	7821      	ldrb	r1, [r4, #0]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	4650      	mov	r0, sl
 8003fde:	f7fc f91f 	bl	8000220 <memchr>
 8003fe2:	b138      	cbz	r0, 8003ff4 <_svfiprintf_r+0x150>
 8003fe4:	9b04      	ldr	r3, [sp, #16]
 8003fe6:	eba0 000a 	sub.w	r0, r0, sl
 8003fea:	2240      	movs	r2, #64	@ 0x40
 8003fec:	4082      	lsls	r2, r0
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	3401      	adds	r4, #1
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff8:	4824      	ldr	r0, [pc, #144]	@ (800408c <_svfiprintf_r+0x1e8>)
 8003ffa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ffe:	2206      	movs	r2, #6
 8004000:	f7fc f90e 	bl	8000220 <memchr>
 8004004:	2800      	cmp	r0, #0
 8004006:	d036      	beq.n	8004076 <_svfiprintf_r+0x1d2>
 8004008:	4b21      	ldr	r3, [pc, #132]	@ (8004090 <_svfiprintf_r+0x1ec>)
 800400a:	bb1b      	cbnz	r3, 8004054 <_svfiprintf_r+0x1b0>
 800400c:	9b03      	ldr	r3, [sp, #12]
 800400e:	3307      	adds	r3, #7
 8004010:	f023 0307 	bic.w	r3, r3, #7
 8004014:	3308      	adds	r3, #8
 8004016:	9303      	str	r3, [sp, #12]
 8004018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800401a:	4433      	add	r3, r6
 800401c:	9309      	str	r3, [sp, #36]	@ 0x24
 800401e:	e76a      	b.n	8003ef6 <_svfiprintf_r+0x52>
 8004020:	fb0c 3202 	mla	r2, ip, r2, r3
 8004024:	460c      	mov	r4, r1
 8004026:	2001      	movs	r0, #1
 8004028:	e7a8      	b.n	8003f7c <_svfiprintf_r+0xd8>
 800402a:	2300      	movs	r3, #0
 800402c:	3401      	adds	r4, #1
 800402e:	9305      	str	r3, [sp, #20]
 8004030:	4619      	mov	r1, r3
 8004032:	f04f 0c0a 	mov.w	ip, #10
 8004036:	4620      	mov	r0, r4
 8004038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800403c:	3a30      	subs	r2, #48	@ 0x30
 800403e:	2a09      	cmp	r2, #9
 8004040:	d903      	bls.n	800404a <_svfiprintf_r+0x1a6>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0c6      	beq.n	8003fd4 <_svfiprintf_r+0x130>
 8004046:	9105      	str	r1, [sp, #20]
 8004048:	e7c4      	b.n	8003fd4 <_svfiprintf_r+0x130>
 800404a:	fb0c 2101 	mla	r1, ip, r1, r2
 800404e:	4604      	mov	r4, r0
 8004050:	2301      	movs	r3, #1
 8004052:	e7f0      	b.n	8004036 <_svfiprintf_r+0x192>
 8004054:	ab03      	add	r3, sp, #12
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	462a      	mov	r2, r5
 800405a:	4b0e      	ldr	r3, [pc, #56]	@ (8004094 <_svfiprintf_r+0x1f0>)
 800405c:	a904      	add	r1, sp, #16
 800405e:	4638      	mov	r0, r7
 8004060:	f3af 8000 	nop.w
 8004064:	1c42      	adds	r2, r0, #1
 8004066:	4606      	mov	r6, r0
 8004068:	d1d6      	bne.n	8004018 <_svfiprintf_r+0x174>
 800406a:	89ab      	ldrh	r3, [r5, #12]
 800406c:	065b      	lsls	r3, r3, #25
 800406e:	f53f af2d 	bmi.w	8003ecc <_svfiprintf_r+0x28>
 8004072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004074:	e72c      	b.n	8003ed0 <_svfiprintf_r+0x2c>
 8004076:	ab03      	add	r3, sp, #12
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	462a      	mov	r2, r5
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <_svfiprintf_r+0x1f0>)
 800407e:	a904      	add	r1, sp, #16
 8004080:	4638      	mov	r0, r7
 8004082:	f000 f879 	bl	8004178 <_printf_i>
 8004086:	e7ed      	b.n	8004064 <_svfiprintf_r+0x1c0>
 8004088:	080044ec 	.word	0x080044ec
 800408c:	080044f6 	.word	0x080044f6
 8004090:	00000000 	.word	0x00000000
 8004094:	08003ded 	.word	0x08003ded
 8004098:	080044f2 	.word	0x080044f2

0800409c <_printf_common>:
 800409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a0:	4616      	mov	r6, r2
 80040a2:	4698      	mov	r8, r3
 80040a4:	688a      	ldr	r2, [r1, #8]
 80040a6:	690b      	ldr	r3, [r1, #16]
 80040a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040ac:	4293      	cmp	r3, r2
 80040ae:	bfb8      	it	lt
 80040b0:	4613      	movlt	r3, r2
 80040b2:	6033      	str	r3, [r6, #0]
 80040b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040b8:	4607      	mov	r7, r0
 80040ba:	460c      	mov	r4, r1
 80040bc:	b10a      	cbz	r2, 80040c2 <_printf_common+0x26>
 80040be:	3301      	adds	r3, #1
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	0699      	lsls	r1, r3, #26
 80040c6:	bf42      	ittt	mi
 80040c8:	6833      	ldrmi	r3, [r6, #0]
 80040ca:	3302      	addmi	r3, #2
 80040cc:	6033      	strmi	r3, [r6, #0]
 80040ce:	6825      	ldr	r5, [r4, #0]
 80040d0:	f015 0506 	ands.w	r5, r5, #6
 80040d4:	d106      	bne.n	80040e4 <_printf_common+0x48>
 80040d6:	f104 0a19 	add.w	sl, r4, #25
 80040da:	68e3      	ldr	r3, [r4, #12]
 80040dc:	6832      	ldr	r2, [r6, #0]
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	42ab      	cmp	r3, r5
 80040e2:	dc26      	bgt.n	8004132 <_printf_common+0x96>
 80040e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	3b00      	subs	r3, #0
 80040ec:	bf18      	it	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	0692      	lsls	r2, r2, #26
 80040f2:	d42b      	bmi.n	800414c <_printf_common+0xb0>
 80040f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040f8:	4641      	mov	r1, r8
 80040fa:	4638      	mov	r0, r7
 80040fc:	47c8      	blx	r9
 80040fe:	3001      	adds	r0, #1
 8004100:	d01e      	beq.n	8004140 <_printf_common+0xa4>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	6922      	ldr	r2, [r4, #16]
 8004106:	f003 0306 	and.w	r3, r3, #6
 800410a:	2b04      	cmp	r3, #4
 800410c:	bf02      	ittt	eq
 800410e:	68e5      	ldreq	r5, [r4, #12]
 8004110:	6833      	ldreq	r3, [r6, #0]
 8004112:	1aed      	subeq	r5, r5, r3
 8004114:	68a3      	ldr	r3, [r4, #8]
 8004116:	bf0c      	ite	eq
 8004118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800411c:	2500      	movne	r5, #0
 800411e:	4293      	cmp	r3, r2
 8004120:	bfc4      	itt	gt
 8004122:	1a9b      	subgt	r3, r3, r2
 8004124:	18ed      	addgt	r5, r5, r3
 8004126:	2600      	movs	r6, #0
 8004128:	341a      	adds	r4, #26
 800412a:	42b5      	cmp	r5, r6
 800412c:	d11a      	bne.n	8004164 <_printf_common+0xc8>
 800412e:	2000      	movs	r0, #0
 8004130:	e008      	b.n	8004144 <_printf_common+0xa8>
 8004132:	2301      	movs	r3, #1
 8004134:	4652      	mov	r2, sl
 8004136:	4641      	mov	r1, r8
 8004138:	4638      	mov	r0, r7
 800413a:	47c8      	blx	r9
 800413c:	3001      	adds	r0, #1
 800413e:	d103      	bne.n	8004148 <_printf_common+0xac>
 8004140:	f04f 30ff 	mov.w	r0, #4294967295
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004148:	3501      	adds	r5, #1
 800414a:	e7c6      	b.n	80040da <_printf_common+0x3e>
 800414c:	18e1      	adds	r1, r4, r3
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	2030      	movs	r0, #48	@ 0x30
 8004152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004156:	4422      	add	r2, r4
 8004158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800415c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004160:	3302      	adds	r3, #2
 8004162:	e7c7      	b.n	80040f4 <_printf_common+0x58>
 8004164:	2301      	movs	r3, #1
 8004166:	4622      	mov	r2, r4
 8004168:	4641      	mov	r1, r8
 800416a:	4638      	mov	r0, r7
 800416c:	47c8      	blx	r9
 800416e:	3001      	adds	r0, #1
 8004170:	d0e6      	beq.n	8004140 <_printf_common+0xa4>
 8004172:	3601      	adds	r6, #1
 8004174:	e7d9      	b.n	800412a <_printf_common+0x8e>
	...

08004178 <_printf_i>:
 8004178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	7e0f      	ldrb	r7, [r1, #24]
 800417e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004180:	2f78      	cmp	r7, #120	@ 0x78
 8004182:	4691      	mov	r9, r2
 8004184:	4680      	mov	r8, r0
 8004186:	460c      	mov	r4, r1
 8004188:	469a      	mov	sl, r3
 800418a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800418e:	d807      	bhi.n	80041a0 <_printf_i+0x28>
 8004190:	2f62      	cmp	r7, #98	@ 0x62
 8004192:	d80a      	bhi.n	80041aa <_printf_i+0x32>
 8004194:	2f00      	cmp	r7, #0
 8004196:	f000 80d1 	beq.w	800433c <_printf_i+0x1c4>
 800419a:	2f58      	cmp	r7, #88	@ 0x58
 800419c:	f000 80b8 	beq.w	8004310 <_printf_i+0x198>
 80041a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041a8:	e03a      	b.n	8004220 <_printf_i+0xa8>
 80041aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041ae:	2b15      	cmp	r3, #21
 80041b0:	d8f6      	bhi.n	80041a0 <_printf_i+0x28>
 80041b2:	a101      	add	r1, pc, #4	@ (adr r1, 80041b8 <_printf_i+0x40>)
 80041b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041b8:	08004211 	.word	0x08004211
 80041bc:	08004225 	.word	0x08004225
 80041c0:	080041a1 	.word	0x080041a1
 80041c4:	080041a1 	.word	0x080041a1
 80041c8:	080041a1 	.word	0x080041a1
 80041cc:	080041a1 	.word	0x080041a1
 80041d0:	08004225 	.word	0x08004225
 80041d4:	080041a1 	.word	0x080041a1
 80041d8:	080041a1 	.word	0x080041a1
 80041dc:	080041a1 	.word	0x080041a1
 80041e0:	080041a1 	.word	0x080041a1
 80041e4:	08004323 	.word	0x08004323
 80041e8:	0800424f 	.word	0x0800424f
 80041ec:	080042dd 	.word	0x080042dd
 80041f0:	080041a1 	.word	0x080041a1
 80041f4:	080041a1 	.word	0x080041a1
 80041f8:	08004345 	.word	0x08004345
 80041fc:	080041a1 	.word	0x080041a1
 8004200:	0800424f 	.word	0x0800424f
 8004204:	080041a1 	.word	0x080041a1
 8004208:	080041a1 	.word	0x080041a1
 800420c:	080042e5 	.word	0x080042e5
 8004210:	6833      	ldr	r3, [r6, #0]
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6032      	str	r2, [r6, #0]
 8004218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800421c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004220:	2301      	movs	r3, #1
 8004222:	e09c      	b.n	800435e <_printf_i+0x1e6>
 8004224:	6833      	ldr	r3, [r6, #0]
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	1d19      	adds	r1, r3, #4
 800422a:	6031      	str	r1, [r6, #0]
 800422c:	0606      	lsls	r6, r0, #24
 800422e:	d501      	bpl.n	8004234 <_printf_i+0xbc>
 8004230:	681d      	ldr	r5, [r3, #0]
 8004232:	e003      	b.n	800423c <_printf_i+0xc4>
 8004234:	0645      	lsls	r5, r0, #25
 8004236:	d5fb      	bpl.n	8004230 <_printf_i+0xb8>
 8004238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800423c:	2d00      	cmp	r5, #0
 800423e:	da03      	bge.n	8004248 <_printf_i+0xd0>
 8004240:	232d      	movs	r3, #45	@ 0x2d
 8004242:	426d      	negs	r5, r5
 8004244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004248:	4858      	ldr	r0, [pc, #352]	@ (80043ac <_printf_i+0x234>)
 800424a:	230a      	movs	r3, #10
 800424c:	e011      	b.n	8004272 <_printf_i+0xfa>
 800424e:	6821      	ldr	r1, [r4, #0]
 8004250:	6833      	ldr	r3, [r6, #0]
 8004252:	0608      	lsls	r0, r1, #24
 8004254:	f853 5b04 	ldr.w	r5, [r3], #4
 8004258:	d402      	bmi.n	8004260 <_printf_i+0xe8>
 800425a:	0649      	lsls	r1, r1, #25
 800425c:	bf48      	it	mi
 800425e:	b2ad      	uxthmi	r5, r5
 8004260:	2f6f      	cmp	r7, #111	@ 0x6f
 8004262:	4852      	ldr	r0, [pc, #328]	@ (80043ac <_printf_i+0x234>)
 8004264:	6033      	str	r3, [r6, #0]
 8004266:	bf14      	ite	ne
 8004268:	230a      	movne	r3, #10
 800426a:	2308      	moveq	r3, #8
 800426c:	2100      	movs	r1, #0
 800426e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004272:	6866      	ldr	r6, [r4, #4]
 8004274:	60a6      	str	r6, [r4, #8]
 8004276:	2e00      	cmp	r6, #0
 8004278:	db05      	blt.n	8004286 <_printf_i+0x10e>
 800427a:	6821      	ldr	r1, [r4, #0]
 800427c:	432e      	orrs	r6, r5
 800427e:	f021 0104 	bic.w	r1, r1, #4
 8004282:	6021      	str	r1, [r4, #0]
 8004284:	d04b      	beq.n	800431e <_printf_i+0x1a6>
 8004286:	4616      	mov	r6, r2
 8004288:	fbb5 f1f3 	udiv	r1, r5, r3
 800428c:	fb03 5711 	mls	r7, r3, r1, r5
 8004290:	5dc7      	ldrb	r7, [r0, r7]
 8004292:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004296:	462f      	mov	r7, r5
 8004298:	42bb      	cmp	r3, r7
 800429a:	460d      	mov	r5, r1
 800429c:	d9f4      	bls.n	8004288 <_printf_i+0x110>
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d10b      	bne.n	80042ba <_printf_i+0x142>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	07df      	lsls	r7, r3, #31
 80042a6:	d508      	bpl.n	80042ba <_printf_i+0x142>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	6861      	ldr	r1, [r4, #4]
 80042ac:	4299      	cmp	r1, r3
 80042ae:	bfde      	ittt	le
 80042b0:	2330      	movle	r3, #48	@ 0x30
 80042b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042ba:	1b92      	subs	r2, r2, r6
 80042bc:	6122      	str	r2, [r4, #16]
 80042be:	f8cd a000 	str.w	sl, [sp]
 80042c2:	464b      	mov	r3, r9
 80042c4:	aa03      	add	r2, sp, #12
 80042c6:	4621      	mov	r1, r4
 80042c8:	4640      	mov	r0, r8
 80042ca:	f7ff fee7 	bl	800409c <_printf_common>
 80042ce:	3001      	adds	r0, #1
 80042d0:	d14a      	bne.n	8004368 <_printf_i+0x1f0>
 80042d2:	f04f 30ff 	mov.w	r0, #4294967295
 80042d6:	b004      	add	sp, #16
 80042d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	f043 0320 	orr.w	r3, r3, #32
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	4832      	ldr	r0, [pc, #200]	@ (80043b0 <_printf_i+0x238>)
 80042e6:	2778      	movs	r7, #120	@ 0x78
 80042e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	6831      	ldr	r1, [r6, #0]
 80042f0:	061f      	lsls	r7, r3, #24
 80042f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80042f6:	d402      	bmi.n	80042fe <_printf_i+0x186>
 80042f8:	065f      	lsls	r7, r3, #25
 80042fa:	bf48      	it	mi
 80042fc:	b2ad      	uxthmi	r5, r5
 80042fe:	6031      	str	r1, [r6, #0]
 8004300:	07d9      	lsls	r1, r3, #31
 8004302:	bf44      	itt	mi
 8004304:	f043 0320 	orrmi.w	r3, r3, #32
 8004308:	6023      	strmi	r3, [r4, #0]
 800430a:	b11d      	cbz	r5, 8004314 <_printf_i+0x19c>
 800430c:	2310      	movs	r3, #16
 800430e:	e7ad      	b.n	800426c <_printf_i+0xf4>
 8004310:	4826      	ldr	r0, [pc, #152]	@ (80043ac <_printf_i+0x234>)
 8004312:	e7e9      	b.n	80042e8 <_printf_i+0x170>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	f023 0320 	bic.w	r3, r3, #32
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	e7f6      	b.n	800430c <_printf_i+0x194>
 800431e:	4616      	mov	r6, r2
 8004320:	e7bd      	b.n	800429e <_printf_i+0x126>
 8004322:	6833      	ldr	r3, [r6, #0]
 8004324:	6825      	ldr	r5, [r4, #0]
 8004326:	6961      	ldr	r1, [r4, #20]
 8004328:	1d18      	adds	r0, r3, #4
 800432a:	6030      	str	r0, [r6, #0]
 800432c:	062e      	lsls	r6, r5, #24
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	d501      	bpl.n	8004336 <_printf_i+0x1be>
 8004332:	6019      	str	r1, [r3, #0]
 8004334:	e002      	b.n	800433c <_printf_i+0x1c4>
 8004336:	0668      	lsls	r0, r5, #25
 8004338:	d5fb      	bpl.n	8004332 <_printf_i+0x1ba>
 800433a:	8019      	strh	r1, [r3, #0]
 800433c:	2300      	movs	r3, #0
 800433e:	6123      	str	r3, [r4, #16]
 8004340:	4616      	mov	r6, r2
 8004342:	e7bc      	b.n	80042be <_printf_i+0x146>
 8004344:	6833      	ldr	r3, [r6, #0]
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	6032      	str	r2, [r6, #0]
 800434a:	681e      	ldr	r6, [r3, #0]
 800434c:	6862      	ldr	r2, [r4, #4]
 800434e:	2100      	movs	r1, #0
 8004350:	4630      	mov	r0, r6
 8004352:	f7fb ff65 	bl	8000220 <memchr>
 8004356:	b108      	cbz	r0, 800435c <_printf_i+0x1e4>
 8004358:	1b80      	subs	r0, r0, r6
 800435a:	6060      	str	r0, [r4, #4]
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	2300      	movs	r3, #0
 8004362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004366:	e7aa      	b.n	80042be <_printf_i+0x146>
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	4632      	mov	r2, r6
 800436c:	4649      	mov	r1, r9
 800436e:	4640      	mov	r0, r8
 8004370:	47d0      	blx	sl
 8004372:	3001      	adds	r0, #1
 8004374:	d0ad      	beq.n	80042d2 <_printf_i+0x15a>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	079b      	lsls	r3, r3, #30
 800437a:	d413      	bmi.n	80043a4 <_printf_i+0x22c>
 800437c:	68e0      	ldr	r0, [r4, #12]
 800437e:	9b03      	ldr	r3, [sp, #12]
 8004380:	4298      	cmp	r0, r3
 8004382:	bfb8      	it	lt
 8004384:	4618      	movlt	r0, r3
 8004386:	e7a6      	b.n	80042d6 <_printf_i+0x15e>
 8004388:	2301      	movs	r3, #1
 800438a:	4632      	mov	r2, r6
 800438c:	4649      	mov	r1, r9
 800438e:	4640      	mov	r0, r8
 8004390:	47d0      	blx	sl
 8004392:	3001      	adds	r0, #1
 8004394:	d09d      	beq.n	80042d2 <_printf_i+0x15a>
 8004396:	3501      	adds	r5, #1
 8004398:	68e3      	ldr	r3, [r4, #12]
 800439a:	9903      	ldr	r1, [sp, #12]
 800439c:	1a5b      	subs	r3, r3, r1
 800439e:	42ab      	cmp	r3, r5
 80043a0:	dcf2      	bgt.n	8004388 <_printf_i+0x210>
 80043a2:	e7eb      	b.n	800437c <_printf_i+0x204>
 80043a4:	2500      	movs	r5, #0
 80043a6:	f104 0619 	add.w	r6, r4, #25
 80043aa:	e7f5      	b.n	8004398 <_printf_i+0x220>
 80043ac:	080044fd 	.word	0x080044fd
 80043b0:	0800450e 	.word	0x0800450e

080043b4 <memmove>:
 80043b4:	4288      	cmp	r0, r1
 80043b6:	b510      	push	{r4, lr}
 80043b8:	eb01 0402 	add.w	r4, r1, r2
 80043bc:	d902      	bls.n	80043c4 <memmove+0x10>
 80043be:	4284      	cmp	r4, r0
 80043c0:	4623      	mov	r3, r4
 80043c2:	d807      	bhi.n	80043d4 <memmove+0x20>
 80043c4:	1e43      	subs	r3, r0, #1
 80043c6:	42a1      	cmp	r1, r4
 80043c8:	d008      	beq.n	80043dc <memmove+0x28>
 80043ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043d2:	e7f8      	b.n	80043c6 <memmove+0x12>
 80043d4:	4402      	add	r2, r0
 80043d6:	4601      	mov	r1, r0
 80043d8:	428a      	cmp	r2, r1
 80043da:	d100      	bne.n	80043de <memmove+0x2a>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043e6:	e7f7      	b.n	80043d8 <memmove+0x24>

080043e8 <_sbrk_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4d06      	ldr	r5, [pc, #24]	@ (8004404 <_sbrk_r+0x1c>)
 80043ec:	2300      	movs	r3, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	f7fc ffce 	bl	8001394 <_sbrk>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_sbrk_r+0x1a>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_sbrk_r+0x1a>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	2000029c 	.word	0x2000029c

08004408 <memcpy>:
 8004408:	440a      	add	r2, r1
 800440a:	4291      	cmp	r1, r2
 800440c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004410:	d100      	bne.n	8004414 <memcpy+0xc>
 8004412:	4770      	bx	lr
 8004414:	b510      	push	{r4, lr}
 8004416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800441a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800441e:	4291      	cmp	r1, r2
 8004420:	d1f9      	bne.n	8004416 <memcpy+0xe>
 8004422:	bd10      	pop	{r4, pc}

08004424 <_realloc_r>:
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004428:	4607      	mov	r7, r0
 800442a:	4614      	mov	r4, r2
 800442c:	460d      	mov	r5, r1
 800442e:	b921      	cbnz	r1, 800443a <_realloc_r+0x16>
 8004430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	4611      	mov	r1, r2
 8004436:	f7ff bc4d 	b.w	8003cd4 <_malloc_r>
 800443a:	b92a      	cbnz	r2, 8004448 <_realloc_r+0x24>
 800443c:	f7ff fbde 	bl	8003bfc <_free_r>
 8004440:	4625      	mov	r5, r4
 8004442:	4628      	mov	r0, r5
 8004444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004448:	f000 f81a 	bl	8004480 <_malloc_usable_size_r>
 800444c:	4284      	cmp	r4, r0
 800444e:	4606      	mov	r6, r0
 8004450:	d802      	bhi.n	8004458 <_realloc_r+0x34>
 8004452:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004456:	d8f4      	bhi.n	8004442 <_realloc_r+0x1e>
 8004458:	4621      	mov	r1, r4
 800445a:	4638      	mov	r0, r7
 800445c:	f7ff fc3a 	bl	8003cd4 <_malloc_r>
 8004460:	4680      	mov	r8, r0
 8004462:	b908      	cbnz	r0, 8004468 <_realloc_r+0x44>
 8004464:	4645      	mov	r5, r8
 8004466:	e7ec      	b.n	8004442 <_realloc_r+0x1e>
 8004468:	42b4      	cmp	r4, r6
 800446a:	4622      	mov	r2, r4
 800446c:	4629      	mov	r1, r5
 800446e:	bf28      	it	cs
 8004470:	4632      	movcs	r2, r6
 8004472:	f7ff ffc9 	bl	8004408 <memcpy>
 8004476:	4629      	mov	r1, r5
 8004478:	4638      	mov	r0, r7
 800447a:	f7ff fbbf 	bl	8003bfc <_free_r>
 800447e:	e7f1      	b.n	8004464 <_realloc_r+0x40>

08004480 <_malloc_usable_size_r>:
 8004480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004484:	1f18      	subs	r0, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	bfbc      	itt	lt
 800448a:	580b      	ldrlt	r3, [r1, r0]
 800448c:	18c0      	addlt	r0, r0, r3
 800448e:	4770      	bx	lr

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	bf00      	nop
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
