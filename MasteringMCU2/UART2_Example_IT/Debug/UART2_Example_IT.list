
UART2_Example_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f28  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080020ec  080020ec  000030ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002114  08002114  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002114  08002114  00003114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800211c  0800211c  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800211c  0800211c  0000311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002120  08002120  00003120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002124  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08002134  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002134  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f0a  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ac  00000000  00000000  0000bf4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0000d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e0  00000000  00000000  0000db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a05  00000000  00000000  0000e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084cd  00000000  00000000  0002ea3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7491  00000000  00000000  00036f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe39b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001914  00000000  00000000  000fe3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c7  00000000  00000000  000ffcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080020d4 	.word	0x080020d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080020d4 	.word	0x080020d4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <SysTick_Handler>:
  * @brief System Clock Configuration
  * @retval None
  */

void SysTick_Handler (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000544:	f000 f996 	bl	8000874 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000548:	f000 fac5 	bl	8000ad6 <HAL_SYSTICK_IRQHandler>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt.
  */
void USART2_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000554:	4802      	ldr	r0, [pc, #8]	@ (8000560 <USART2_IRQHandler+0x10>)
 8000556:	f000 fe35 	bl	80011c4 <HAL_UART_IRQHandler>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	2000002c 	.word	0x2000002c

08000564 <main>:
uint8_t  recvd_data;
uint32_t count=0;
uint8_t  reception_complete = FALSE;

int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  HAL_Init();
 800056a:	f000 f931 	bl	80007d0 <HAL_Init>
  SystemClockConfig();
 800056e:	f000 f825 	bl	80005bc <SystemClockConfig>
  UART2_Init();
 8000572:	f000 f82b 	bl	80005cc <UART2_Init>

  uint16_t len_of_data = strlen(user_data);
 8000576:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <main+0x48>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fe42 	bl	8000204 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	80fb      	strh	r3, [r7, #6]
  HAL_UART_Transmit(&huart2,(uint8_t*)user_data,len_of_data,HAL_MAX_DELAY);
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <main+0x48>)
 8000586:	6819      	ldr	r1, [r3, #0]
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <main+0x4c>)
 8000590:	f000 fd55 	bl	800103e <HAL_UART_Transmit>

  while(reception_complete != TRUE)
 8000594:	e004      	b.n	80005a0 <main+0x3c>
  {
    HAL_UART_Receive_IT(&huart2,&recvd_data,1);
 8000596:	2201      	movs	r2, #1
 8000598:	4906      	ldr	r1, [pc, #24]	@ (80005b4 <main+0x50>)
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <main+0x4c>)
 800059c:	f000 fde1 	bl	8001162 <HAL_UART_Receive_IT>
  while(reception_complete != TRUE)
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <main+0x54>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d1f6      	bne.n	8000596 <main+0x32>
  }

  while(1);
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0x44>
 80005ac:	20000000 	.word	0x20000000
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	200000d4 	.word	0x200000d4
 80005b8:	200000dc 	.word	0x200000dc

080005bc <SystemClockConfig>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClockConfig(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0


}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <UART2_Init+0x44>)
 80005d2:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <UART2_Init+0x48>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <UART2_Init+0x44>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <UART2_Init+0x44>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <UART2_Init+0x44>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <UART2_Init+0x44>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <UART2_Init+0x44>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <UART2_Init+0x44>)
 80005f8:	220c      	movs	r2, #12
 80005fa:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <UART2_Init+0x44>)
 80005fe:	f000 fcd1 	bl	8000fa4 <HAL_UART_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 8000608:	f000 f838 	bl	800067c <Error_handler>
  }
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000002c 	.word	0x2000002c
 8000614:	40004400 	.word	0x40004400

08000618 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  if(recvd_data == '\r')
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <HAL_UART_RxCpltCallback+0x54>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b0d      	cmp	r3, #13
 8000626:	d114      	bne.n	8000652 <HAL_UART_RxCpltCallback+0x3a>
  {
    reception_complete = TRUE;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <HAL_UART_RxCpltCallback+0x58>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
    data_buffer[count++]='\r';
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <HAL_UART_RxCpltCallback+0x5c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	490f      	ldr	r1, [pc, #60]	@ (8000674 <HAL_UART_RxCpltCallback+0x5c>)
 8000636:	600a      	str	r2, [r1, #0]
 8000638:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <HAL_UART_RxCpltCallback+0x60>)
 800063a:	210d      	movs	r1, #13
 800063c:	54d1      	strb	r1, [r2, r3]
    HAL_UART_Transmit(huart,data_buffer,count,HAL_MAX_DELAY);
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <HAL_UART_RxCpltCallback+0x5c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	490b      	ldr	r1, [pc, #44]	@ (8000678 <HAL_UART_RxCpltCallback+0x60>)
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 fcf7 	bl	800103e <HAL_UART_Transmit>
  }
  else
  {
    data_buffer[count++] = recvd_data;
  }
}
 8000650:	e008      	b.n	8000664 <HAL_UART_RxCpltCallback+0x4c>
    data_buffer[count++] = recvd_data;
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <HAL_UART_RxCpltCallback+0x5c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	4906      	ldr	r1, [pc, #24]	@ (8000674 <HAL_UART_RxCpltCallback+0x5c>)
 800065a:	600a      	str	r2, [r1, #0]
 800065c:	4a03      	ldr	r2, [pc, #12]	@ (800066c <HAL_UART_RxCpltCallback+0x54>)
 800065e:	7811      	ldrb	r1, [r2, #0]
 8000660:	4a05      	ldr	r2, [pc, #20]	@ (8000678 <HAL_UART_RxCpltCallback+0x60>)
 8000662:	54d1      	strb	r1, [r2, r3]
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000d4 	.word	0x200000d4
 8000670:	200000dc 	.word	0x200000dc
 8000674:	200000d8 	.word	0x200000d8
 8000678:	20000070 	.word	0x20000070

0800067c <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  while(1);
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <Error_handler+0x4>

08000684 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 f9e3 	bl	8000a54 <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <HAL_MspInit+0x40>)
 8000690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000692:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <HAL_MspInit+0x40>)
 8000694:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000698:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	f06f 000b 	mvn.w	r0, #11
 80006a2:	f000 f9e2 	bl	8000a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	f06f 000a 	mvn.w	r0, #10
 80006ae:	f000 f9dc 	bl	8000a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	f06f 0009 	mvn.w	r0, #9
 80006ba:	f000 f9d6 	bl	8000a6a <HAL_NVIC_SetPriority>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <HAL_UART_MspInit+0x88>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000750 <HAL_UART_MspInit+0x88>)
 80006da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <HAL_UART_MspInit+0x88>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <HAL_UART_MspInit+0x88>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f4:	4a16      	ldr	r2, [pc, #88]	@ (8000750 <HAL_UART_MspInit+0x88>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <HAL_UART_MspInit+0x88>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 8000708:	2304      	movs	r3, #4
 800070a:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 8000710:	2301      	movs	r3, #1
 8000712:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000718:	2307      	movs	r3, #7
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	480c      	ldr	r0, [pc, #48]	@ (8000754 <HAL_UART_MspInit+0x8c>)
 8000724:	f000 fa76 	bl	8000c14 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000728:	2308      	movs	r3, #8
 800072a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <HAL_UART_MspInit+0x8c>)
 8000734:	f000 fa6e 	bl	8000c14 <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000738:	2026      	movs	r0, #38	@ 0x26
 800073a:	f000 f9b2 	bl	8000aa2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800073e:	2200      	movs	r2, #0
 8000740:	210f      	movs	r1, #15
 8000742:	2026      	movs	r0, #38	@ 0x26
 8000744:	f000 f991 	bl	8000a6a <HAL_NVIC_SetPriority>
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40020000 	.word	0x40020000

08000758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	@ (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000780:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000782:	490e      	ldr	r1, [pc, #56]	@ (80007bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000784:	4a0e      	ldr	r2, [pc, #56]	@ (80007c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0b      	ldr	r2, [pc, #44]	@ (80007c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000798:	4c0b      	ldr	r4, [pc, #44]	@ (80007c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007a6:	f7ff ffd7 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007aa:	f001 fc6f 	bl	800208c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ae:	f7ff fed9 	bl	8000564 <main>
  bx  lr    
 80007b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007c0:	08002124 	.word	0x08002124
  ldr r2, =_sbss
 80007c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007c8:	200000e4 	.word	0x200000e4

080007cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <HAL_Init+0x40>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <HAL_Init+0x40>)
 80007da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <HAL_Init+0x40>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <HAL_Init+0x40>)
 80007e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_Init+0x40>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <HAL_Init+0x40>)
 80007f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f92b 	bl	8000a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 f808 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000804:	f7ff ff3e 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023c00 	.word	0x40023c00

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <HAL_InitTick+0x54>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x58>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f943 	bl	8000abe <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e00e      	b.n	8000860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d80a      	bhi.n	800085e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f000 f90b 	bl	8000a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <HAL_InitTick+0x5c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000004 	.word	0x20000004
 800086c:	2000000c 	.word	0x2000000c
 8000870:	20000008 	.word	0x20000008

08000874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_IncTick+0x20>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_IncTick+0x24>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <HAL_IncTick+0x24>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000000c 	.word	0x2000000c
 8000898:	200000e0 	.word	0x200000e0

0800089c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <HAL_GetTick+0x14>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	200000e0 	.word	0x200000e0

080008b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e6:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <__NVIC_SetPriorityGrouping+0x44>)
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	60d3      	str	r3, [r2, #12]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000900:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <__NVIC_GetPriorityGrouping+0x18>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	f003 0307 	and.w	r3, r3, #7
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db0b      	blt.n	8000942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	4907      	ldr	r1, [pc, #28]	@ (8000950 <__NVIC_EnableIRQ+0x38>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	@ (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	@ (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	@ 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
         );
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	@ 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a20:	d301      	bcc.n	8000a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00f      	b.n	8000a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <SysTick_Config+0x40>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2e:	210f      	movs	r1, #15
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f7ff ff8e 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <SysTick_Config+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3e:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <SysTick_Config+0x40>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff29 	bl	80008b4 <__NVIC_SetPriorityGrouping>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a7c:	f7ff ff3e 	bl	80008fc <__NVIC_GetPriorityGrouping>
 8000a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	6978      	ldr	r0, [r7, #20]
 8000a88:	f7ff ff8e 	bl	80009a8 <NVIC_EncodePriority>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff5d 	bl	8000954 <__NVIC_SetPriority>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff31 	bl	8000918 <__NVIC_EnableIRQ>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ffa2 	bl	8000a10 <SysTick_Config>
 8000acc:	4603      	mov	r3, r0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ada:	f000 f802 	bl	8000ae2 <HAL_SYSTICK_Callback>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000afe:	f7ff fecd 	bl	800089c <HAL_GetTick>
 8000b02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d008      	beq.n	8000b22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2280      	movs	r2, #128	@ 0x80
 8000b14:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e052      	b.n	8000bc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 0216 	bic.w	r2, r2, #22
 8000b30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	695a      	ldr	r2, [r3, #20]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d103      	bne.n	8000b52 <HAL_DMA_Abort+0x62>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d007      	beq.n	8000b62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0208 	bic.w	r2, r2, #8
 8000b60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0201 	bic.w	r2, r2, #1
 8000b70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b72:	e013      	b.n	8000b9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b74:	f7ff fe92 	bl	800089c <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d90c      	bls.n	8000b9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2220      	movs	r2, #32
 8000b86:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e015      	b.n	8000bc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1e4      	bne.n	8000b74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bae:	223f      	movs	r2, #63	@ 0x3f
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d004      	beq.n	8000bee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00c      	b.n	8000c08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0201 	bic.w	r2, r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e165      	b.n	8000efc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 8154 	bne.w	8000ef6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d017      	beq.n	8000d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d123      	bne.n	8000d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	69b9      	ldr	r1, [r7, #24]
 8000d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0203 	and.w	r2, r3, #3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80ae 	beq.w	8000ef6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000f14 <HAL_GPIO_Init+0x300>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	4a5c      	ldr	r2, [pc, #368]	@ (8000f14 <HAL_GPIO_Init+0x300>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000daa:	4b5a      	ldr	r3, [pc, #360]	@ (8000f14 <HAL_GPIO_Init+0x300>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db6:	4a58      	ldr	r2, [pc, #352]	@ (8000f18 <HAL_GPIO_Init+0x304>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8000f1c <HAL_GPIO_Init+0x308>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d025      	beq.n	8000e2e <HAL_GPIO_Init+0x21a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4e      	ldr	r2, [pc, #312]	@ (8000f20 <HAL_GPIO_Init+0x30c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x216>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4d      	ldr	r2, [pc, #308]	@ (8000f24 <HAL_GPIO_Init+0x310>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d019      	beq.n	8000e26 <HAL_GPIO_Init+0x212>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4c      	ldr	r2, [pc, #304]	@ (8000f28 <HAL_GPIO_Init+0x314>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x20e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8000f2c <HAL_GPIO_Init+0x318>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x20a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4a      	ldr	r2, [pc, #296]	@ (8000f30 <HAL_GPIO_Init+0x31c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a49      	ldr	r2, [pc, #292]	@ (8000f34 <HAL_GPIO_Init+0x320>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x202>
 8000e12:	2306      	movs	r3, #6
 8000e14:	e00c      	b.n	8000e30 <HAL_GPIO_Init+0x21c>
 8000e16:	2307      	movs	r3, #7
 8000e18:	e00a      	b.n	8000e30 <HAL_GPIO_Init+0x21c>
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	e008      	b.n	8000e30 <HAL_GPIO_Init+0x21c>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x21c>
 8000e22:	2303      	movs	r3, #3
 8000e24:	e004      	b.n	8000e30 <HAL_GPIO_Init+0x21c>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_Init+0x21c>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x21c>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	69fa      	ldr	r2, [r7, #28]
 8000e32:	f002 0203 	and.w	r2, r2, #3
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4093      	lsls	r3, r2
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e40:	4935      	ldr	r1, [pc, #212]	@ (8000f18 <HAL_GPIO_Init+0x304>)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f38 <HAL_GPIO_Init+0x324>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e72:	4a31      	ldr	r2, [pc, #196]	@ (8000f38 <HAL_GPIO_Init+0x324>)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e78:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <HAL_GPIO_Init+0x324>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e9c:	4a26      	ldr	r2, [pc, #152]	@ (8000f38 <HAL_GPIO_Init+0x324>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <HAL_GPIO_Init+0x324>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <HAL_GPIO_Init+0x324>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <HAL_GPIO_Init+0x324>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ef0:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <HAL_GPIO_Init+0x324>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	f67f ae96 	bls.w	8000c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3724      	adds	r7, #36	@ 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40021400 	.word	0x40021400
 8000f34:	40021800 	.word	0x40021800
 8000f38:	40013c00 	.word	0x40013c00

08000f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f58:	f7ff fff0 	bl	8000f3c <HAL_RCC_GetHCLKFreq>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	0a9b      	lsrs	r3, r3, #10
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	4903      	ldr	r1, [pc, #12]	@ (8000f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f6a:	5ccb      	ldrb	r3, [r1, r3]
 8000f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	0800210c 	.word	0x0800210c

08000f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f80:	f7ff ffdc 	bl	8000f3c <HAL_RCC_GetHCLKFreq>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	0b5b      	lsrs	r3, r3, #13
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	4903      	ldr	r1, [pc, #12]	@ (8000fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f92:	5ccb      	ldrb	r3, [r1, r3]
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	0800210c 	.word	0x0800210c

08000fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e03f      	b.n	8001036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fb7c 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2224      	movs	r2, #36	@ 0x24
 8000fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 fddb 	bl	8001ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800100c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800101c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2220      	movs	r2, #32
 8001030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b08a      	sub	sp, #40	@ 0x28
 8001042:	af02      	add	r7, sp, #8
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4613      	mov	r3, r2
 800104c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b20      	cmp	r3, #32
 800105c:	d17c      	bne.n	8001158 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <HAL_UART_Transmit+0x2c>
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e075      	b.n	800115a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_UART_Transmit+0x3e>
 8001078:	2302      	movs	r3, #2
 800107a:	e06e      	b.n	800115a <HAL_UART_Transmit+0x11c>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2221      	movs	r2, #33	@ 0x21
 800108e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001092:	f7ff fc03 	bl	800089c <HAL_GetTick>
 8001096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	88fa      	ldrh	r2, [r7, #6]
 800109c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	88fa      	ldrh	r2, [r7, #6]
 80010a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010ac:	d108      	bne.n	80010c0 <HAL_UART_Transmit+0x82>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d104      	bne.n	80010c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	61bb      	str	r3, [r7, #24]
 80010be:	e003      	b.n	80010c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80010d0:	e02a      	b.n	8001128 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2200      	movs	r2, #0
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 fb1f 	bl	8001720 <UART_WaitOnFlagUntilTimeout>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e036      	b.n	800115a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10b      	bne.n	800110a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	3302      	adds	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	e007      	b.n	800111a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	3301      	adds	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800111e:	b29b      	uxth	r3, r3
 8001120:	3b01      	subs	r3, #1
 8001122:	b29a      	uxth	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800112c:	b29b      	uxth	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1cf      	bne.n	80010d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2200      	movs	r2, #0
 800113a:	2140      	movs	r1, #64	@ 0x40
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 faef 	bl	8001720 <UART_WaitOnFlagUntilTimeout>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e006      	b.n	800115a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2220      	movs	r2, #32
 8001150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	e000      	b.n	800115a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001158:	2302      	movs	r3, #2
  }
}
 800115a:	4618      	mov	r0, r3
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	4613      	mov	r3, r2
 800116e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b20      	cmp	r3, #32
 800117a:	d11d      	bne.n	80011b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <HAL_UART_Receive_IT+0x26>
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e016      	b.n	80011ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_UART_Receive_IT+0x38>
 8001196:	2302      	movs	r3, #2
 8001198:	e00f      	b.n	80011ba <HAL_UART_Receive_IT+0x58>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fb24 	bl	80017fc <UART_Start_Receive_IT>
 80011b4:	4603      	mov	r3, r0
 80011b6:	e000      	b.n	80011ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80011b8:	2302      	movs	r3, #2
  }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ba      	sub	sp, #232	@ 0xe8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80011f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800120a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800120e:	f003 0320 	and.w	r3, r3, #32
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <HAL_UART_IRQHandler+0x66>
 8001216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fc03 	bl	8001a2e <UART_Receive_IT>
      return;
 8001228:	e256      	b.n	80016d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800122a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 80de 	beq.w	80013f0 <HAL_UART_IRQHandler+0x22c>
 8001234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d106      	bne.n	800124e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001244:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80d1 	beq.w	80013f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800124e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_UART_IRQHandler+0xae>
 800125a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800125e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00b      	beq.n	8001296 <HAL_UART_IRQHandler+0xd2>
 800127e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f043 0202 	orr.w	r2, r3, #2
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_UART_IRQHandler+0xf6>
 80012a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f043 0204 	orr.w	r2, r3, #4
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80012ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d011      	beq.n	80012ea <HAL_UART_IRQHandler+0x126>
 80012c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80012d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f043 0208 	orr.w	r2, r3, #8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 81ed 	beq.w	80016ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_UART_IRQHandler+0x14e>
 8001300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001304:	f003 0320 	and.w	r3, r3, #32
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fb8e 	bl	8001a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800131c:	2b40      	cmp	r3, #64	@ 0x40
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d103      	bne.n	800133e <HAL_UART_IRQHandler+0x17a>
 8001336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800133a:	2b00      	cmp	r3, #0
 800133c:	d04f      	beq.n	80013de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fa96 	bl	8001870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800134e:	2b40      	cmp	r3, #64	@ 0x40
 8001350:	d141      	bne.n	80013d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3314      	adds	r3, #20
 8001358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800135c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001360:	e853 3f00 	ldrex	r3, [r3]
 8001364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800136c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3314      	adds	r3, #20
 800137a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800137e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800138a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800138e:	e841 2300 	strex	r3, r2, [r1]
 8001392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1d9      	bne.n	8001352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d013      	beq.n	80013ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013aa:	4a7d      	ldr	r2, [pc, #500]	@ (80015a0 <HAL_UART_IRQHandler+0x3dc>)
 80013ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc0c 	bl	8000bd0 <HAL_DMA_Abort_IT>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d016      	beq.n	80013ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013c8:	4610      	mov	r0, r2
 80013ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013cc:	e00e      	b.n	80013ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f990 	bl	80016f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013d4:	e00a      	b.n	80013ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f98c 	bl	80016f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013dc:	e006      	b.n	80013ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f988 	bl	80016f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80013ea:	e170      	b.n	80016ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013ec:	bf00      	nop
    return;
 80013ee:	e16e      	b.n	80016ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	f040 814a 	bne.w	800168e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80013fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8143 	beq.w	800168e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 813c 	beq.w	800168e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001436:	2b40      	cmp	r3, #64	@ 0x40
 8001438:	f040 80b4 	bne.w	80015a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8140 	beq.w	80016d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800145a:	429a      	cmp	r2, r3
 800145c:	f080 8139 	bcs.w	80016d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001466:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001472:	f000 8088 	beq.w	8001586 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	330c      	adds	r3, #12
 800147c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001480:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001484:	e853 3f00 	ldrex	r3, [r3]
 8001488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800148c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	330c      	adds	r3, #12
 800149e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80014a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80014a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80014ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80014b2:	e841 2300 	strex	r3, r2, [r1]
 80014b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80014ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1d9      	bne.n	8001476 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3314      	adds	r3, #20
 80014c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014cc:	e853 3f00 	ldrex	r3, [r3]
 80014d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80014d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3314      	adds	r3, #20
 80014e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80014ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80014ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014f2:	e841 2300 	strex	r3, r2, [r1]
 80014f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80014f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1e1      	bne.n	80014c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3314      	adds	r3, #20
 8001504:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001508:	e853 3f00 	ldrex	r3, [r3]
 800150c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800150e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3314      	adds	r3, #20
 800151e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001524:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001526:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001528:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800152a:	e841 2300 	strex	r3, r2, [r1]
 800152e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1e3      	bne.n	80014fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2220      	movs	r2, #32
 800153a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	330c      	adds	r3, #12
 800154a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800154c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800154e:	e853 3f00 	ldrex	r3, [r3]
 8001552:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001556:	f023 0310 	bic.w	r3, r3, #16
 800155a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	330c      	adds	r3, #12
 8001564:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001568:	65ba      	str	r2, [r7, #88]	@ 0x58
 800156a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800156c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800156e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001570:	e841 2300 	strex	r3, r2, [r1]
 8001574:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1e3      	bne.n	8001544 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fab5 	bl	8000af0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800158e:	b29b      	uxth	r3, r3
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f8b6 	bl	8001708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800159c:	e099      	b.n	80016d2 <HAL_UART_IRQHandler+0x50e>
 800159e:	bf00      	nop
 80015a0:	08001937 	.word	0x08001937
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 808b 	beq.w	80016d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80015c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8086 	beq.w	80016d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	330c      	adds	r3, #12
 80015d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d4:	e853 3f00 	ldrex	r3, [r3]
 80015d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80015da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80015e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	330c      	adds	r3, #12
 80015ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80015ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80015f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80015f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015f6:	e841 2300 	strex	r3, r2, [r1]
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80015fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1e3      	bne.n	80015ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3314      	adds	r3, #20
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	e853 3f00 	ldrex	r3, [r3]
 8001610:	623b      	str	r3, [r7, #32]
   return(result);
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3314      	adds	r3, #20
 8001622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001626:	633a      	str	r2, [r7, #48]	@ 0x30
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800162a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800162c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800162e:	e841 2300 	strex	r3, r2, [r1]
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1e3      	bne.n	8001602 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2220      	movs	r2, #32
 800163e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	330c      	adds	r3, #12
 800164e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	e853 3f00 	ldrex	r3, [r3]
 8001656:	60fb      	str	r3, [r7, #12]
   return(result);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 0310 	bic.w	r3, r3, #16
 800165e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	330c      	adds	r3, #12
 8001668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800166c:	61fa      	str	r2, [r7, #28]
 800166e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001670:	69b9      	ldr	r1, [r7, #24]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	e841 2300 	strex	r3, r2, [r1]
 8001678:	617b      	str	r3, [r7, #20]
   return(result);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e3      	bne.n	8001648 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f83e 	bl	8001708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800168c:	e023      	b.n	80016d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800168e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_UART_IRQHandler+0x4ea>
 800169a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800169e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f959 	bl	800195e <UART_Transmit_IT>
    return;
 80016ac:	e014      	b.n	80016d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00e      	beq.n	80016d8 <HAL_UART_IRQHandler+0x514>
 80016ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f999 	bl	80019fe <UART_EndTransmit_IT>
    return;
 80016cc:	e004      	b.n	80016d8 <HAL_UART_IRQHandler+0x514>
    return;
 80016ce:	bf00      	nop
 80016d0:	e002      	b.n	80016d8 <HAL_UART_IRQHandler+0x514>
      return;
 80016d2:	bf00      	nop
 80016d4:	e000      	b.n	80016d8 <HAL_UART_IRQHandler+0x514>
      return;
 80016d6:	bf00      	nop
  }
}
 80016d8:	37e8      	adds	r7, #232	@ 0xe8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop

080016e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b090      	sub	sp, #64	@ 0x40
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001730:	e050      	b.n	80017d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d04c      	beq.n	80017d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800173a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <UART_WaitOnFlagUntilTimeout+0x30>
 8001740:	f7ff f8ac 	bl	800089c <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800174c:	429a      	cmp	r2, r3
 800174e:	d241      	bcs.n	80017d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	330c      	adds	r3, #12
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175a:	e853 3f00 	ldrex	r3, [r3]
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	330c      	adds	r3, #12
 800176e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001770:	637a      	str	r2, [r7, #52]	@ 0x34
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001774:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001776:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001778:	e841 2300 	strex	r3, r2, [r1]
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800177e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e5      	bne.n	8001750 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3314      	adds	r3, #20
 800178a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	e853 3f00 	ldrex	r3, [r3]
 8001792:	613b      	str	r3, [r7, #16]
   return(result);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3314      	adds	r3, #20
 80017a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017a4:	623a      	str	r2, [r7, #32]
 80017a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a8:	69f9      	ldr	r1, [r7, #28]
 80017aa:	6a3a      	ldr	r2, [r7, #32]
 80017ac:	e841 2300 	strex	r3, r2, [r1]
 80017b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e5      	bne.n	8001784 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e00f      	b.n	80017f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	4013      	ands	r3, r2
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d09f      	beq.n	8001732 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3740      	adds	r7, #64	@ 0x40
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2222      	movs	r2, #34	@ 0x22
 8001826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001840:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001870:	b480      	push	{r7}
 8001872:	b095      	sub	sp, #84	@ 0x54
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	330c      	adds	r3, #12
 800187e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001882:	e853 3f00 	ldrex	r3, [r3]
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800188a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800188e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	330c      	adds	r3, #12
 8001896:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001898:	643a      	str	r2, [r7, #64]	@ 0x40
 800189a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800189c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800189e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018a0:	e841 2300 	strex	r3, r2, [r1]
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80018a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e5      	bne.n	8001878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3314      	adds	r3, #20
 80018b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3314      	adds	r3, #20
 80018ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d4:	e841 2300 	strex	r3, r2, [r1]
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e5      	bne.n	80018ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d119      	bne.n	800191c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	330c      	adds	r3, #12
 80018ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	e853 3f00 	ldrex	r3, [r3]
 80018f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f023 0310 	bic.w	r3, r3, #16
 80018fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	330c      	adds	r3, #12
 8001906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001908:	61ba      	str	r2, [r7, #24]
 800190a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800190c:	6979      	ldr	r1, [r7, #20]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	e841 2300 	strex	r3, r2, [r1]
 8001914:	613b      	str	r3, [r7, #16]
   return(result);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e5      	bne.n	80018e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800192a:	bf00      	nop
 800192c:	3754      	adds	r7, #84	@ 0x54
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fecf 	bl	80016f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b21      	cmp	r3, #33	@ 0x21
 8001970:	d13e      	bne.n	80019f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800197a:	d114      	bne.n	80019a6 <UART_Transmit_IT+0x48>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d110      	bne.n	80019a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	1c9a      	adds	r2, r3, #2
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	621a      	str	r2, [r3, #32]
 80019a4:	e008      	b.n	80019b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6211      	str	r1, [r2, #32]
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4619      	mov	r1, r3
 80019c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fe5e 	bl	80016e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b08c      	sub	sp, #48	@ 0x30
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b22      	cmp	r3, #34	@ 0x22
 8001a40:	f040 80ab 	bne.w	8001b9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a4c:	d117      	bne.n	8001a7e <UART_Receive_IT+0x50>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d113      	bne.n	8001a7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	1c9a      	adds	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a7c:	e026      	b.n	8001acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a90:	d007      	beq.n	8001aa2 <UART_Receive_IT+0x74>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10a      	bne.n	8001ab0 <UART_Receive_IT+0x82>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e008      	b.n	8001ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d15a      	bne.n	8001b96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0220 	bic.w	r2, r2, #32
 8001aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d135      	bne.n	8001b8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	330c      	adds	r3, #12
 8001b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	e853 3f00 	ldrex	r3, [r3]
 8001b34:	613b      	str	r3, [r7, #16]
   return(result);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	f023 0310 	bic.w	r3, r3, #16
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	330c      	adds	r3, #12
 8001b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b46:	623a      	str	r2, [r7, #32]
 8001b48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b4a:	69f9      	ldr	r1, [r7, #28]
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	e841 2300 	strex	r3, r2, [r1]
 8001b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1e5      	bne.n	8001b26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d10a      	bne.n	8001b7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fdbf 	bl	8001708 <HAL_UARTEx_RxEventCallback>
 8001b8a:	e002      	b.n	8001b92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7fe fd43 	bl	8000618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e002      	b.n	8001b9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3730      	adds	r7, #48	@ 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba8:	b0c0      	sub	sp, #256	@ 0x100
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc0:	68d9      	ldr	r1, [r3, #12]
 8001bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	ea40 0301 	orr.w	r3, r0, r1
 8001bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001bfc:	f021 010c 	bic.w	r1, r1, #12
 8001c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c1e:	6999      	ldr	r1, [r3, #24]
 8001c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	ea40 0301 	orr.w	r3, r0, r1
 8001c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b8f      	ldr	r3, [pc, #572]	@ (8001e70 <UART_SetConfig+0x2cc>)
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d005      	beq.n	8001c44 <UART_SetConfig+0xa0>
 8001c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8001e74 <UART_SetConfig+0x2d0>)
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d104      	bne.n	8001c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c44:	f7ff f99a 	bl	8000f7c <HAL_RCC_GetPCLK2Freq>
 8001c48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001c4c:	e003      	b.n	8001c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c4e:	f7ff f981 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 8001c52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c60:	f040 810c 	bne.w	8001e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c76:	4622      	mov	r2, r4
 8001c78:	462b      	mov	r3, r5
 8001c7a:	1891      	adds	r1, r2, r2
 8001c7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c7e:	415b      	adcs	r3, r3
 8001c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c86:	4621      	mov	r1, r4
 8001c88:	eb12 0801 	adds.w	r8, r2, r1
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	eb43 0901 	adc.w	r9, r3, r1
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4699      	mov	r9, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	eb18 0303 	adds.w	r3, r8, r3
 8001cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001cb4:	462b      	mov	r3, r5
 8001cb6:	eb49 0303 	adc.w	r3, r9, r3
 8001cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001cca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	18db      	adds	r3, r3, r3
 8001cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cd8:	4613      	mov	r3, r2
 8001cda:	eb42 0303 	adc.w	r3, r2, r3
 8001cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ce8:	f7fe fa94 	bl	8000214 <__aeabi_uldivmod>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4b61      	ldr	r3, [pc, #388]	@ (8001e78 <UART_SetConfig+0x2d4>)
 8001cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	011c      	lsls	r4, r3, #4
 8001cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	464b      	mov	r3, r9
 8001d10:	1891      	adds	r1, r2, r2
 8001d12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d14:	415b      	adcs	r3, r3
 8001d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d1c:	4641      	mov	r1, r8
 8001d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8001d22:	4649      	mov	r1, r9
 8001d24:	eb43 0b01 	adc.w	fp, r3, r1
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d3c:	4692      	mov	sl, r2
 8001d3e:	469b      	mov	fp, r3
 8001d40:	4643      	mov	r3, r8
 8001d42:	eb1a 0303 	adds.w	r3, sl, r3
 8001d46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d4a:	464b      	mov	r3, r9
 8001d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	18db      	adds	r3, r3, r3
 8001d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d6e:	4613      	mov	r3, r2
 8001d70:	eb42 0303 	adc.w	r3, r2, r3
 8001d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d7e:	f7fe fa49 	bl	8000214 <__aeabi_uldivmod>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	4b3b      	ldr	r3, [pc, #236]	@ (8001e78 <UART_SetConfig+0x2d4>)
 8001d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2264      	movs	r2, #100	@ 0x64
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	1acb      	subs	r3, r1, r3
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d9e:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <UART_SetConfig+0x2d4>)
 8001da0:	fba3 2302 	umull	r2, r3, r3, r2
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001dac:	441c      	add	r4, r3
 8001dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001db2:	2200      	movs	r2, #0
 8001db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001db8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001dc0:	4642      	mov	r2, r8
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	1891      	adds	r1, r2, r2
 8001dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001dc8:	415b      	adcs	r3, r3
 8001dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001dd0:	4641      	mov	r1, r8
 8001dd2:	1851      	adds	r1, r2, r1
 8001dd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	414b      	adcs	r3, r1
 8001dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001de8:	4659      	mov	r1, fp
 8001dea:	00cb      	lsls	r3, r1, #3
 8001dec:	4651      	mov	r1, sl
 8001dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001df2:	4651      	mov	r1, sl
 8001df4:	00ca      	lsls	r2, r1, #3
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4642      	mov	r2, r8
 8001dfe:	189b      	adds	r3, r3, r2
 8001e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e04:	464b      	mov	r3, r9
 8001e06:	460a      	mov	r2, r1
 8001e08:	eb42 0303 	adc.w	r3, r2, r3
 8001e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e24:	460b      	mov	r3, r1
 8001e26:	18db      	adds	r3, r3, r3
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	eb42 0303 	adc.w	r3, r2, r3
 8001e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001e3a:	f7fe f9eb 	bl	8000214 <__aeabi_uldivmod>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <UART_SetConfig+0x2d4>)
 8001e44:	fba3 1302 	umull	r1, r3, r3, r2
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	2164      	movs	r1, #100	@ 0x64
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	3332      	adds	r3, #50	@ 0x32
 8001e56:	4a08      	ldr	r2, [pc, #32]	@ (8001e78 <UART_SetConfig+0x2d4>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	f003 0207 	and.w	r2, r3, #7
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4422      	add	r2, r4
 8001e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e6c:	e106      	b.n	800207c <UART_SetConfig+0x4d8>
 8001e6e:	bf00      	nop
 8001e70:	40011000 	.word	0x40011000
 8001e74:	40011400 	.word	0x40011400
 8001e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e80:	2200      	movs	r2, #0
 8001e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e8e:	4642      	mov	r2, r8
 8001e90:	464b      	mov	r3, r9
 8001e92:	1891      	adds	r1, r2, r2
 8001e94:	6239      	str	r1, [r7, #32]
 8001e96:	415b      	adcs	r3, r3
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e9e:	4641      	mov	r1, r8
 8001ea0:	1854      	adds	r4, r2, r1
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	eb43 0501 	adc.w	r5, r3, r1
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	00eb      	lsls	r3, r5, #3
 8001eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eb6:	00e2      	lsls	r2, r4, #3
 8001eb8:	4614      	mov	r4, r2
 8001eba:	461d      	mov	r5, r3
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	18e3      	adds	r3, r4, r3
 8001ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	eb45 0303 	adc.w	r3, r5, r3
 8001eca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001eda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001eea:	4629      	mov	r1, r5
 8001eec:	008b      	lsls	r3, r1, #2
 8001eee:	4621      	mov	r1, r4
 8001ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	008a      	lsls	r2, r1, #2
 8001ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001efc:	f7fe f98a 	bl	8000214 <__aeabi_uldivmod>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4b60      	ldr	r3, [pc, #384]	@ (8002088 <UART_SetConfig+0x4e4>)
 8001f06:	fba3 2302 	umull	r2, r3, r3, r2
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	011c      	lsls	r4, r3, #4
 8001f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f12:	2200      	movs	r2, #0
 8001f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001f20:	4642      	mov	r2, r8
 8001f22:	464b      	mov	r3, r9
 8001f24:	1891      	adds	r1, r2, r2
 8001f26:	61b9      	str	r1, [r7, #24]
 8001f28:	415b      	adcs	r3, r3
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f30:	4641      	mov	r1, r8
 8001f32:	1851      	adds	r1, r2, r1
 8001f34:	6139      	str	r1, [r7, #16]
 8001f36:	4649      	mov	r1, r9
 8001f38:	414b      	adcs	r3, r1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f48:	4659      	mov	r1, fp
 8001f4a:	00cb      	lsls	r3, r1, #3
 8001f4c:	4651      	mov	r1, sl
 8001f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f52:	4651      	mov	r1, sl
 8001f54:	00ca      	lsls	r2, r1, #3
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	189b      	adds	r3, r3, r2
 8001f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f64:	464b      	mov	r3, r9
 8001f66:	460a      	mov	r2, r1
 8001f68:	eb42 0303 	adc.w	r3, r2, r3
 8001f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f88:	4649      	mov	r1, r9
 8001f8a:	008b      	lsls	r3, r1, #2
 8001f8c:	4641      	mov	r1, r8
 8001f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f92:	4641      	mov	r1, r8
 8001f94:	008a      	lsls	r2, r1, #2
 8001f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f9a:	f7fe f93b 	bl	8000214 <__aeabi_uldivmod>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <UART_SetConfig+0x4e4>)
 8001fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2264      	movs	r2, #100	@ 0x64
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	1acb      	subs	r3, r1, r3
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	3332      	adds	r3, #50	@ 0x32
 8001fb8:	4a33      	ldr	r2, [pc, #204]	@ (8002088 <UART_SetConfig+0x4e4>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc4:	441c      	add	r4, r3
 8001fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fca:	2200      	movs	r2, #0
 8001fcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fce:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001fd4:	4642      	mov	r2, r8
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	1891      	adds	r1, r2, r2
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	415b      	adcs	r3, r3
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1851      	adds	r1, r2, r1
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	4649      	mov	r1, r9
 8001fec:	414b      	adcs	r3, r1
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001ffc:	4659      	mov	r1, fp
 8001ffe:	00cb      	lsls	r3, r1, #3
 8002000:	4651      	mov	r1, sl
 8002002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002006:	4651      	mov	r1, sl
 8002008:	00ca      	lsls	r2, r1, #3
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	4603      	mov	r3, r0
 8002010:	4642      	mov	r2, r8
 8002012:	189b      	adds	r3, r3, r2
 8002014:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002016:	464b      	mov	r3, r9
 8002018:	460a      	mov	r2, r1
 800201a:	eb42 0303 	adc.w	r3, r2, r3
 800201e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	663b      	str	r3, [r7, #96]	@ 0x60
 800202a:	667a      	str	r2, [r7, #100]	@ 0x64
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002038:	4649      	mov	r1, r9
 800203a:	008b      	lsls	r3, r1, #2
 800203c:	4641      	mov	r1, r8
 800203e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002042:	4641      	mov	r1, r8
 8002044:	008a      	lsls	r2, r1, #2
 8002046:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800204a:	f7fe f8e3 	bl	8000214 <__aeabi_uldivmod>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <UART_SetConfig+0x4e4>)
 8002054:	fba3 1302 	umull	r1, r3, r3, r2
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	2164      	movs	r1, #100	@ 0x64
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	3332      	adds	r3, #50	@ 0x32
 8002066:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <UART_SetConfig+0x4e4>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	f003 020f 	and.w	r2, r3, #15
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4422      	add	r2, r4
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002082:	46bd      	mov	sp, r7
 8002084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002088:	51eb851f 	.word	0x51eb851f

0800208c <__libc_init_array>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	4d0d      	ldr	r5, [pc, #52]	@ (80020c4 <__libc_init_array+0x38>)
 8002090:	4c0d      	ldr	r4, [pc, #52]	@ (80020c8 <__libc_init_array+0x3c>)
 8002092:	1b64      	subs	r4, r4, r5
 8002094:	10a4      	asrs	r4, r4, #2
 8002096:	2600      	movs	r6, #0
 8002098:	42a6      	cmp	r6, r4
 800209a:	d109      	bne.n	80020b0 <__libc_init_array+0x24>
 800209c:	4d0b      	ldr	r5, [pc, #44]	@ (80020cc <__libc_init_array+0x40>)
 800209e:	4c0c      	ldr	r4, [pc, #48]	@ (80020d0 <__libc_init_array+0x44>)
 80020a0:	f000 f818 	bl	80020d4 <_init>
 80020a4:	1b64      	subs	r4, r4, r5
 80020a6:	10a4      	asrs	r4, r4, #2
 80020a8:	2600      	movs	r6, #0
 80020aa:	42a6      	cmp	r6, r4
 80020ac:	d105      	bne.n	80020ba <__libc_init_array+0x2e>
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b4:	4798      	blx	r3
 80020b6:	3601      	adds	r6, #1
 80020b8:	e7ee      	b.n	8002098 <__libc_init_array+0xc>
 80020ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80020be:	4798      	blx	r3
 80020c0:	3601      	adds	r6, #1
 80020c2:	e7f2      	b.n	80020aa <__libc_init_array+0x1e>
 80020c4:	0800211c 	.word	0x0800211c
 80020c8:	0800211c 	.word	0x0800211c
 80020cc:	0800211c 	.word	0x0800211c
 80020d0:	08002120 	.word	0x08002120

080020d4 <_init>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	bf00      	nop
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr

080020e0 <_fini>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	bf00      	nop
 80020e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	469e      	mov	lr, r3
 80020ea:	4770      	bx	lr
